import {
  RelativeTime,
  getBadgeProps
} from "./chunk-UJUXNIP6.js";
import "./chunk-P6ZGRK46.js";
import "./chunk-I2QJ2YVA.js";
import "./chunk-MQY5TE4O.js";
import "./chunk-4JEMFY4B.js";
import "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import "./chunk-56D2UW5G.js";
import {
  Widget
} from "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-QUEMEGFP.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import "./chunk-GJKFT6EX.js";
import "./chunk-HP6PMHBS.js";
import "./chunk-QP5S5OPY.js";
import "./chunk-LVJ5LIPC.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import "./chunk-CLBB5XWA.js";
import {
  useTracking
} from "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import "./chunk-KYOQACZ3.js";
import "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import "./chunk-5BKV6XT7.js";
import {
  adminApi
} from "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Badge,
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import {
  Link,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$1z
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/content-releases/admin/src/services/homepage.ts
var contentManagerApi = adminApi.enhanceEndpoints({
  addTagTypes: ["UpcomingReleasesList"]
}).injectEndpoints({
  endpoints: (builder) => ({
    getUpcomingReleases: builder.query({
      query: () => "/content-releases/homepage/upcoming-releases",
      transformResponse: (response) => response.data,
      providesTags: (_, _err) => ["UpcomingReleasesList"]
    })
  }),
  overrideExisting: true
});
var { useGetUpcomingReleasesQuery } = contentManagerApi;

// ../packages/core/content-releases/admin/src/components/Widgets.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var ReleasesTable = ({ items }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (item) => {
    return `/plugins/content-releases/${item.id}`;
  };
  const handleRowClick = (item) => () => {
    trackUsage("willEditReleaseFromHome");
    const link = getEditViewLink(item);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, { colCount: 4, rowCount: (items == null ? void 0 : items.length) ?? 0, children: (0, import_jsx_runtime.jsx)(Tbody, { children: items == null ? void 0 : items.map((item) => (0, import_jsx_runtime.jsxs)(Tr, { onClick: handleRowClick(item), cursor: "pointer", children: [
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { title: item.name, variant: "omega", textColor: "neutral800", children: item.name }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: item.status ? (0, import_jsx_runtime.jsx)(Badge, { ...getBadgeProps(item.status), children: item.status }) : (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", "aria-hidden": true, children: "-" }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "omega", textTransform: "capitalize", textColor: "neutral600", children: item.scheduledAt ? (0, import_jsx_runtime.jsx)(RelativeTime, { timestamp: new Date(item.scheduledAt) }) : formatMessage({
      id: "content-releases.pages.Releases.not-scheduled",
      defaultMessage: "Not scheduled"
    }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        tag: Link,
        to: getEditViewLink(item),
        onClick: () => trackUsage("willEditReleaseFromHome"),
        label: formatMessage({
          id: "content-manager.actions.edit.label",
          defaultMessage: "Edit"
        }),
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
      }
    ) }) })
  ] }, item.documentId)) }) });
};
var UpcomingReleasesWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetUpcomingReleasesQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-releases.widget.upcoming-releases.no-data",
      defaultMessage: "No releases"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(ReleasesTable, { items: data });
};
export {
  UpcomingReleasesWidget
};
//# sourceMappingURL=Widgets-HB77SBEJ.js.map
