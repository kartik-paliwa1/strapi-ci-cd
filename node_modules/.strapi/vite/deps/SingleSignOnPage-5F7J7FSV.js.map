{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/SingleSignOnPage.tsx"],
  "sourcesContent": ["import {\n  Button,\n  Flex,\n  Grid,\n  MultiSelect,\n  MultiSelectOption,\n  Typography,\n  Field,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport {\n  Form,\n  FormHelpers,\n  InputProps,\n  useField,\n} from '../../../../../../admin/src/components/Form';\nimport { InputRenderer } from '../../../../../../admin/src/components/FormInputs/Renderer';\nimport { GradientBadge } from '../../../../../../admin/src/components/GradientBadge';\nimport { Layouts } from '../../../../../../admin/src/components/Layouts/Layout';\nimport { Page } from '../../../../../../admin/src/components/PageHelpers';\nimport { useTypedSelector } from '../../../../../../admin/src/core/store/hooks';\nimport { useNotification } from '../../../../../../admin/src/features/Notifications';\nimport { useAdminRoles } from '../../../../../../admin/src/hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../../../admin/src/hooks/useRBAC';\nimport {\n  useGetProviderOptionsQuery,\n  useUpdateProviderOptionsMutation,\n} from '../../../../../../admin/src/services/auth';\nimport { isBaseQueryError } from '../../../../../../admin/src/utils/baseQuery';\nimport { translatedErrors } from '../../../../../../admin/src/utils/translatedErrors';\nimport { ProvidersOptions } from '../../../../../../shared/contracts/admin';\n\nconst SCHEMA = yup.object().shape({\n  autoRegister: yup.bool().required(translatedErrors.required),\n  defaultRole: yup.mixed().when('autoRegister', (value, initSchema) => {\n    return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n  }),\n  ssoLockedRoles: yup\n    .array()\n    .nullable()\n    .of(\n      yup.mixed().when('ssoLockedRoles', (value, initSchema) => {\n        return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n      })\n    ),\n});\n\nexport const SingleSignOnPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingProviderOptions, data } = useGetProviderOptionsQuery();\n\n  const [updateProviderOptions, { isLoading: isSubmittingForm }] =\n    useUpdateProviderOptionsMutation();\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate, canRead: canReadRoles },\n  } = useRBAC({\n    ...permissions.settings?.sso,\n    readRoles: permissions.settings?.roles.read ?? [],\n  });\n\n  const { roles, isLoading: isLoadingRoles } = useAdminRoles(undefined, {\n    skip: !canReadRoles,\n  });\n\n  const handleSubmit = async (\n    body: ProvidersOptions.Request['body'],\n    helpers: FormHelpers<ProvidersOptions.Request['body']>\n  ) => {\n    try {\n      const res = await updateProviderOptions(body);\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved' }),\n      });\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred, please try again.',\n        }),\n      });\n    }\n  };\n\n  const isLoadingData = isLoadingRoles || isLoadingPermissions || isLoadingProviderOptions;\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'SSO',\n          }\n        )}\n      </Page.Title>\n      <Page.Main aria-busy={isSubmittingForm || isLoadingData} tabIndex={-1}>\n        <Form\n          method=\"PUT\"\n          onSubmit={handleSubmit}\n          validationSchema={SCHEMA}\n          disabled={!canUpdate}\n          initialValues={\n            data || {\n              autoRegister: false,\n              defaultRole: null,\n              ssoLockedRoles: null,\n            }\n          }\n        >\n          {({ modified, isSubmitting }) => (\n            <>\n              <Layouts.Header\n                primaryAction={\n                  <Button\n                    disabled={!modified}\n                    loading={isSubmitting}\n                    startIcon={<Check />}\n                    type=\"submit\"\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                }\n                title={formatMessage({\n                  id: 'Settings.sso.title',\n                  defaultMessage: 'Single Sign-On',\n                })}\n                subtitle={formatMessage({\n                  id: 'Settings.sso.description',\n                  defaultMessage: 'Configure the settings for the Single Sign-On feature.',\n                })}\n                secondaryAction={\n                  <GradientBadge\n                    label={formatMessage({\n                      id: 'components.premiumFeature.title',\n                      defaultMessage: 'Premium feature',\n                    })}\n                  />\n                }\n              />\n              <Layouts.Content>\n                {isSubmitting || isLoadingData ? (\n                  <Page.Loading />\n                ) : (\n                  <Flex\n                    direction=\"column\"\n                    alignItems=\"stretch\"\n                    gap={4}\n                    background=\"neutral0\"\n                    padding={6}\n                    shadow=\"filterShadow\"\n                    hasRadius\n                  >\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid.Root gap={4}>\n                      {[\n                        {\n                          hint: formatMessage({\n                            id: 'Settings.sso.form.registration.description',\n                            defaultMessage: 'Create new user on SSO login if no account exists',\n                          }),\n                          label: formatMessage({\n                            id: 'Settings.sso.form.registration.label',\n                            defaultMessage: 'Auto-registration',\n                          }),\n                          name: 'autoRegister',\n                          size: 6,\n                          type: 'boolean' as const,\n                        },\n                        {\n                          hint: formatMessage({\n                            id: 'Settings.sso.form.defaultRole.description',\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role',\n                          }),\n                          label: formatMessage({\n                            id: 'Settings.sso.form.defaultRole.label',\n                            defaultMessage: 'Default role',\n                          }),\n                          name: 'defaultRole',\n                          options: roles.map(({ id, name }) => ({\n                            label: name,\n                            value: id.toString(),\n                          })),\n                          placeholder: formatMessage({\n                            id: 'components.InputSelect.option.placeholder',\n                            defaultMessage: 'Choose here',\n                          }),\n                          size: 6,\n                          type: 'enumeration' as const,\n                        },\n                        {\n                          hint: formatMessage({\n                            id: 'Settings.sso.form.localAuthenticationLock.description',\n                            defaultMessage:\n                              'Select the roles for which you want to disable the local authentication',\n                          }),\n                          label: formatMessage({\n                            id: 'Settings.sso.form.localAuthenticationLock.label',\n                            defaultMessage: 'Local authentication lock-out',\n                          }),\n                          name: 'ssoLockedRoles',\n                          options: roles.map(({ id, name }) => ({\n                            label: name,\n                            value: id.toString(),\n                          })),\n                          placeholder: formatMessage({\n                            id: 'components.InputSelect.option.placeholder',\n                            defaultMessage: 'Choose here',\n                          }),\n                          size: 6,\n                          type: 'multi' as const,\n                        },\n                      ].map(({ size, ...field }) => (\n                        <Grid.Item\n                          key={field.name}\n                          col={size}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <FormInputRenderer {...field} />\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Flex>\n                )}\n              </Layouts.Content>\n            </>\n          )}\n        </Form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\ntype FormInputProps = InputProps | MultiSelectInputProps;\n\nconst FormInputRenderer = (props: FormInputProps) => {\n  switch (props.type) {\n    case 'multi':\n      return <MultiSelectInput {...props} />;\n    default:\n      return <InputRenderer {...props} />;\n  }\n};\n\ntype MultiSelectInputProps = Omit<Extract<InputProps, { type: 'enumeration' }>, 'type'> & {\n  type: 'multi';\n};\n\nconst MultiSelectInput = ({ hint, label, name, options, ...props }: MultiSelectInputProps) => {\n  const field = useField(name);\n\n  return (\n    <Field.Root name={name} hint={hint} error={field.error}>\n      <Field.Label>{label}</Field.Label>\n      <MultiSelect\n        onChange={(value) => field.onChange('ssoLockedRoles', value)}\n        onClear={() => field.onChange('ssoLockedRoles', [])}\n        value={field.value ?? []}\n        withTags\n        {...props}\n      >\n        {options.map(({ label, value }) => (\n          <MultiSelectOption key={value} value={value}>\n            {label}\n          </MultiSelectOption>\n        ))}\n      </MultiSelect>\n      <Field.Hint />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\nexport const ProtectedSSO = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.sso?.main);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <SingleSignOnPage />\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["create", "label"]
}
