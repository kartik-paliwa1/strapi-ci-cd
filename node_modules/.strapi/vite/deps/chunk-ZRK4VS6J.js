import {
  useDragLayer
} from "./chunk-AQI7D6YQ.js";
import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import {
  Page
} from "./chunk-GH6VCESI.js";
import {
  Box,
  Flex,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import {
  ForwardRef$4$
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/review-workflows/admin/src/routes/settings/constants.ts
var DRAG_DROP_TYPES = {
  STAGE: "stage"
};

// ../packages/core/review-workflows/admin/src/routes/settings/components/StageDragPreview.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var StageDragPreview = ({ name }) => {
  return (0, import_jsx_runtime.jsxs)(
    Flex,
    {
      background: "primary100",
      borderStyle: "dashed",
      borderColor: "primary600",
      borderWidth: "1px",
      gap: 3,
      hasRadius: true,
      padding: 3,
      shadow: "tableShadow",
      width: "30rem",
      children: [
        (0, import_jsx_runtime.jsx)(
          Flex,
          {
            alignItems: "center",
            background: "neutral200",
            borderRadius: "50%",
            height: 6,
            justifyContent: "center",
            width: 6,
            children: (0, import_jsx_runtime.jsx)(ForwardRef$4$, { width: "0.8rem", fill: "neutral600" })
          }
        ),
        (0, import_jsx_runtime.jsx)(Typography, { fontWeight: "bold", children: name })
      ]
    }
  );
};

// ../packages/core/review-workflows/admin/src/routes/settings/components/Layout.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function getStyle(initialOffset, currentOffset, mouseOffset) {
  if (!initialOffset || !currentOffset || !mouseOffset) {
    return { display: "none" };
  }
  const { x, y } = mouseOffset;
  return {
    transform: `translate(${x}px, ${y}px)`
  };
}
var DragLayerRendered = () => {
  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(
    (monitor) => ({
      item: monitor.getItem(),
      itemType: monitor.getItemType(),
      initialOffset: monitor.getInitialSourceClientOffset(),
      currentOffset: monitor.getSourceClientOffset(),
      isDragging: monitor.isDragging(),
      mouseOffset: monitor.getClientOffset()
    })
  );
  if (!isDragging || itemType !== DRAG_DROP_TYPES.STAGE) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(
    Box,
    {
      height: "100%",
      left: 0,
      position: "fixed",
      pointerEvents: "none",
      top: 0,
      zIndex: 100,
      width: "100%",
      children: (0, import_jsx_runtime2.jsxs)(Box, { style: getStyle(initialOffset, currentOffset, mouseOffset), children: [
        (0, import_jsx_runtime2.jsx)(StageDragPreview, { name: typeof item.item === "string" ? item.item : null }),
        ";"
      ] })
    }
  );
};
var Root = ({ children }) => {
  return (0, import_jsx_runtime2.jsx)(Page.Main, { children: (0, import_jsx_runtime2.jsx)(Layouts.Content, { children }) });
};
var Header = ({ title, subtitle, navigationAction, primaryAction }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    (0, import_jsx_runtime2.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: title
      }
    ) }),
    (0, import_jsx_runtime2.jsx)(
      Layouts.BaseHeader,
      {
        navigationAction,
        primaryAction,
        title,
        subtitle
      }
    )
  ] });
};

export {
  DRAG_DROP_TYPES,
  DragLayerRendered,
  Root,
  Header
};
//# sourceMappingURL=chunk-ZRK4VS6J.js.map
