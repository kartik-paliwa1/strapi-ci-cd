import {
  StageColumn
} from "./chunk-7CCPSWKC.js";
import "./chunk-RO2BUD6V.js";
import {
  useGetRecentlyAssignedDocumentsQuery
} from "./chunk-Q3Z4QNPF.js";
import "./chunk-SYRHSDDL.js";
import "./chunk-2EAWRSMC.js";
import "./chunk-SM234VLV.js";
import "./chunk-RBYIJT55.js";
import "./chunk-G6DU2HFW.js";
import {
  DocumentStatus,
  RelativeTime
} from "./chunk-BLF5M6NP.js";
import "./chunk-25JU5VM7.js";
import "./chunk-LAHJ77FA.js";
import "./chunk-6NSXXAS5.js";
import "./chunk-7QVSMWPD.js";
import "./chunk-NLQDD6GV.js";
import "./chunk-3DFTBBEY.js";
import "./chunk-AQI7D6YQ.js";
import "./chunk-4JEMFY4B.js";
import "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import {
  Widget
} from "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import "./chunk-GJKFT6EX.js";
import "./chunk-HP6PMHBS.js";
import "./chunk-QP5S5OPY.js";
import "./chunk-LVJ5LIPC.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-SG5GK5UT.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import "./chunk-CLBB5XWA.js";
import {
  useTracking
} from "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import "./chunk-KYOQACZ3.js";
import "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import "./chunk-5BKV6XT7.js";
import "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import {
  Link,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$1z
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/review-workflows/admin/src/components/Widgets.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({
  documents,
  type
}) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome", { entryType: type });
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, { colCount: 6, rowCount: (documents == null ? void 0 : documents.length) ?? 0, children: (0, import_jsx_runtime.jsx)(Tbody, { children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, { onClick: handleRowClick(document), cursor: "pointer", children: [
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { title: document.title, variant: "omega", textColor: "neutral800", children: document.title }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { variant: "omega", textColor: "neutral600", children: document.kind === "singleType" ? formatMessage({
      id: "content-manager.widget.last-edited.single-type",
      defaultMessage: "Single-Type"
    }) : formatMessage({
      id: document.contentTypeDisplayName,
      defaultMessage: document.contentTypeDisplayName
    }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, { status: document.status }) : (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", "aria-hidden": true, children: "-" }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: (0, import_jsx_runtime.jsx)(RelativeTime, { timestamp: new Date(document.updatedAt) }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(StageColumn, { strapi_stage: document.strapi_stage }) }),
    (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        tag: Link,
        to: getEditViewLink(document),
        onClick: () => trackUsage("willEditEntryFromHome", { entryType: type }),
        label: formatMessage({
          id: "content-manager.actions.edit.label",
          defaultMessage: "Edit"
        }),
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
      }
    ) }) })
  ] }, document.documentId)) }) });
};
var AssignedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "review-workflows.widget.assigned.no-data",
      defaultMessage: "No entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, { documents: data, type: "assigned" });
};
export {
  AssignedWidget
};
//# sourceMappingURL=Widgets-TWJJZEL2.js.map
