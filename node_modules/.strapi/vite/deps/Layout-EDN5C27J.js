import {
  require_sortBy
} from "./chunk-NAKEQ5O3.js";
import "./chunk-LVCIZRV3.js";
import {
  selectAdminPermissions
} from "./chunk-BFVRT7AA.js";
import "./chunk-VRMJTUGB.js";
import {
  SETTINGS_LINKS_CE,
  SubNav
} from "./chunk-MXUJETMG.js";
import "./chunk-UIAWNFPX.js";
import {
  useLicenseLimits
} from "./chunk-QUEMEGFP.js";
import {
  useEnterprise
} from "./chunk-OHBWTDYV.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-53SLEXFN.js";
import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import {
  useAppInfo,
  useTracking
} from "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import {
  Page
} from "./chunk-GH6VCESI.js";
import {
  useAuth,
  useStrapiApp
} from "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import "./chunk-5BKV6XT7.js";
import "./chunk-ZOFH3G6M.js";
import {
  useSelector
} from "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Badge,
  Divider,
  useIntl
} from "./chunk-DOD64YWE.js";
import {
  Navigate,
  Outlet,
  useLocation,
  useMatch
} from "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$2x
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/admin/src/hooks/useSettingsMenu.ts
var React = __toESM(require_react());
var import_sortBy = __toESM(require_sortBy());
var formatLinks = (menu) => menu.map((menuSection) => {
  const formattedLinks = menuSection.links.map((link) => ({
    ...link,
    isDisplayed: false
  }));
  return { ...menuSection, links: formattedLinks };
});
var useSettingsMenu = () => {
  const [{ isLoading, menu }, setData] = React.useState({
    isLoading: true,
    menu: []
  });
  const checkUserHasPermission = useAuth(
    "useSettingsMenu",
    (state) => state.checkUserHasPermissions
  );
  const shouldUpdateStrapi = useAppInfo("useSettingsMenu", (state) => state.shouldUpdateStrapi);
  const settings = useStrapiApp("useSettingsMenu", (state) => state.settings);
  const permissions = useSelector(selectAdminPermissions);
  const ceLinks = React.useMemo(() => SETTINGS_LINKS_CE(), []);
  const { admin: adminLinks, global: globalLinks } = useEnterprise(
    ceLinks,
    async () => (await import("./constants-XR36CM7E.js")).SETTINGS_LINKS_EE(),
    {
      combine(ceLinks2, eeLinks) {
        return {
          admin: [...eeLinks.admin, ...ceLinks2.admin],
          global: [...ceLinks2.global, ...eeLinks.global]
        };
      },
      defaultValue: {
        admin: [],
        global: []
      }
    }
  );
  const addPermissions = React.useCallback(
    (link) => {
      var _a, _b;
      if (!link.id) {
        throw new Error("The settings menu item must have an id attribute.");
      }
      return {
        ...link,
        permissions: ((_b = (_a = permissions.settings) == null ? void 0 : _a[link.id]) == null ? void 0 : _b.main) ?? []
      };
    },
    [permissions.settings]
  );
  React.useEffect(() => {
    const getData = async () => {
      const buildMenuPermissions = (sections2) => Promise.all(
        sections2.reduce((acc, section, sectionIndex) => {
          const linksWithPermissions = section.links.map(async (link, linkIndex) => ({
            hasPermission: (await checkUserHasPermission(link.permissions)).length > 0,
            sectionIndex,
            linkIndex
          }));
          return [...acc, ...linksWithPermissions];
        }, [])
      );
      const menuPermissions = await buildMenuPermissions(sections);
      setData((prev) => {
        return {
          ...prev,
          isLoading: false,
          menu: sections.map((section, sectionIndex) => ({
            ...section,
            links: section.links.map((link, linkIndex) => {
              const permission = menuPermissions.find(
                (permission2) => permission2.sectionIndex === sectionIndex && permission2.linkIndex === linkIndex
              );
              return {
                ...link,
                isDisplayed: Boolean(permission == null ? void 0 : permission.hasPermission)
              };
            })
          }))
        };
      });
    };
    const { global, ...otherSections } = settings;
    const sections = formatLinks([
      {
        ...global,
        links: (0, import_sortBy.default)([...global.links, ...globalLinks.map(addPermissions)], (link) => link.id).map(
          (link) => ({
            ...link,
            hasNotification: link.id === "000-application-infos" && shouldUpdateStrapi
          })
        )
      },
      {
        id: "permissions",
        intlLabel: { id: "Settings.permissions", defaultMessage: "Administration Panel" },
        links: adminLinks.map(addPermissions)
      },
      ...Object.values(otherSections)
    ]);
    getData();
  }, [
    adminLinks,
    globalLinks,
    settings,
    shouldUpdateStrapi,
    addPermissions,
    checkUserHasPermission
  ]);
  return {
    isLoading,
    menu: menu.map((menuItem) => ({
      ...menuItem,
      links: menuItem.links.filter((link) => link.isDisplayed)
    }))
  };
};

// ../packages/core/admin/admin/src/pages/Settings/components/SettingsNav.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var StyledBadge = dt(Badge)`
  border-radius: 50%;
  padding: ${({ theme }) => theme.spaces[2]};
  height: 2rem;
`;
var SettingsNav = ({ menu }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const { license } = useLicenseLimits();
  const availableFeatureNames = license == null ? void 0 : license.features.map((feature) => feature.name);
  const linksIdsToLicenseFeaturesNames = {
    "content-releases": "cms-content-releases",
    "review-workflows": "review-workflows",
    sso: "sso",
    auditLogs: "audit-logs",
    "auditLogs-purchase-page": "audit-logs"
  };
  const filteredMenu = menu.filter(
    (section) => !section.links.every((link) => link.isDisplayed === false)
  );
  const sections = filteredMenu.map((section) => {
    return {
      ...section,
      title: section.intlLabel,
      links: section.links.map((link) => {
        return {
          ...link,
          id: link.id,
          title: link.intlLabel,
          name: link.id
        };
      })
    };
  });
  const label = formatMessage({
    id: "global.settings",
    defaultMessage: "Settings"
  });
  const handleClickOnLink = (destination) => () => {
    trackUsage("willNavigate", { from: pathname, to: destination });
  };
  return (0, import_jsx_runtime.jsxs)(SubNav.Main, { "aria-label": label, children: [
    (0, import_jsx_runtime.jsx)(SubNav.Header, { label }),
    (0, import_jsx_runtime.jsx)(Divider, { background: "neutral150", marginBottom: 5 }),
    (0, import_jsx_runtime.jsx)(SubNav.Sections, { children: sections.map((section) => (0, import_jsx_runtime.jsx)(SubNav.Section, { label: formatMessage(section.intlLabel), children: section.links.map((link) => {
      return (0, import_jsx_runtime.jsx)(
        SubNav.Link,
        {
          to: link.to,
          onClick: handleClickOnLink(link.to),
          label: formatMessage(link.intlLabel),
          endAction: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            (link == null ? void 0 : link.licenseOnly) && (0, import_jsx_runtime.jsx)(
              ForwardRef$2x,
              {
                fill: (availableFeatureNames || []).includes(
                  linksIdsToLicenseFeaturesNames[link.id]
                ) ? "primary600" : "neutral300",
                width: "1.5rem",
                height: "1.5rem"
              }
            ),
            (link == null ? void 0 : link.hasNotification) && (0, import_jsx_runtime.jsx)(
              StyledBadge,
              {
                "aria-label": "Notification",
                backgroundColor: "primary600",
                textColor: "neutral0",
                children: "1"
              }
            )
          ] })
        },
        link.id
      );
    }) }, section.id)) })
  ] });
};

// ../packages/core/admin/admin/src/pages/Settings/Layout.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var Layout = () => {
  const match = useMatch("/settings/:settingId/*");
  const { formatMessage } = useIntl();
  const { isLoading, menu } = useSettingsMenu();
  if (isLoading) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (!(match == null ? void 0 : match.params.settingId)) {
    return (0, import_jsx_runtime2.jsx)(Navigate, { to: "application-infos" });
  }
  return (0, import_jsx_runtime2.jsxs)(Layouts.Root, { sideNav: (0, import_jsx_runtime2.jsx)(SettingsNav, { menu }), children: [
    (0, import_jsx_runtime2.jsx)(Page.Title, { children: formatMessage({
      id: "global.settings",
      defaultMessage: "Settings"
    }) }),
    (0, import_jsx_runtime2.jsx)(Outlet, {})
  ] });
};
export {
  Layout
};
//# sourceMappingURL=Layout-EDN5C27J.js.map
