{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/Notifications.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Alert, AlertVariant, Flex, useCallbackRef, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface NotificationLink {\n  label: string;\n  target?: string;\n  url: string;\n}\n\ninterface NotificationConfig {\n  blockTransition?: boolean;\n  link?: NotificationLink;\n  message?: string;\n  onClose?: () => void;\n  timeout?: number;\n  title?: string;\n  type?: 'info' | 'warning' | 'danger' | 'success';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\ninterface NotificationsContextValue {\n  /**\n   * Toggles a notification, wrapped in `useCallback` for a stable identity.\n   */\n  toggleNotification: (config: NotificationConfig) => void;\n}\n\nconst NotificationsContext = React.createContext<NotificationsContextValue>({\n  toggleNotification: () => {},\n});\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface NotificationsProviderProps {\n  children: React.ReactNode;\n}\ninterface Notification extends NotificationConfig {\n  id: number;\n}\n\n/**\n * @internal\n * @description DO NOT USE. This will be removed before stable release of v5.\n */\nconst NotificationsProvider = ({ children }: NotificationsProviderProps) => {\n  const notificationIdRef = React.useRef(0);\n\n  const [notifications, setNotifications] = React.useState<Notification[]>([]);\n\n  const toggleNotification = React.useCallback(\n    ({ type, message, link, timeout, blockTransition, onClose, title }: NotificationConfig) => {\n      setNotifications((s) => [\n        ...s,\n        {\n          id: notificationIdRef.current++,\n          type,\n          message,\n          link,\n          timeout,\n          blockTransition,\n          onClose,\n          title,\n        },\n      ]);\n    },\n    []\n  );\n\n  const clearNotification = React.useCallback((id: number) => {\n    setNotifications((s) => s.filter((n) => n.id !== id));\n  }, []);\n\n  const value = React.useMemo(() => ({ toggleNotification }), [toggleNotification]);\n\n  return (\n    <NotificationsContext.Provider value={value}>\n      <Flex\n        left=\"50%\"\n        marginLeft=\"-250px\"\n        position=\"fixed\"\n        direction=\"column\"\n        alignItems=\"stretch\"\n        gap={2}\n        top={`4.6rem`}\n        width={`50rem`}\n        zIndex=\"notification\"\n      >\n        {notifications.map((notification) => {\n          return (\n            <Notification\n              key={notification.id}\n              {...notification}\n              clearNotification={clearNotification}\n            />\n          );\n        })}\n      </Flex>\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\ninterface NotificationProps extends Notification {\n  clearNotification: (id: number) => void;\n}\n\nconst Notification = ({\n  clearNotification,\n  blockTransition = false,\n  id,\n  link,\n  message,\n  onClose,\n  timeout = 2500,\n  title,\n  type,\n}: NotificationProps) => {\n  const { formatMessage } = useIntl();\n  /**\n   * Chances are `onClose` won't be classed as stabilised,\n   * so we use `useCallbackRef` to avoid make it stable.\n   */\n  const onCloseCallback = useCallbackRef(onClose);\n\n  const handleClose = React.useCallback(() => {\n    onCloseCallback();\n\n    clearNotification(id);\n  }, [clearNotification, id, onCloseCallback]);\n\n  // eslint-disable-next-line consistent-return\n  React.useEffect(() => {\n    if (!blockTransition) {\n      const timeoutReference = setTimeout(() => {\n        handleClose();\n      }, timeout);\n\n      return () => {\n        clearTimeout(timeoutReference);\n      };\n    }\n  }, [blockTransition, handleClose, timeout]);\n\n  const getVariant = (): AlertVariant => {\n    switch (type) {\n      case 'info':\n        return 'default';\n      case 'danger':\n        return 'danger';\n      case 'warning':\n        return 'warning';\n      default:\n        return 'success';\n    }\n  };\n\n  return (\n    <Alert\n      action={\n        link ? (\n          <Link href={link.url} isExternal>\n            {link.label}\n          </Link>\n        ) : undefined\n      }\n      onClose={handleClose}\n      closeLabel={formatMessage({\n        id: 'global.close',\n        defaultMessage: 'Close',\n      })}\n      title={title}\n      variant={getVariant()}\n    >\n      {message}\n    </Alert>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @preserve\n * @description Returns an object to interact with the notification\n * system. The callbacks are wrapped in `useCallback` for a stable\n * identity.\n *\n * @example\n * ```tsx\n * import { useNotification } from '@strapi/strapi/admin';\n *\n * const MyComponent = () => {\n *  const { toggleNotification } = useNotification();\n *\n *  return <button onClick={() => toggleNotification({ message: 'Hello world!' })}>Click me</button>;\n */\nconst useNotification = () => React.useContext(NotificationsContext);\n\nexport { NotificationsProvider, useNotification };\nexport type { NotificationConfig, NotificationsContextValue };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,YAAuB;AAkFnB;AAlDJ,IAAM,uBAA6B,oBAAyC;AAAA,EAC1E,oBAAoB,MAAM;AAAA,EAAC;AAC7B,CAAC;AAiBD,IAAM,wBAAwB,CAAC,EAAE,SAAS,MAAkC;AAC1E,QAAM,oBAA0B,aAAO,CAAC;AAExC,QAAM,CAAC,eAAe,gBAAgB,IAAU,eAAyB,CAAC,CAAC;AAE3E,QAAM,qBAA2B;AAAA,IAC/B,CAAC,EAAE,MAAM,SAAS,MAAM,SAAS,iBAAiB,SAAS,MAAM,MAA0B;AACzF,uBAAiB,CAAC,MAAM;AAAA,QACtB,GAAG;AAAA,QACH;AAAA,UACE,IAAI,kBAAkB;AAAA,UACtB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,oBAA0B,kBAAY,CAAC,OAAe;AAC1D,qBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC;AAAA,EACtD,GAAG,CAAC,CAAC;AAEL,QAAM,QAAc,cAAQ,OAAO,EAAE,mBAAmB,IAAI,CAAC,kBAAkB,CAAC;AAEhF,aACE,yBAAC,qBAAqB,UAArB,EAA8B,OAC7B;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,MAAK;AAAA,QACL,YAAW;AAAA,QACX,UAAS;AAAA,QACT,WAAU;AAAA,QACV,YAAW;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AAAA,QACL,OAAO;AAAA,QACP,QAAO;AAAA,QAEN,wBAAc,IAAI,CAAC,iBAAiB;AACnC,qBACE;AAAA,YAAC;AAAA;AAAA,cAEE,GAAG;AAAA,cACJ;AAAA;AAAA,YAFK,aAAa;AAAA,UAGpB;AAAA,QAEJ,CAAC;AAAA;AAAA,IACH;AAAA,IACC;AAAA,KACH;AAEJ;AAMA,IAAM,eAAe,CAAC;AAAA,EACpB;AAAA,EACA,kBAAkB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA;AACF,MAAyB;AACvB,QAAM,EAAE,cAAc,IAAI,QAAQ;AAKlC,QAAM,kBAAkB,eAAe,OAAO;AAE9C,QAAM,cAAoB,kBAAY,MAAM;AAC1C,oBAAgB;AAEhB,sBAAkB,EAAE;AAAA,EACtB,GAAG,CAAC,mBAAmB,IAAI,eAAe,CAAC;AAG3C,EAAM,gBAAU,MAAM;AACpB,QAAI,CAAC,iBAAiB;AACpB,YAAM,mBAAmB,WAAW,MAAM;AACxC,oBAAY;AAAA,MACd,GAAG,OAAO;AAEV,aAAO,MAAM;AACX,qBAAa,gBAAgB;AAAA,MAC/B;AAAA,IACF;AAAA,EACF,GAAG,CAAC,iBAAiB,aAAa,OAAO,CAAC;AAE1C,QAAM,aAAa,MAAoB;AACrC,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC,QACE,WACE,wBAAC,QAAK,MAAM,KAAK,KAAK,YAAU,MAC7B,eAAK,OACR,IACE;AAAA,MAEN,SAAS;AAAA,MACT,YAAY,cAAc;AAAA,QACxB,IAAI;AAAA,QACJ,gBAAgB;AAAA,MAClB,CAAC;AAAA,MACD;AAAA,MACA,SAAS,WAAW;AAAA,MAEnB;AAAA;AAAA,EACH;AAEJ;AAqBA,IAAM,kBAAkB,MAAY,iBAAW,oBAAoB;",
  "names": []
}
