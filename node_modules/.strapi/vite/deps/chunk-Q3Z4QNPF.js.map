{
  "version": 3,
  "sources": ["../../../../../packages/core/review-workflows/admin/src/constants.ts", "../../../../../packages/core/review-workflows/admin/src/services/api.ts", "../../../../../packages/core/review-workflows/admin/src/services/content-manager.ts"],
  "sourcesContent": ["import { lightTheme } from '@strapi/design-system';\n\nconst PLUGIN_ID = 'review-workflows';\n/**\n * The name of the feature in the license.\n */\nconst FEATURE_ID = 'review-workflows';\n\nexport const CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME = 'numberOfWorkflows';\nexport const CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME = 'stagesPerWorkflow';\n\nexport const STAGE_COLOR_DEFAULT = lightTheme.colors.primary600;\n\nexport { FEATURE_ID, PLUGIN_ID };\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nconst reviewWorkflowsApi = adminApi.enhanceEndpoints({\n  addTagTypes: ['ReviewWorkflow', 'ReviewWorkflowStages', 'Document', 'ContentTypeSettings'],\n});\n\nexport { reviewWorkflowsApi };\n", "import * as Homepage from '../../../shared/contracts/homepage';\n\n/* eslint-disable check-file/filename-naming-convention */\nimport { reviewWorkflowsApi } from './api';\n\nimport type {\n  GetStages,\n  UpdateStage,\n  UpdateAssignee,\n} from '../../../shared/contracts/review-workflows';\nimport type { Contracts } from '@strapi/content-manager/_internal/shared';\n\ntype ContentType = Contracts.ContentTypes.ContentType;\ninterface ContentTypes {\n  collectionType: ContentType[];\n  singleType: ContentType[];\n}\n\nconst SINGLE_TYPES = 'single-types';\n\nconst contentManagerApi = reviewWorkflowsApi\n  .enhanceEndpoints({\n    addTagTypes: ['RecentlyAssignedList', 'RecentDocumentList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getStages: builder.query<\n        {\n          stages: NonNullable<GetStages.Response['data']>;\n          meta: NonNullable<GetStages.Response['meta']>;\n        },\n        GetStages.Params & { slug: string; params?: object }\n      >({\n        query: ({ model, slug, id, params }) => ({\n          url: `/review-workflows/content-manager/${slug}/${model}/${id}/stages`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: GetStages.Response) => {\n          return {\n            meta: res.meta ?? { workflowCount: 0 },\n            stages: res.data ?? [],\n          };\n        },\n        providesTags: ['ReviewWorkflowStages'],\n      }),\n      updateStage: builder.mutation<\n        UpdateStage.Response['data'],\n        UpdateStage.Request['body'] & UpdateStage.Params & { slug: string; params?: object }\n      >({\n        query: ({ model, slug, id, params, ...data }) => ({\n          url: `/review-workflows/content-manager/${slug}/${model}/${id}/stage`,\n          method: 'PUT',\n          data,\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: UpdateStage.Response) => res.data,\n        invalidatesTags: (_result, _error, { slug, id, model }) => {\n          return [\n            {\n              type: 'Document',\n              id: slug !== SINGLE_TYPES ? `${model}_${id}` : model,\n            },\n            { type: 'Document', id: `${model}_LIST` },\n            'ReviewWorkflowStages',\n          ];\n        },\n      }),\n      updateAssignee: builder.mutation<\n        UpdateAssignee.Response['data'],\n        UpdateAssignee.Request['body'] & UpdateAssignee.Params & { slug: string; params?: object }\n      >({\n        query: ({ model, slug, id, params, ...data }) => ({\n          url: `/review-workflows/content-manager/${slug}/${model}/${id}/assignee`,\n          method: 'PUT',\n          data,\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: UpdateAssignee.Response) => res.data,\n        invalidatesTags: (_result, _error, { slug, id, model }) => {\n          return [\n            {\n              type: 'Document',\n              id: slug !== SINGLE_TYPES ? `${model}_${id}` : model,\n            },\n            { type: 'Document', id: `${model}_LIST` },\n            'RecentlyAssignedList',\n          ];\n        },\n      }),\n      getContentTypes: builder.query<ContentTypes, void>({\n        query: () => ({\n          url: `/content-manager/content-types`,\n          method: 'GET',\n        }),\n        transformResponse: (res: { data: Contracts.ContentTypes.ContentType[] }) => {\n          return res.data.reduce<ContentTypes>(\n            (acc, curr) => {\n              if (curr.isDisplayed) {\n                acc[curr.kind].push(curr);\n              }\n              return acc;\n            },\n            {\n              collectionType: [],\n              singleType: [],\n            }\n          );\n        },\n      }),\n      getRecentlyAssignedDocuments: builder.query<\n        Homepage.GetRecentlyAssignedDocuments.Response['data'],\n        void\n      >({\n        query: () => '/review-workflows/homepage/recently-assigned-documents',\n        transformResponse: (response: Homepage.GetRecentlyAssignedDocuments.Response) =>\n          response.data,\n        providesTags: (_, _err) => ['RecentlyAssignedList', 'RecentDocumentList'],\n      }),\n    }),\n    overrideExisting: true,\n  });\n\nconst {\n  useGetStagesQuery,\n  useUpdateStageMutation,\n  useUpdateAssigneeMutation,\n  useGetContentTypesQuery,\n  useGetRecentlyAssignedDocumentsQuery,\n} = contentManagerApi;\n\nexport {\n  useGetStagesQuery,\n  useUpdateStageMutation,\n  useUpdateAssigneeMutation,\n  useGetContentTypesQuery,\n  useGetRecentlyAssignedDocumentsQuery,\n};\nexport type { ContentTypes, ContentType };\n"],
  "mappings": "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",
  "names": []
}
