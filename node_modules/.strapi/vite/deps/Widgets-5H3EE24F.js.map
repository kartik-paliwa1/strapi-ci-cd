{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/Widgets.tsx", "../../../../../packages/core/content-manager/admin/src/services/homepage.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Widget, useTracking, useGetCountDocumentsQuery } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Tr,\n  Typography,\n  Portal,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { DocumentStatus } from '../pages/EditView/components/DocumentStatus';\nimport { useGetRecentDocumentsQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nimport type { RecentDocument } from '../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst RecentDocumentsTable = ({\n  documents,\n  type,\n}: {\n  documents: RecentDocument[];\n  type: 'edited' | 'published';\n}) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome', {\n      entryType: type,\n    });\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome', { type })}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} type=\"edited\" />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} type=\"published\" />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ChartEntriesWidget\n * -----------------------------------------------------------------------------------------------*/\nconst RADIUS = 80;\nconst STROKE = 10;\nconst CIRCUMFERENCE = 2 * Math.PI * (RADIUS - STROKE / 2);\n\ntype ThemeColor = keyof DefaultTheme['colors'];\n\nconst ArcChart = styled.circle<{ $arcColor: ThemeColor }>`\n  stroke: ${({ theme, $arcColor }) => theme.colors[$arcColor]};\n`;\n\nconst TextChart = styled.tspan<{ $textColor: ThemeColor }>`\n  text-transform: lowercase;\n  fill: ${({ theme, $textColor }) => theme.colors[$textColor]};\n`;\n\nconst KeyChartItem = styled(Flex)`\n  width: 100%;\n\n  ${({ theme }) => theme.breakpoints.small} {\n    width: auto;\n  }\n`;\n\ninterface ChartData {\n  label: string;\n  count: number;\n  color: ThemeColor;\n}\n\nconst DonutChartSVG = ({ data }: { data: ChartData[] }) => {\n  const { locale } = useIntl();\n  const { formatMessage } = useIntl();\n  const total = data.reduce((acc, curr) => acc + curr.count, 0);\n  const [tooltip, setTooltip] = React.useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    value: ChartData | null;\n    isTouch?: boolean;\n  }>({ visible: false, x: 0, y: 0, value: null });\n\n  let cumulativePercent = 0;\n\n  const handleMouseOver = (e: React.MouseEvent<SVGCircleElement>, value: ChartData) => {\n    setTooltip({\n      visible: true,\n      x: e.clientX,\n      y: e.clientY,\n      value,\n    });\n  };\n  const handleMouseOut = () => {\n    setTooltip((t) => ({ ...t, visible: false }));\n  };\n\n  const handleFocus = (e: React.FocusEvent<SVGCircleElement>, value: ChartData) => {\n    setTooltip({\n      visible: true,\n      x:\n        e.currentTarget.getBoundingClientRect().width / 2 +\n        e.currentTarget.getBoundingClientRect().left,\n      y:\n        e.currentTarget.getBoundingClientRect().height +\n        e.currentTarget.getBoundingClientRect().top,\n      value,\n    });\n  };\n\n  return (\n    <Flex direction=\"column\" gap={6} margin=\"auto\">\n      <svg\n        width={RADIUS * 2}\n        height={RADIUS * 2}\n        viewBox={`0 0 ${RADIUS * 2} ${RADIUS * 2}`}\n        style={{ position: 'relative', zIndex: 1 }}\n      >\n        <g transform={`rotate(-90 ${RADIUS} ${RADIUS})`}>\n          {data.map((value) => {\n            const percent = (value.count / total) * 100;\n            const arcLength = (percent / 100) * CIRCUMFERENCE;\n            const dashArray = `${arcLength} ${CIRCUMFERENCE - arcLength}`;\n            const dashOffset = CIRCUMFERENCE * (1 - cumulativePercent / 100);\n            const el = (\n              <ArcChart\n                key={value.label}\n                cx={RADIUS}\n                cy={RADIUS}\n                r={RADIUS - STROKE / 2}\n                fill=\"none\"\n                strokeWidth={STROKE}\n                strokeDasharray={dashArray}\n                strokeDashoffset={dashOffset}\n                style={{ transition: 'stroke-dashoffset 0.3s', cursor: 'pointer' }}\n                tabIndex={0}\n                aria-describedby={tooltip.visible ? 'chart-tooltip' : undefined}\n                onFocus={(e) => handleFocus(e, value)}\n                onBlur={handleMouseOut}\n                onMouseMove={(e) => handleMouseOver(e, value)}\n                onMouseLeave={handleMouseOut}\n                $arcColor={value.color}\n              />\n            );\n            cumulativePercent += percent;\n            return el;\n          })}\n        </g>\n        <text x={RADIUS} y={RADIUS} textAnchor=\"middle\" fontSize=\"2.4rem\" fontWeight=\"bold\">\n          <TextChart x={RADIUS} dy=\"0\" $textColor=\"neutral800\">\n            {new Intl.NumberFormat(locale, {\n              notation: 'compact',\n              maximumFractionDigits: 1,\n            }).format(total)}\n          </TextChart>\n          <TextChart\n            x={RADIUS}\n            dy=\"1.4em\"\n            fontSize=\"1.4rem\"\n            fontWeight=\"normal\"\n            $textColor=\"neutral600\"\n          >\n            {formatMessage(\n              {\n                id: 'content-manager.widget.chart-entries.count.label',\n                defaultMessage: '{count, plural, =0 {entries} one {entry} other {entries}}',\n              },\n              { count: total }\n            )}\n          </TextChart>\n        </text>\n      </svg>\n      {tooltip.visible && tooltip.value && (\n        <Portal\n          style={{\n            position: 'fixed',\n            left: 16,\n            top: 16,\n            zIndex: 2,\n            transform: `translate(${tooltip.x}px, ${tooltip.y}px)`,\n          }}\n          data-testid=\"entries-chart-tooltip\"\n        >\n          <Box\n            background=\"neutral900\"\n            padding={2}\n            borderRadius={1}\n            textAlign=\"center\"\n            role=\"tooltip\"\n            aria-live=\"polite\"\n          >\n            <Typography textColor=\"neutral0\">\n              {formatMessage(\n                {\n                  id: 'content-manager.widget.chart-entries.tooltip',\n                  defaultMessage: '{count} items',\n                },\n                {\n                  count: tooltip.value.count,\n                  label: tooltip.value.label,\n                }\n              )}\n            </Typography>\n          </Box>\n        </Portal>\n      )}\n      <Flex gap={4} wrap=\"wrap\">\n        {data.map(\n          (value) =>\n            value.count > 0 && (\n              <KeyChartItem gap={1} key={value.label}>\n                <Box background={value.color} padding={2} borderRadius={1} />\n                <Typography variant=\"pi\">{value.label}</Typography>\n              </KeyChartItem>\n            )\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nconst ChartEntriesWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data: countDocuments, isLoading, error } = useGetCountDocumentsQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error) {\n    return <Widget.Error />;\n  }\n\n  const { draft, published, modified } = countDocuments ?? {\n    draft: 0,\n    published: 0,\n    modified: 0,\n  };\n\n  const total = draft + published + modified;\n\n  if (!total) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return (\n    <Flex minHeight=\"100%\">\n      <DonutChartSVG\n        data={[\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.draft',\n              defaultMessage: 'Draft',\n            }),\n            count: draft,\n            color: 'secondary500',\n          },\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.modified',\n              defaultMessage: 'Modified',\n            }),\n            count: modified,\n            color: 'alternative500',\n          },\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.published',\n              defaultMessage: 'Published',\n            }),\n            count: published,\n            color: 'success500',\n          },\n        ]}\n      />\n    </Flex>\n  );\n};\n\nexport { ChartEntriesWidget, LastEditedWidget, LastPublishedWidget };\n", "import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { contentManagerApi } from './api';\n\nconst homepageService = contentManagerApi\n  .enhanceEndpoints({\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    /**\n     * TODO: Remove overrideExisting when we remove the future flag\n     * and delete the old homepage service in the admin\n     */\n    overrideExisting: true,\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/content-manager/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n"],
  "mappings": "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",
  "names": []
}
