{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Auth/components/Login.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Button, Flex, Main, Typography, Link } from '@strapi/design-system';\nimport camelCase from 'lodash/camelCase';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Form } from '../../../components/Form';\nimport { InputRenderer } from '../../../components/FormInputs/Renderer';\nimport { Logo } from '../../../components/UnauthenticatedLogo';\nimport { useAuth } from '../../../features/Auth';\nimport {\n  UnauthenticatedLayout,\n  Column,\n  LayoutContent,\n} from '../../../layouts/UnauthenticatedLayout';\nimport { translatedErrors } from '../../../utils/translatedErrors';\n\nimport type { Login } from '../../../../../shared/contracts/authentication';\n\ninterface LoginProps {\n  children?: React.ReactNode;\n}\n\nconst LOGIN_SCHEMA = yup.object().shape({\n  email: yup\n    .string()\n    .nullable()\n    .email({\n      id: translatedErrors.email.id,\n      defaultMessage: 'Not a valid email',\n    })\n    .required(translatedErrors.required),\n  password: yup.string().required(translatedErrors.required).nullable(),\n  rememberMe: yup.bool().nullable(),\n});\n\nconst Login = ({ children }: LoginProps) => {\n  const [apiError, setApiError] = React.useState<string>();\n  const { formatMessage } = useIntl();\n  const { search: searchString } = useLocation();\n  const query = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\n  const navigate = useNavigate();\n\n  const { login } = useAuth('Login', (auth) => auth);\n\n  const handleLogin = async (body: Parameters<typeof login>[0]) => {\n    setApiError(undefined);\n\n    const res = await login(body);\n\n    if ('error' in res) {\n      const message = res.error.message ?? 'Something went wrong';\n\n      if (camelCase(message).toLowerCase() === 'usernotactive') {\n        navigate('/auth/oops');\n        return;\n      }\n\n      setApiError(message);\n    } else {\n      const redirectTo = query.get('redirectTo');\n      const redirectUrl = redirectTo ? decodeURIComponent(redirectTo) : '/';\n\n      navigate(redirectUrl);\n    }\n  };\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={1}>\n              <Typography variant=\"alpha\" tag=\"h1\">\n                {formatMessage({\n                  id: 'Auth.form.welcome.title',\n                  defaultMessage: 'Welcome!',\n                })}\n              </Typography>\n            </Box>\n            <Box paddingBottom={7}>\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                {formatMessage({\n                  id: 'Auth.form.welcome.subtitle',\n                  defaultMessage: 'Log in to your Strapi account',\n                })}\n              </Typography>\n            </Box>\n            {apiError ? (\n              <Typography id=\"global-form-error\" role=\"alert\" tabIndex={-1} textColor=\"danger600\">\n                {apiError}\n              </Typography>\n            ) : null}\n          </Column>\n          <Form\n            method=\"PUT\"\n            initialValues={{\n              email: '',\n              password: '',\n              rememberMe: false,\n            }}\n            onSubmit={(values) => {\n              handleLogin(values);\n            }}\n            validationSchema={LOGIN_SCHEMA}\n          >\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              {[\n                {\n                  label: formatMessage({ id: 'Auth.form.email.label', defaultMessage: 'Email' }),\n                  name: 'email',\n                  placeholder: formatMessage({\n                    id: 'Auth.form.email.placeholder',\n                    defaultMessage: 'kai@doe.com',\n                  }),\n                  required: true,\n                  type: 'string' as const,\n                },\n                {\n                  label: formatMessage({\n                    id: 'global.password',\n                    defaultMessage: 'Password',\n                  }),\n                  name: 'password',\n                  required: true,\n                  type: 'password' as const,\n                },\n                {\n                  label: formatMessage({\n                    id: 'Auth.form.rememberMe.label',\n                    defaultMessage: 'Remember me',\n                  }),\n                  name: 'rememberMe',\n                  type: 'checkbox' as const,\n                },\n              ].map((field) => (\n                <InputRenderer key={field.name} {...field} />\n              ))}\n              <Button fullWidth type=\"submit\">\n                {formatMessage({ id: 'Auth.form.button.login', defaultMessage: 'Login' })}\n              </Button>\n            </Flex>\n          </Form>\n          {children}\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            <Link isExternal={false} tag={NavLink} to=\"/auth/forgot-password\">\n              {formatMessage({\n                id: 'Auth.link.forgot-password',\n                defaultMessage: 'Forgot your password?',\n              })}\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nexport { Login };\nexport type { LoginProps };\n"],
  "mappings": "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",
  "names": ["create", "camelCase"]
}
