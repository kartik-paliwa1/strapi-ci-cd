{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/NpsSurvey.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Button,\n  Typography,\n  Textarea,\n  Portal,\n  Field,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { useAppInfo } from '../features/AppInfo';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { usePersistentState } from '../hooks/usePersistentState';\n\nconst FieldWrapper = styled(Field.Root)`\n  height: 3.2rem;\n  width: 3.2rem;\n\n  > label,\n  ~ input {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  > label {\n    color: inherit;\n    cursor: pointer;\n    padding: ${({ theme }) => theme.spaces[2]};\n    text-align: center;\n    vertical-align: middle;\n  }\n\n  &:hover,\n  &:focus-within {\n    background-color: ${({ theme }) => theme.colors.neutral0};\n  }\n\n  &:active,\n  &.selected {\n    color: ${({ theme }) => theme.colors.primary700};\n    background-color: ${({ theme }) => theme.colors.neutral0};\n    border-color: ${({ theme }) => theme.colors.primary700};\n  }\n`;\n\nconst delays = {\n  postResponse: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  postFirstDismissal: 14 * 24 * 60 * 60 * 1000, // 14 days in ms\n  postSubsequentDismissal: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  display: 30 * 60 * 1000, // 30 minutes in ms\n};\n\nconst ratingArray = [...Array(11).keys()];\n\nconst checkIfShouldShowSurvey = (settings: NpsSurveySettings) => {\n  const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;\n\n  // This function goes through all the cases where we'd want to not show the survey:\n  // 1. If the survey is disabled by strapi, abort mission, don't bother checking the other settings.\n  // 2. If the survey is disabled by user, abort mission, don't bother checking the other settings.\n  // 3. If the user has already responded to the survey, check if enough time has passed since the last response.\n  // 4. If the user has dismissed the survey twice or more before, check if enough time has passed since the last dismissal.\n  // 5. If the user has only dismissed the survey once before, check if enough time has passed since the first dismissal.\n  // If none of these cases check out, then we show the survey.\n  // Note that submitting a response resets the dismissal counts.\n  // Checks 4 and 5 should not be reversed, since the first dismissal will also exist if the user has dismissed the survey twice or more before.\n\n  // For users who had created an account before the NPS feature was introduced,\n  // we assume that they would have enabled the NPS feature if they had the chance.\n\n  // Global strapi disable for NSP.\n  if (window.strapi.flags.nps === false) {\n    return false;\n  }\n\n  // User chose not to enable the NPS feature when signing up\n  if (enabled === false) {\n    return false;\n  }\n\n  // The user has already responded to the survey\n  if (lastResponseDate) {\n    const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();\n\n    if (timeSinceLastResponse >= delays.postResponse) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has dismissed the survey twice or more before\n  if (lastDismissalDate) {\n    const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();\n\n    if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has only dismissed the survey once before\n  if (firstDismissalDate) {\n    const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();\n\n    if (timeSinceFirstDismissal >= delays.postFirstDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has not interacted with the survey before\n  return true;\n};\n\nconst NpsSurvey = () => {\n  const { formatMessage } = useIntl();\n  const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();\n  const [isFeedbackResponse, setIsFeedbackResponse] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const currentEnvironment = useAppInfo('NpsSurvey', (state) => state.currentEnvironment);\n  const strapiVersion = useAppInfo('NpsSurvey', (state) => state.strapiVersion);\n\n  interface NpsSurveyMutationBody {\n    email: string;\n    rating: number | null;\n    comment: string;\n    environment?: string;\n    version?: string;\n    license: 'Enterprise' | 'Community';\n  }\n\n  // Only check on first render if the survey should be shown\n  const [surveyIsShown, setSurveyIsShown] = React.useState(\n    checkIfShouldShowSurvey(npsSurveySettings)\n  );\n\n  // Set a cooldown to show the survey when session begins\n  const [displaySurvey, setDisplaySurvey] = React.useState(false);\n\n  React.useEffect(() => {\n    const displayTime = setTimeout(() => {\n      setDisplaySurvey(true);\n    }, delays.display);\n\n    return () => {\n      clearTimeout(displayTime);\n    };\n  }, []);\n\n  const { user } = useAuth('NpsSurvey', (auth) => auth);\n\n  if (!displaySurvey) {\n    return null;\n  }\n\n  if (!surveyIsShown) {\n    return null;\n  }\n\n  const handleSubmitResponse = async ({\n    npsSurveyRating,\n    npsSurveyFeedback,\n  }: {\n    npsSurveyRating: NpsSurveyMutationBody['rating'];\n    npsSurveyFeedback: NpsSurveyMutationBody['comment'];\n  }) => {\n    try {\n      const body = {\n        email: typeof user === 'object' && user.email ? user.email : '',\n        rating: npsSurveyRating,\n        comment: npsSurveyFeedback,\n        environment: currentEnvironment,\n        version: strapiVersion ?? undefined,\n        license: window.strapi.projectType,\n        isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud',\n      };\n      const res = await fetch(\n        `${process.env.STRAPI_ANALYTICS_URL || 'https://analytics.strapi.io'}/submit-nps`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n        }\n      );\n\n      if (!res.ok) {\n        throw new Error('Failed to submit NPS survey');\n      }\n\n      setNpsSurveySettings((settings) => ({\n        ...settings,\n        lastResponseDate: new Date().toString(),\n        firstDismissalDate: null,\n        lastDismissalDate: null,\n      }));\n      setIsFeedbackResponse(true);\n      // Thank you message displayed in the banner should disappear after few seconds.\n      setTimeout(() => {\n        setSurveyIsShown(false);\n      }, 3000);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDismiss = () => {\n    setNpsSurveySettings((settings) => {\n      const nextSettings = {\n        ...settings,\n        lastResponseDate: null,\n      };\n\n      if (settings.firstDismissalDate) {\n        // If the user dismisses the survey for the second time\n        nextSettings.lastDismissalDate = new Date().toString();\n      } else {\n        // If the user dismisses the survey for the first time\n        nextSettings.firstDismissalDate = new Date().toString();\n      }\n\n      return nextSettings;\n    });\n\n    setSurveyIsShown(false);\n  };\n\n  return (\n    <Portal>\n      <Formik\n        initialValues={{ npsSurveyFeedback: '', npsSurveyRating: null }}\n        onSubmit={handleSubmitResponse}\n        validationSchema={yup.object({\n          npsSurveyFeedback: yup.string(),\n          npsSurveyRating: yup.number().required(),\n        })}\n      >\n        {({ values, handleChange, setFieldValue, isSubmitting }) => (\n          <Form name=\"npsSurveyForm\">\n            <Flex\n              hasRadius\n              direction=\"column\"\n              padding={4}\n              borderColor=\"primary200\"\n              background=\"neutral0\"\n              shadow=\"popupShadow\"\n              position=\"fixed\"\n              bottom={0}\n              left=\"50%\"\n              transform=\"translateX(-50%)\"\n              zIndex=\"200\"\n              width=\"50%\"\n            >\n              {isFeedbackResponse ? (\n                <Typography fontWeight=\"semiBold\">\n                  {formatMessage({\n                    id: 'app.components.NpsSurvey.feedback-response',\n                    defaultMessage: 'Thank you very much for your feedback!',\n                  })}\n                </Typography>\n              ) : (\n                <Box tag=\"fieldset\" width=\"100%\" borderWidth={0}>\n                  <Flex justifyContent=\"space-between\" width=\"100%\">\n                    <Box marginLeft=\"auto\" marginRight=\"auto\">\n                      <Typography fontWeight=\"semiBold\" tag=\"legend\">\n                        {formatMessage({\n                          id: 'app.components.NpsSurvey.banner-title',\n                          defaultMessage:\n                            'How likely are you to recommend Strapi to a friend or colleague?',\n                        })}\n                      </Typography>\n                    </Box>\n                    <IconButton\n                      onClick={handleDismiss}\n                      withTooltip={false}\n                      label={formatMessage({\n                        id: 'app.components.NpsSurvey.dismiss-survey-label',\n                        defaultMessage: 'Dismiss survey',\n                      })}\n                    >\n                      <Cross />\n                    </IconButton>\n                  </Flex>\n                  <Flex gap={2} marginTop={2} marginBottom={2} justifyContent=\"center\">\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'app.components.NpsSurvey.no-recommendation',\n                        defaultMessage: 'Not at all likely',\n                      })}\n                    </Typography>\n                    {ratingArray.map((number) => {\n                      return (\n                        <FieldWrapper\n                          key={number}\n                          name=\"npsSurveyRating\"\n                          className={values.npsSurveyRating === number ? 'selected' : undefined} // \"selected\" class added when child radio button is checked\n                          hasRadius\n                          background=\"primary100\"\n                          borderColor=\"primary200\"\n                          color=\"primary600\"\n                          position=\"relative\"\n                          cursor=\"pointer\"\n                        >\n                          <Field.Label>\n                            <VisuallyHidden>\n                              <Field.Input\n                                type=\"radio\"\n                                checked={values.npsSurveyRating === number}\n                                onChange={(e) =>\n                                  setFieldValue('npsSurveyRating', parseInt(e.target.value, 10))\n                                }\n                                value={number}\n                              />\n                            </VisuallyHidden>\n                            {number}\n                          </Field.Label>\n                        </FieldWrapper>\n                      );\n                    })}\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'app.components.NpsSurvey.happy-to-recommend',\n                        defaultMessage: 'Extremely likely',\n                      })}\n                    </Typography>\n                  </Flex>\n                  {values.npsSurveyRating !== null && (\n                    <Flex direction=\"column\">\n                      <Box marginTop={2}>\n                        <Field.Label fontWeight=\"semiBold\" fontSize={2}>\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.feedback-question',\n                            defaultMessage: 'Do you have any suggestion for improvements?',\n                          })}\n                        </Field.Label>\n                      </Box>\n                      <Box width=\"62%\" marginTop={3} marginBottom={4}>\n                        <Textarea\n                          id=\"npsSurveyFeedback\" // formik element attribute \"id\" should be same as the values key to work\n                          width=\"100%\"\n                          onChange={handleChange}\n                          value={values.npsSurveyFeedback}\n                        />\n                      </Box>\n                      <Button marginBottom={2} type=\"submit\" loading={isSubmitting}>\n                        {formatMessage({\n                          id: 'app.components.NpsSurvey.submit-feedback',\n                          defaultMessage: 'Submit Feedback',\n                        })}\n                      </Button>\n                    </Flex>\n                  )}\n                </Box>\n              )}\n            </Flex>\n          </Form>\n        )}\n      </Formik>\n    </Portal>\n  );\n};\n\ninterface NpsSurveySettings {\n  enabled: boolean;\n  lastResponseDate: string | null;\n  firstDismissalDate: string | null;\n  lastDismissalDate: string | null;\n}\n\n/**\n * We exported to make it available during admin user registration.\n * Because we only enable the NPS for users who subscribe to the newsletter when signing up\n */\nfunction useNpsSurveySettings() {\n  const [npsSurveySettings, setNpsSurveySettings] = usePersistentState<NpsSurveySettings>(\n    'STRAPI_NPS_SURVEY_SETTINGS',\n    {\n      enabled: true,\n      lastResponseDate: null,\n      firstDismissalDate: null,\n      lastDismissalDate: null,\n    }\n  );\n\n  /**\n   * TODO: should this just be an array so we can alias the `usePersistentState` hook?\n   */\n  return { npsSurveySettings, setNpsSurveySettings };\n}\n\nexport { NpsSurvey, useNpsSurveySettings };\n"],
  "mappings": "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",
  "names": ["create"]
}
