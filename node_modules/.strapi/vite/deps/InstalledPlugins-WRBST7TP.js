import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import {
  useGetPluginsQuery
} from "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import {
  useTypedSelector
} from "./chunk-N64PMPD5.js";
import {
  useNotification
} from "./chunk-5BKV6XT7.js";
import "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  useIntl,
  useNotifyAT
} from "./chunk-DOD64YWE.js";
import "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/admin/src/pages/Settings/pages/InstalledPlugins.tsx
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var InstalledPlugins = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { notifyStatus } = useNotifyAT();
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { isLoading, data, error } = useGetPluginsQuery();
  React.useEffect(() => {
    if (data) {
      notifyStatus(
        formatMessage(
          {
            id: "app.utils.notify.data-loaded",
            defaultMessage: "The {target} has loaded"
          },
          {
            target: formatMessage({
              id: "global.plugins",
              defaultMessage: "Plugins"
            })
          }
        )
      );
    }
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    }
  }, [data, error, formatAPIError, formatMessage, notifyStatus, toggleNotification]);
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsx)(Layouts.Root, { children: (0, import_jsx_runtime.jsxs)(Page.Main, { children: [
    (0, import_jsx_runtime.jsx)(
      Layouts.Header,
      {
        title: formatMessage({
          id: "global.plugins",
          defaultMessage: "Plugins"
        }),
        subtitle: formatMessage({
          id: "app.components.ListPluginsPage.description",
          defaultMessage: "List of the installed plugins in the project."
        })
      }
    ),
    (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (0, import_jsx_runtime.jsxs)(Table, { colCount: 2, rowCount: ((_a = data == null ? void 0 : data.plugins) == null ? void 0 : _a.length) ?? 0 + 1, children: [
      (0, import_jsx_runtime.jsx)(Thead, { children: (0, import_jsx_runtime.jsxs)(Tr, { children: [
        (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
          id: "global.name",
          defaultMessage: "Name"
        }) }) }),
        (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
          id: "global.description",
          defaultMessage: "description"
        }) }) })
      ] }) }),
      (0, import_jsx_runtime.jsx)(Tbody, { children: data == null ? void 0 : data.plugins.map(({ name, displayName, description }) => {
        return (0, import_jsx_runtime.jsxs)(Tr, { children: [
          (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", variant: "omega", fontWeight: "bold", children: formatMessage({
            id: `global.plugins.${name}`,
            defaultMessage: displayName
          }) }) }),
          (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: formatMessage({
            id: `global.plugins.${name}.description`,
            defaultMessage: description
          }) }) })
        ] }, name);
      }) })
    ] }) })
  ] }) });
};
var ProtectedInstalledPlugins = () => {
  var _a;
  const { formatMessage } = useIntl();
  const permissions = useTypedSelector((state) => state.admin_app.permissions);
  return (0, import_jsx_runtime.jsxs)(Page.Protect, { permissions: (_a = permissions.marketplace) == null ? void 0 : _a.main, children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage({
      id: "global.plugins",
      defaultMessage: "Plugins"
    }) }),
    (0, import_jsx_runtime.jsx)(InstalledPlugins, {})
  ] });
};
export {
  InstalledPlugins,
  ProtectedInstalledPlugins
};
//# sourceMappingURL=InstalledPlugins-WRBST7TP.js.map
