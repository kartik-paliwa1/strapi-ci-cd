{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/EditPage.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Button, Flex, Main } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { Navigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport {\n  useGetRolePermissionLayoutQuery,\n  useGetRolePermissionsQuery,\n  useUpdateRoleMutation,\n  useUpdateRolePermissionsMutation,\n} from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\nimport { RoleForm } from './components/RoleForm';\n\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().optional(),\n});\n\n/**\n * TODO: be nice if we could just infer this from the schema\n */\ninterface EditRoleFormValues {\n  name: string;\n  description: string;\n}\n\nconst EditPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/roles/:id');\n  const id = match?.params.id;\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } =\n    useGetRolePermissionLayoutQuery({\n      /**\n       * Role here is a query param so if there's no role we pass an empty string\n       * which returns us a default layout.\n       */\n      role: id ?? '',\n    });\n\n  const {\n    roles,\n    isLoading: isRoleLoading,\n    refetch: refetchRole,\n  } = useAdminRoles(\n    { id },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const role = roles[0] ?? {};\n\n  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(\n    {\n      id: id!,\n    },\n    {\n      skip: !id,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [updateRole] = useUpdateRoleMutation();\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\n\n  if (!id) {\n    return <Navigate to=\"/settings/roles\" />;\n  }\n\n  const handleEditRoleSubmit = async (\n    data: EditRoleFormValues,\n    formik: FormikHelpers<EditRoleFormValues>\n  ) => {\n    try {\n      const { permissionsToSend, didUpdateConditions } =\n        permissionsRef.current?.getPermissions() ?? {};\n\n      const res = await updateRole({\n        id,\n        ...data,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          formik.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      if (role.code !== 'strapi-super-admin' && permissionsToSend) {\n        const updateRes = await updateRolePermissions({\n          id: res.data.id,\n          permissions: permissionsToSend,\n        });\n\n        if ('error' in updateRes) {\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(updateRes.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(updateRes.error),\n            });\n          }\n\n          return;\n        }\n\n        if (didUpdateConditions) {\n          trackUsage('didUpdateConditions');\n        }\n      }\n\n      permissionsRef.current?.setFormAfterSubmit();\n\n      await refetchRole();\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved' }),\n      });\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\n\n  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        enableReinitialize\n        initialValues={\n          {\n            name: role.name ?? '',\n            description: role.description ?? '',\n          } satisfies EditRoleFormValues\n        }\n        onSubmit={handleEditRoleSubmit}\n        validationSchema={EDIT_ROLE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <Layouts.Header\n              primaryAction={\n                <Flex gap={2}>\n                  <Button\n                    type=\"submit\"\n                    startIcon={<Check />}\n                    disabled={role.code === 'strapi-super-admin'}\n                    loading={isSubmitting}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                </Flex>\n              }\n              title={formatMessage({\n                id: 'Settings.roles.edit.title',\n                defaultMessage: 'Edit a role',\n              })}\n              subtitle={formatMessage({\n                id: 'Settings.roles.create.description',\n                defaultMessage: 'Define the rights given to the role',\n              })}\n              navigationAction={<BackButton fallback=\"../roles\" />}\n            />\n            <Layouts.Content>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <RoleForm\n                  disabled={isFormDisabled}\n                  errors={errors}\n                  values={values}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  role={role}\n                />\n                <Box shadow=\"filterShadow\" hasRadius>\n                  <Permissions\n                    isFormDisabled={isFormDisabled}\n                    permissions={permissions}\n                    ref={permissionsRef}\n                    layout={permissionsLayout}\n                  />\n                </Box>\n              </Flex>\n            </Layouts.Content>\n          </form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.roles.update\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { EditPage, ProtectedEditPage };\nexport type { EditRoleFormValues };\n", "import {\n  Box,\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { FormikProps } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\nimport type { EditRoleFormValues } from '../EditPage';\n\ninterface RoleFormProps extends Pick<FormikProps<EditRoleFormValues>, 'values' | 'errors'> {\n  onBlur: FormikProps<EditRoleFormValues>['handleBlur'];\n  onChange: FormikProps<EditRoleFormValues>['handleChange'];\n  disabled?: boolean;\n  role: AdminRole;\n}\n\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex justifyContent=\"space-between\">\n          <Box>\n            <Box>\n              <Typography fontWeight=\"bold\">\n                {role\n                  ? role.name\n                  : formatMessage({\n                      id: 'global.details',\n                      defaultMessage: 'Details',\n                    })}\n              </Typography>\n            </Box>\n            <Box>\n              <Typography textColor=\"neutral500\" variant=\"pi\">\n                {role\n                  ? role.description\n                  : formatMessage({\n                      id: 'Settings.roles.form.description',\n                      defaultMessage: 'Name and description of the role',\n                    })}\n              </Typography>\n            </Box>\n          </Box>\n          <Button disabled variant=\"secondary\">\n            {formatMessage(\n              {\n                id: 'Settings.roles.form.button.users-with-role',\n                defaultMessage:\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n              },\n              { number: role.usersCount }\n            )}\n          </Button>\n        </Flex>\n        <Grid.Root gap={4}>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"name\"\n              error={errors.name && formatMessage({ id: errors.name })}\n              required\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.name',\n                  defaultMessage: 'Name',\n                })}\n              </Field.Label>\n              <TextInput\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.name || ''}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"description\"\n              error={errors.description && formatMessage({ id: errors.description })}\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.description',\n                  defaultMessage: 'Description',\n                })}\n              </Field.Label>\n              <Textarea\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.description}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { RoleForm };\nexport type { RoleFormProps };\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "create"]
}
