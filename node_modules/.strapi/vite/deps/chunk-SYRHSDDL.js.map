{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/content-manager.ts", "../../../../../packages/core/content-manager/admin/src/history/components/HistoryAction.tsx", "../../../../../packages/core/content-manager/admin/src/history/index.ts", "../../../../../packages/core/content-manager/admin/src/modules/reducers.ts", "../../../../../packages/core/content-manager/admin/src/preview/components/PreviewSidePanel.tsx", "../../../../../packages/core/content-manager/admin/src/preview/index.ts", "../../../../../packages/core/content-manager/admin/src/index.ts"],
  "sourcesContent": ["/* eslint-disable check-file/filename-naming-convention */\nimport { INJECTION_ZONES } from './components/InjectionZone';\nimport { PLUGIN_ID } from './constants/plugin';\nimport {\n  DEFAULT_ACTIONS,\n  type DocumentActionPosition,\n  type DocumentActionDescription,\n} from './pages/EditView/components/DocumentActions';\nimport {\n  DEFAULT_HEADER_ACTIONS,\n  type HeaderActionDescription,\n} from './pages/EditView/components/Header';\nimport { ActionsPanel, type PanelDescription } from './pages/EditView/components/Panels';\nimport {\n  DEFAULT_BULK_ACTIONS,\n  type BulkActionDescription,\n} from './pages/ListView/components/BulkActions/Actions';\nimport { DEFAULT_TABLE_ROW_ACTIONS } from './pages/ListView/components/TableActions';\n\nimport type { Document } from './hooks/useDocument';\nimport type { DocumentMetadata } from '../../shared/contracts/collection-types';\nimport type { DescriptionComponent, PluginConfig } from '@strapi/admin/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Types\n * -----------------------------------------------------------------------------------------------*/\n\ntype DescriptionReducer<Config extends object> = (prev: Config[]) => Config[];\n\ninterface EditViewContext {\n  /**\n   * This will ONLY be null, if the content-type\n   * does not have draft & published enabled.\n   */\n  activeTab: 'draft' | 'published' | null;\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  document?: Document;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  documentId?: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  meta?: DocumentMetadata;\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface ListViewContext {\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * The current selected documents in the table\n   */\n  documents: Document[];\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface PanelComponentProps extends EditViewContext {}\n\ninterface PanelComponent extends DescriptionComponent<PanelComponentProps, PanelDescription> {\n  /**\n   * The defaults are added by Strapi only, if you're providing your own component,\n   * you do not need to provide this.\n   */\n  type?: 'actions' | 'releases';\n}\n\ninterface DocumentActionProps extends EditViewContext {}\n\ninterface DocumentActionComponent\n  extends DescriptionComponent<DocumentActionProps, DocumentActionDescription> {\n  type?:\n    | 'clone'\n    | 'configure-the-view'\n    | 'delete'\n    | 'discard'\n    | 'edit'\n    | 'edit-the-model'\n    | 'history'\n    | 'publish'\n    | 'unpublish'\n    | 'update';\n  position?: DocumentActionDescription['position'];\n}\n\ninterface HeaderActionProps extends EditViewContext {}\n\ninterface HeaderActionComponent\n  extends DescriptionComponent<HeaderActionProps, HeaderActionDescription> {}\n\ninterface BulkActionComponentProps extends ListViewContext {}\n\ninterface BulkActionComponent\n  extends DescriptionComponent<BulkActionComponentProps, BulkActionDescription> {\n  type?: 'delete' | 'publish' | 'unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ContentManager plugin\n * -----------------------------------------------------------------------------------------------*/\n\nclass ContentManagerPlugin {\n  /**\n   * The following properties are the stored ones provided by any plugins registering with\n   * the content-manager. The function calls however, need to be called at runtime in the\n   * application, so instead we collate them and run them later with the complete list incl.\n   * ones already registered & the context of the view.\n   */\n  bulkActions: BulkActionComponent[] = [...DEFAULT_BULK_ACTIONS];\n  documentActions: DocumentActionComponent[] = [\n    ...DEFAULT_ACTIONS,\n    ...DEFAULT_TABLE_ROW_ACTIONS,\n    ...DEFAULT_HEADER_ACTIONS,\n  ];\n  editViewSidePanels: PanelComponent[] = [ActionsPanel];\n  headerActions: HeaderActionComponent[] = [];\n\n  constructor() {}\n\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent>): void;\n  addEditViewSidePanel(panels: PanelComponent[]): void;\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[]) {\n    if (Array.isArray(panels)) {\n      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];\n    } else if (typeof panels === 'function') {\n      this.editViewSidePanels = panels(this.editViewSidePanels);\n    } else {\n      throw new Error(\n        `Expected the \\`panels\\` passed to \\`addEditViewSidePanel\\` to be an array or a function, but received ${getPrintableType(\n          panels\n        )}`\n      );\n    }\n  }\n\n  addDocumentAction(actions: DescriptionReducer<DocumentActionComponent>): void;\n  addDocumentAction(actions: DocumentActionComponent[]): void;\n  addDocumentAction(\n    actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.documentActions = [...this.documentActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.documentActions = actions(this.documentActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent>): void;\n  addDocumentHeaderAction(actions: HeaderActionComponent[]): void;\n  addDocumentHeaderAction(\n    actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.headerActions = [...this.headerActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.headerActions = actions(this.headerActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentHeaderAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent>): void;\n  addBulkAction(actions: BulkActionComponent[]): void;\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[]) {\n    if (Array.isArray(actions)) {\n      this.bulkActions = [...this.bulkActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.bulkActions = actions(this.bulkActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addBulkAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  get config() {\n    return {\n      id: PLUGIN_ID,\n      name: 'Content Manager',\n      injectionZones: INJECTION_ZONES,\n      apis: {\n        addBulkAction: this.addBulkAction.bind(this),\n        addDocumentAction: this.addDocumentAction.bind(this),\n        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),\n        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),\n        getBulkActions: () => this.bulkActions,\n        getDocumentActions: (position?: DocumentActionPosition) => {\n          /**\n           * When possible, pre-filter the actions by the components static position property.\n           * This avoids rendering the actions in multiple places where they weren't displayed,\n           * which wasn't visible but created issues with useEffect for instance.\n           * The response should still be filtered by the position, as the static property is new\n           * and not mandatory to avoid a breaking change.\n           */\n          if (position) {\n            return this.documentActions.filter((action) => {\n              return action.position == undefined || [action.position].flat().includes(position);\n            });\n          }\n\n          return this.documentActions;\n        },\n        getEditViewSidePanels: () => this.editViewSidePanels,\n        getHeaderActions: () => this.headerActions,\n      },\n    } satisfies PluginConfig;\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * getPrintableType\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Gets the human-friendly printable type name for the given value, for instance it will yield\n * `array` instead of `object`, as the native `typeof` operator would do.\n */\nconst getPrintableType = (value: unknown): string => {\n  const nativeType = typeof value;\n\n  if (nativeType === 'object') {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    if (value instanceof Object && value.constructor.name !== 'Object') {\n      return value.constructor.name;\n    }\n  }\n\n  return nativeType;\n};\n\nexport { ContentManagerPlugin };\nexport type {\n  EditViewContext,\n  ListViewContext,\n  BulkActionComponent,\n  BulkActionComponentProps,\n  BulkActionDescription,\n  DescriptionComponent,\n  DescriptionReducer,\n  PanelComponentProps,\n  PanelComponent,\n  PanelDescription,\n  DocumentActionComponent,\n  DocumentActionDescription,\n  DocumentActionProps,\n  HeaderActionComponent,\n  HeaderActionDescription,\n  HeaderActionProps,\n};\n", "import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\nimport { ClockCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport type { DocumentActionComponent } from '../../content-manager';\n\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\n\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\n    return null;\n  }\n\n  const handleOnClick = () => {\n    const destination = { pathname: 'history', search: pluginsQueryParams };\n    trackUsage('willNavigate', {\n      from: pathname,\n      to: `${pathname}/${destination.pathname}`,\n    });\n    navigate(destination);\n  };\n\n  return {\n    icon: <ClockCounterClockwise />,\n    label: formatMessage({\n      id: 'content-manager.history.document-action',\n      defaultMessage: 'Content History',\n    }),\n    onClick: handleOnClick,\n    disabled:\n      /**\n       * The user is creating a new document.\n       * It hasn't been saved yet, so there's no history to go to\n       */\n      !document ||\n      /**\n       * The document has been created but the current dimension has never been saved.\n       * For example, the user is creating a new locale in an existing document,\n       * so there's no history for the document in that locale\n       */\n      !document.id ||\n      /**\n       * History is only available for content types created by the user.\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\n       * which start with `admin::` or `plugin::`\n       */\n      !model.startsWith('api::'),\n    position: 'header',\n  };\n};\n\nHistoryAction.type = 'history';\nHistoryAction.position = 'header';\n\nexport { HistoryAction };\n", "/* eslint-disable check-file/no-index */\n\nimport { type ContentManagerPlugin } from '../content-manager';\n\nimport { HistoryAction } from './components/HistoryAction';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst historyAdmin: Partial<Plugin.Config.AdminInput> = {\n  bootstrap(app: StrapiApp) {\n    const { addDocumentAction } = app.getPlugin('content-manager').apis as {\n      addDocumentAction: ContentManagerPlugin['addDocumentAction'];\n    };\n\n    /**\n     * Register the document action here using the public API, and not by setting the action in the\n     * Content Manager directly, because this API lets us control the order of the actions array.\n     * We want history to be the last non-delete action in the array.\n     */\n    addDocumentAction((actions) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, HistoryAction);\n      return actions;\n    });\n  },\n};\n\nexport { historyAdmin };\n", "import { combineReducers } from '@reduxjs/toolkit';\n\nimport { reducer as appReducer } from './app';\n\nconst reducer = combineReducers({\n  app: appReducer,\n});\n\ntype State = ReturnType<typeof reducer>;\n\nexport { reducer };\nexport type { State };\n", "import * as React from 'react';\n\nimport { useQueryParams, useTracking, useForm } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Tooltip, type TooltipProps } from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\ninterface ConditionalTooltipProps {\n  isShown: boolean;\n  label: TooltipProps['label'];\n  children: React.ReactNode;\n}\n\nconst ConditionalTooltip = ({ isShown, label, children }: ConditionalTooltipProps) => {\n  if (isShown) {\n    return <Tooltip label={label}>{children}</Tooltip>;\n  }\n\n  return children;\n};\n\nconst PreviewSidePanel: PanelComponent = ({ model, documentId, document }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const isModified = useForm('PreviewSidePanel', (state) => state.modified);\n  const isUnsaved = Boolean(!document || !document.id);\n\n  const title = formatMessage({\n    id: 'content-manager.preview.panel.title',\n    defaultMessage: 'Preview',\n  });\n\n  /**\n   * The preview URL isn't used in this component, we just fetch it to know if preview is enabled\n   * for the content type. If it's not, the panel is not displayed. If it is, we display a link to\n   * /preview, and the URL will already be loaded in the RTK query cache.\n   */\n  const { data, error } = useGetPreviewUrlQuery(\n    {\n      params: {\n        contentType: model as UID.ContentType,\n      },\n      query: {\n        documentId,\n        locale: document?.locale,\n        status: document?.status,\n      },\n    },\n    // Don't bother making the request since we won't show any UI\n    { skip: isUnsaved }\n  );\n\n  if (isUnsaved) {\n    return null;\n  }\n\n  // Preview was not configured but not disabled either (otherwise it would be a success 204).\n  // So we encourage the user to set it up.\n  if (error && error.name === 'NotFoundError') {\n    return {\n      title,\n      content: (\n        <Button\n          variant=\"tertiary\"\n          tag={Link}\n          to=\"https://docs.strapi.io/cms/features/preview\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          width=\"100%\"\n        >\n          {formatMessage({\n            id: 'content-manager.preview.panel.button-configuration',\n            defaultMessage: 'Set up preview',\n          })}\n        </Button>\n      ),\n    };\n  }\n\n  if (!data?.data?.url || error) {\n    return null;\n  }\n\n  const trackNavigation = () => {\n    // Append /preview to the current URL\n    const destinationPathname = pathname.replace(/\\/$/, '') + '/preview';\n    trackUsage('willNavigate', { from: pathname, to: destinationPathname });\n  };\n\n  return {\n    title,\n    content: (\n      <ConditionalTooltip\n        label={formatMessage({\n          id: 'content-manager.preview.panel.button-disabled-tooltip',\n          defaultMessage: 'Please save to open the preview',\n        })}\n        isShown={isModified}\n      >\n        <Box cursor=\"not-allowed\" width=\"100%\">\n          <Button\n            variant=\"tertiary\"\n            tag={Link}\n            to={{ pathname: 'preview', search: stringify(query, { encode: false }) }}\n            onClick={trackNavigation}\n            width=\"100%\"\n            disabled={isModified}\n            pointerEvents={isModified ? 'none' : undefined}\n            tabIndex={isModified ? -1 : undefined}\n          >\n            {formatMessage({\n              id: 'content-manager.preview.panel.button',\n              defaultMessage: 'Open preview',\n            })}\n          </Button>\n        </Box>\n      </ConditionalTooltip>\n    ),\n  };\n};\n\nexport { PreviewSidePanel };\n", "/* eslint-disable check-file/no-index */\n\nimport { PreviewSidePanel } from './components/PreviewSidePanel';\n\nimport type { ContentManagerPlugin } from '../content-manager';\nimport type { PluginDefinition } from '@strapi/admin/strapi-admin';\n\nconst previewAdmin: Partial<PluginDefinition> = {\n  bootstrap(app) {\n    const contentManagerPluginApis = app.getPlugin('content-manager')\n      .apis as ContentManagerPlugin['config']['apis'];\n\n    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);\n  },\n};\n\nexport { previewAdmin };\n", "import { CheckCircle, Feather, Pencil, PuzzlePiece } from '@strapi/icons';\n\nimport { PLUGIN_ID } from './constants/plugin';\nimport { ContentManagerPlugin } from './content-manager';\nimport { historyAdmin } from './history';\nimport { reducer } from './modules/reducers';\nimport { previewAdmin } from './preview';\nimport { routes } from './router';\nimport { prefixPluginTranslations } from './utils/translations';\n\nimport type { WidgetArgs } from '@strapi/admin/strapi-admin';\n\n// NOTE: we have to preload it to ensure chunks will have it available as global\nimport 'prismjs';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const cm = new ContentManagerPlugin();\n\n    app.addReducers({\n      [PLUGIN_ID]: reducer,\n    });\n\n    app.addMenuLink({\n      to: PLUGIN_ID,\n      icon: Feather,\n      intlLabel: {\n        id: `content-manager.plugin.name`,\n        defaultMessage: 'Content Manager',\n      },\n      permissions: [],\n      position: 1,\n    });\n\n    app.router.addRoute({\n      path: 'content-manager/*',\n      lazy: async () => {\n        const { Layout } = await import('./layout');\n\n        return {\n          Component: Layout,\n        };\n      },\n      children: routes,\n    });\n\n    app.registerPlugin(cm.config);\n\n    app.widgets.register((widgets: WidgetArgs[]) => {\n      const lastEditedWidget: WidgetArgs = {\n        icon: Pencil,\n        title: {\n          id: `${PLUGIN_ID}.widget.last-edited.title`,\n          defaultMessage: 'Last edited entries',\n        },\n        component: async () => {\n          const { LastEditedWidget } = await import('./components/Widgets');\n          return LastEditedWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'last-edited-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n      const lastPublishedWidget: WidgetArgs = {\n        icon: CheckCircle,\n        title: {\n          id: `${PLUGIN_ID}.widget.last-published.title`,\n          defaultMessage: 'Last published entries',\n        },\n        component: async () => {\n          const { LastPublishedWidget } = await import('./components/Widgets');\n          return LastPublishedWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'last-published-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n      const entriesWidget: WidgetArgs = {\n        icon: PuzzlePiece,\n        title: {\n          id: `${PLUGIN_ID}.widget.chart-entries.title`,\n          defaultMessage: 'Entries',\n        },\n        component: async () => {\n          const { ChartEntriesWidget } = await import('./components/Widgets');\n          return ChartEntriesWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'chart-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n\n      const profileInfoIndex = widgets.findIndex(\n        (widget) => widget.id === 'profile-info' && widget.pluginId === 'admin'\n      );\n\n      // Insert chart-entries after the profile-info widget\n      if (profileInfoIndex !== -1) {\n        const newWidgets: WidgetArgs[] = [...widgets];\n        newWidgets.splice(profileInfoIndex + 1, 0, entriesWidget);\n        return [lastEditedWidget, lastPublishedWidget, ...newWidgets];\n      }\n\n      // Fallback: add to the end if the target widget aren't found\n      return [lastEditedWidget, lastPublishedWidget, ...widgets, entriesWidget];\n    });\n  },\n  bootstrap(app: any) {\n    if (typeof historyAdmin.bootstrap === 'function') {\n      historyAdmin.bootstrap(app);\n    }\n    if (typeof previewAdmin.bootstrap === 'function') {\n      previewAdmin.bootstrap(app);\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\nexport * from './exports';\n"],
  "mappings": "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",
  "names": ["reducer", "import_qs", "import_jsx_runtime", "reducer"]
}
