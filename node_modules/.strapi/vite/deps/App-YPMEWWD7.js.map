{
  "version": 3,
  "sources": ["../../../../../packages/core/content-releases/admin/src/pages/ReleaseDetailsPage.tsx", "../../../../../packages/core/content-releases/admin/src/components/EntryValidationPopover.tsx", "../../../../../packages/core/content-releases/admin/src/store/hooks.ts", "../../../../../packages/core/content-releases/admin/src/utils/api.ts", "../../../../../packages/core/content-releases/admin/src/pages/App.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  Menu,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error â€“ TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <Menu.Item\n                  disabled={!canUpdate}\n                  onSelect={toggleEditReleaseModal}\n                  startIcon={<Pencil />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                </Menu.Item>\n                <Menu.Item\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  variant=\"danger\"\n                  startIcon={<Trash />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Menu.Item>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n", "import * as React from 'react';\n\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl, MessageDescriptor } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionEntry,\n  Stage,\n} from '../../../shared/contracts/release-actions';\nimport type { Struct } from '@strapi/types';\n\nconst StyledPopoverFlex = styled(Flex)`\n  width: 100%;\n  max-width: 256px;\n\n  & > * {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n\n  & > *:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ButtonContent = styled(Flex)`\n  svg {\n    fill: currentColor;\n  }\n`;\n\nconst CustomStatusButton = ({\n  children,\n  icon,\n  color,\n}: {\n  icon: React.ReactElement;\n  color: string;\n} & React.PropsWithChildren) => {\n  return (\n    <Popover.Trigger>\n      <Button variant=\"ghost\" endIcon={<CaretDown />}>\n        <ButtonContent color={color} gap={2}>\n          {icon}\n          <Typography textColor={color} variant=\"omega\" fontWeight=\"bold\">\n            {children}\n          </Typography>\n        </ButtonContent>\n      </Button>\n    </Popover.Trigger>\n  );\n};\n\ninterface EntryValidationPopoverProps {\n  action: ReleaseAction['type'];\n  schema?: Struct.ContentTypeSchema & {\n    hasReviewWorkflow: boolean;\n    stageRequiredToPublish?: Stage;\n  };\n  entry: ReleaseActionEntry;\n  status: ReleaseAction['status'];\n}\n\ninterface ValidationStatusProps {\n  action: ReleaseAction['type'];\n  status: ReleaseAction['status'];\n  hasErrors: boolean | null;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}\n\nconst EntryStatusTrigger = ({\n  action,\n  status,\n  hasErrors,\n  requiredStage,\n  entryStage,\n}: ValidationStatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (action === 'publish') {\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\n      return (\n        <CustomStatusButton icon={<CrossCircle />} color=\"danger600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\n            defaultMessage: 'Not ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'draft') {\n      return (\n        <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'modified') {\n      return (\n        <CustomStatusButton icon={<ArrowsCounterClockwise />} color=\"alternative600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\n          defaultMessage: 'Already published',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\n          defaultMessage: 'Ready to unpublish',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  return (\n    <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n      {formatMessage({\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\n        defaultMessage: 'Already unpublished',\n      })}\n    </CustomStatusButton>\n  );\n};\n\ninterface FieldsValidationProps {\n  hasErrors: boolean;\n  errors: FormErrors<FormValues> | null;\n  kind?: string;\n  contentTypeUid?: string;\n  documentId?: string;\n  locale?: string;\n}\n\nconst FieldsValidation = ({\n  hasErrors,\n  errors,\n  kind,\n  contentTypeUid,\n  documentId,\n  locale,\n}: FieldsValidationProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\n            defaultMessage: 'Fields',\n          })}\n        </Typography>\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\n      </Flex>\n      <Typography width=\"100%\" textColor=\"neutral600\">\n        {hasErrors\n          ? formatMessage(\n              {\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\n                defaultMessage: '{errors} errors on fields.',\n              },\n              { errors: errors ? Object.keys(errors).length : 0 }\n            )\n          : formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\n              defaultMessage: 'All fields are filled correctly.',\n            })}\n      </Typography>\n      {hasErrors && (\n        <LinkButton\n          tag={Link}\n          to={{\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\n            search: locale\n              ? stringify({\n                  plugins: {\n                    i18n: {\n                      locale,\n                    },\n                  },\n                })\n              : '',\n          }}\n          variant=\"secondary\"\n          fullWidth\n          state={{ forceValidation: true }}\n        >\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\n            defaultMessage: 'See errors',\n          })}\n        </LinkButton>\n      )}\n    </Flex>\n  );\n};\n\nconst getReviewStageIcon = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return <CheckCircle fill=\"neutral200\" />;\n  }\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return <CrossCircle fill=\"danger600\" />;\n  }\n  return <CheckCircle fill=\"success600\" />;\n};\n\nconst getReviewStageMessage = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n  formatMessage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return formatMessage({\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\n      defaultMessage: 'This entry is not associated to any workflow.',\n    });\n  }\n\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  if (requiredStage && requiredStage.id === entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  return formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\n    defaultMessage: 'No required stage for publication',\n  });\n};\n\nconst ReviewStageValidation = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const Icon = getReviewStageIcon({\n    contentTypeHasReviewWorkflow,\n    requiredStage,\n    entryStage,\n  });\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\n            defaultMessage: 'Review stage',\n          })}\n        </Typography>\n        {Icon}\n      </Flex>\n      <Typography textColor=\"neutral600\">\n        {getReviewStageMessage({\n          contentTypeHasReviewWorkflow,\n          requiredStage,\n          entryStage,\n          formatMessage,\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\nexport const EntryValidationPopover = ({\n  schema,\n  entry,\n  status,\n  action,\n}: EntryValidationPopoverProps) => {\n  const { validate, isLoading } = unstable_useDocument(\n    {\n      collectionType: schema?.kind ?? '',\n      model: schema?.uid ?? '',\n    },\n    {\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\n      skip: true,\n    }\n  );\n\n  // Validation errors\n  const errors = isLoading ? null : validate(entry);\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\n\n  // Entry stage\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\n  const requiredStage = schema?.stageRequiredToPublish;\n  const entryStage = entry.strapi_stage;\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popover.Root>\n      <EntryStatusTrigger\n        action={action}\n        status={status}\n        hasErrors={hasErrors}\n        requiredStage={requiredStage}\n        entryStage={entryStage}\n      />\n      <Popover.Content>\n        <StyledPopoverFlex direction=\"column\">\n          <FieldsValidation\n            hasErrors={hasErrors}\n            errors={errors}\n            contentTypeUid={schema?.uid}\n            kind={schema?.kind}\n            documentId={entry.documentId}\n            locale={entry.locale}\n          />\n          <ReviewStageValidation\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\n            requiredStage={requiredStage}\n            entryStage={entryStage}\n          />\n        </StyledPopoverFlex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n", "import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { Store } from '@strapi/admin/strapi-admin';\n\ntype RootState = ReturnType<Store['getState']>;\n\nconst useTypedDispatch: () => Dispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError } from '@strapi/admin/strapi-admin';\n\ntype BaseQueryError = ApiError | SerializedError;\n\nconst isBaseQueryError = (error?: BaseQueryError): error is BaseQueryError => {\n  return typeof error !== 'undefined' && error.name !== undefined;\n};\n\nexport { isBaseQueryError };\nexport type { BaseQueryError };\n", "import { Page } from '@strapi/admin/strapi-admin';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../constants';\n\nimport { ReleaseDetailsPage } from './ReleaseDetailsPage';\nimport { ReleasesPage } from './ReleasesPage';\n\nexport const App = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.main}>\n      <Routes>\n        <Route index element={<ReleasesPage />} />\n        <Route path={':releaseId'} element={<ReleaseDetailsPage />} />\n      </Routes>\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "totalEntries", "import_jsx_runtime"]
}
