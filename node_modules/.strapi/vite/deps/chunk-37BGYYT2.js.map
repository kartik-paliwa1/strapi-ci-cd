{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useOnce.ts", "../../../../../packages/core/admin/admin/src/pages/Settings/components/Tokens/Table.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport const useOnce = (effect: React.EffectCallback) => React.useEffect(effect, emptyDeps);\n\nconst emptyDeps: React.DependencyList = [];\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Typography,\n  useCollator,\n  Dialog,\n  LinkButton,\n} from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { tours } from '../../../../components/GuidedTour/Tours';\nimport { RelativeTime } from '../../../../components/RelativeTime';\nimport { Table as TableImpl } from '../../../../components/Table';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\n\nimport type { Data } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableProps\n  extends Pick<TableImpl.Props<SanitizedTransferToken | ApiToken>, 'headers' | 'isLoading'> {\n  onConfirmDelete: (id: Data.ID) => void;\n  permissions: {\n    canRead: boolean;\n    canDelete: boolean;\n    canUpdate: boolean;\n  };\n  tokens: SanitizedTransferToken[] | ApiToken[];\n  tokenType: 'api-token' | 'transfer-token';\n}\n\nconst Table = ({\n  permissions,\n  headers = [],\n  isLoading = false,\n  tokens = [],\n  onConfirmDelete,\n  tokenType,\n}: TableProps) => {\n  const [{ query }] = useQueryParams<{ sort?: string }>();\n  const { formatMessage, locale } = useIntl();\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const formatter = useCollator(locale);\n\n  const sortedTokens = [...tokens].sort((a, b) => {\n    return sortOrder === 'DESC'\n      ? formatter.compare(b.name, a.name)\n      : formatter.compare(a.name, b.name);\n  });\n\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  const handleRowClick = (id: Data.ID) => () => {\n    if (canRead) {\n      trackUsage('willEditTokenFromList', {\n        tokenType,\n      });\n      navigate(id.toString());\n    }\n  };\n\n  return (\n    <TableImpl.Root headers={headers} rows={sortedTokens} isLoading={isLoading}>\n      <TableImpl.Content>\n        <TableImpl.Head>\n          {headers.map((header) => (\n            <TableImpl.HeaderCell key={header.name} {...header} />\n          ))}\n        </TableImpl.Head>\n        <TableImpl.Empty />\n        <TableImpl.Loading />\n        <TableImpl.Body>\n          {sortedTokens.map((token) => {\n            const GuidedTourTooltip =\n              token.name === 'Read Only' ? tours.apiTokens.ManageAPIToken : React.Fragment;\n            return (\n              <TableImpl.Row key={token.id} onClick={handleRowClick(token.id)}>\n                <TableImpl.Cell maxWidth=\"25rem\">\n                  <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\n                    {token.name}\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell maxWidth=\"25rem\">\n                  <Typography textColor=\"neutral800\" ellipsis>\n                    {token.description}\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell>\n                  <Typography textColor=\"neutral800\">\n                    {/* @ts-expect-error One of the tokens doesn't have createdAt */}\n                    <RelativeTime timestamp={new Date(token.createdAt)} />\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell>\n                  {token.lastUsedAt && (\n                    <Typography textColor=\"neutral800\">\n                      <RelativeTime\n                        timestamp={new Date(token.lastUsedAt)}\n                        customIntervals={[\n                          {\n                            unit: 'hours',\n                            threshold: 1,\n                            text: formatMessage({\n                              id: 'Settings.apiTokens.lastHour',\n                              defaultMessage: 'last hour',\n                            }),\n                          },\n                        ]}\n                      />\n                    </Typography>\n                  )}\n                </TableImpl.Cell>\n                {canUpdate || canRead || canDelete ? (\n                  <TableImpl.Cell>\n                    <Flex justifyContent=\"end\">\n                      <GuidedTourTooltip>\n                        {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\n                      </GuidedTourTooltip>\n                      {canDelete && (\n                        <DeleteButton\n                          tokenName={token.name}\n                          onClickDelete={() => onConfirmDelete?.(token.id)}\n                          tokenType={tokenType}\n                        />\n                      )}\n                    </Flex>\n                  </TableImpl.Cell>\n                ) : null}\n              </TableImpl.Row>\n            );\n          })}\n        </TableImpl.Body>\n      </TableImpl.Content>\n    </TableImpl.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CRUD Buttons\n * -----------------------------------------------------------------------------------------------*/\n\nconst MESSAGES_MAP = {\n  edit: {\n    id: 'app.component.table.edit',\n    defaultMessage: 'Edit {target}',\n  },\n  read: {\n    id: 'app.component.table.read',\n    defaultMessage: 'Read {target}',\n  },\n};\n\ninterface DefaultButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n  buttonType?: 'edit' | 'read';\n  children: React.ReactNode;\n}\n\nconst DefaultButton = ({\n  tokenName,\n  tokenId,\n  buttonType = 'edit',\n  children,\n}: DefaultButtonProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LinkButtonStyled\n      tag={NavLink}\n      to={tokenId.toString()}\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\n      variant=\"ghost\"\n      size=\"S\"\n    >\n      {children}\n    </LinkButtonStyled>\n  );\n};\n\nconst LinkButtonStyled = styled(LinkButton)`\n  padding: 0.7rem;\n\n  & > span {\n    display: flex;\n  }\n`;\n\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\n  onClickDelete: () => void;\n}\n\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const handleClickDelete = () => {\n    trackUsage('willDeleteToken', {\n      tokenType,\n    });\n    onClickDelete();\n  };\n\n  return (\n    <Dialog.Root>\n      <Box<'div'> paddingLeft={1} onClick={(e) => e.stopPropagation()}>\n        <Dialog.Trigger>\n          <IconButton\n            label={formatMessage(\n              {\n                id: 'global.delete-target',\n                defaultMessage: 'Delete {target}',\n              },\n              { target: `${tokenName}` }\n            )}\n            name=\"delete\"\n            variant=\"ghost\"\n          >\n            <Trash />\n          </IconButton>\n        </Dialog.Trigger>\n        <ConfirmDialog onConfirm={handleClickDelete} />\n      </Box>\n    </Dialog.Root>\n  );\n};\n\ninterface ButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n}\n\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\n      <Pencil />\n    </DefaultButton>\n  );\n};\n\nexport { Table };\nexport type { TableProps };\n"],
  "mappings": "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",
  "names": ["React", "Table"]
}
