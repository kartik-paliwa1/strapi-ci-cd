import {
  reviewWorkflowsApi
} from "./chunk-Q3Z4QNPF.js";
import {
  useAPIErrorHandler
} from "./chunk-GH6VCESI.js";
import {
  useNotification
} from "./chunk-5BKV6XT7.js";
import {
  Box,
  Flex,
  IconButton,
  LinkButton,
  Modal,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import {
  ForwardRef$4d
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/review-workflows/admin/src/components/LimitsModal.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
import balloonImageSrc from "/Users/kartikpaliwal/Downloads/strapi-develop/packages/core/review-workflows/admin/src/assets/balloon.png";
var CTA_LEARN_MORE_HREF = "https://strapi.io/pricing-cloud";
var CTA_SALES_HREF = "https://strapi.io/contact-sales";
var Title = ({ children }) => {
  return (0, import_jsx_runtime.jsx)(Modal.Title, { variant: "alpha", children });
};
var Body = ({ children }) => {
  return (0, import_jsx_runtime.jsx)(Typography, { variant: "omega", children });
};
var CallToActions = () => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, { gap: 2, paddingTop: 4, children: [
    (0, import_jsx_runtime.jsx)(LinkButton, { variant: "default", isExternal: true, href: CTA_LEARN_MORE_HREF, children: formatMessage({
      id: "Settings.review-workflows.limit.cta.learn",
      defaultMessage: "Learn more"
    }) }),
    (0, import_jsx_runtime.jsx)(LinkButton, { variant: "tertiary", isExternal: true, href: CTA_SALES_HREF, children: formatMessage({
      id: "Settings.review-workflows.limit.cta.sales",
      defaultMessage: "Contact Sales"
    }) })
  ] });
};
var BalloonImage = dt.img`
  // Margin top|right reverse the padding of ModalBody
  margin-right: ${({ theme }) => `-${theme.spaces[7]}`};
  margin-top: ${({ theme }) => `-${theme.spaces[7]}`};
  width: 360px;
`;
var Root = ({
  children,
  open = false,
  onOpenChange
}) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Modal.Root, { open, onOpenChange, children: (0, import_jsx_runtime.jsx)(Modal.Content, { children: (0, import_jsx_runtime.jsx)(Modal.Body, { children: (0, import_jsx_runtime.jsxs)(Flex, { gap: 2, paddingLeft: 7, position: "relative", children: [
    (0, import_jsx_runtime.jsxs)(Flex, { alignItems: "start", direction: "column", gap: 2, width: "60%", children: [
      children,
      (0, import_jsx_runtime.jsx)(CallToActions, {})
    ] }),
    (0, import_jsx_runtime.jsxs)(Flex, { justifyContent: "end", height: "100%", width: "40%", children: [
      (0, import_jsx_runtime.jsx)(BalloonImage, { src: balloonImageSrc, "aria-hidden": true, alt: "", loading: "lazy" }),
      (0, import_jsx_runtime.jsx)(Box, { display: "flex", position: "absolute", right: 0, top: 0, children: (0, import_jsx_runtime.jsx)(Modal.Close, { children: (0, import_jsx_runtime.jsx)(
        IconButton,
        {
          withTooltip: false,
          label: formatMessage({
            id: "global.close",
            defaultMessage: "Close"
          }),
          children: (0, import_jsx_runtime.jsx)(ForwardRef$4d, {})
        }
      ) }) })
    ] })
  ] }) }) }) });
};
var LimitsModal = {
  Title,
  Body,
  Root
};

// ../packages/core/review-workflows/admin/src/routes/settings/hooks/useReviewWorkflows.ts
var React = __toESM(require_react());

// ../packages/core/review-workflows/admin/src/services/settings.ts
var settingsApi = reviewWorkflowsApi.injectEndpoints({
  endpoints: (builder) => ({
    getWorkflows: builder.query({
      query: (args) => {
        return {
          url: "/review-workflows/workflows",
          method: "GET",
          config: {
            params: args ?? {}
          }
        };
      },
      transformResponse: (res) => {
        return {
          workflows: res.data,
          meta: "meta" in res ? res.meta : void 0
        };
      },
      providesTags: (res) => {
        return [
          ...(res == null ? void 0 : res.workflows.map(({ id }) => ({ type: "ReviewWorkflow", id }))) ?? [],
          { type: "ReviewWorkflow", id: "LIST" }
        ];
      }
    }),
    createWorkflow: builder.mutation({
      query: (data) => ({
        url: "/review-workflows/workflows",
        method: "POST",
        data
      }),
      transformResponse: (res) => res.data,
      invalidatesTags(res) {
        return [
          { type: "ReviewWorkflow", id: "LIST" },
          "ReviewWorkflowStages",
          { type: "Document", id: `ALL_LIST` },
          { type: "ContentTypeSettings", id: "LIST" },
          ...(res == null ? void 0 : res.contentTypes.map((uid) => ({
            type: "Document",
            id: `${uid}_ALL_ITEMS`
          }))) ?? []
        ];
      }
    }),
    updateWorkflow: builder.mutation({
      query: ({ id, ...data }) => ({
        url: `/review-workflows/workflows/${id}`,
        method: "PUT",
        data
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (res, _err, arg) => [
        { type: "ReviewWorkflow", id: arg.id },
        "ReviewWorkflowStages",
        { type: "Document", id: "ALL_LIST" },
        { type: "ContentTypeSettings", id: "LIST" },
        ...(res == null ? void 0 : res.contentTypes.map((uid) => ({
          type: "Document",
          id: `${uid}_ALL_ITEMS`
        }))) ?? []
      ]
    }),
    deleteWorkflow: builder.mutation({
      query: ({ id }) => ({
        url: `/review-workflows/workflows/${id}`,
        method: "DELETE"
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (res, _err, arg) => [
        { type: "ReviewWorkflow", id: arg.id },
        "ReviewWorkflowStages",
        { type: "Document", id: `ALL_LIST` },
        { type: "ContentTypeSettings", id: "LIST" }
      ]
    })
  }),
  overrideExisting: false
});
var {
  useGetWorkflowsQuery,
  useCreateWorkflowMutation,
  useDeleteWorkflowMutation,
  useUpdateWorkflowMutation
} = settingsApi;

// ../packages/core/review-workflows/admin/src/routes/settings/hooks/useReviewWorkflows.ts
var DEFAULT_UNEXPECTED_ERROR_MSG = {
  id: "notification.error",
  defaultMessage: "An error occurred, please try again"
};
var useReviewWorkflows = (params = {}) => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { skip = false, ...queryParams } = params;
  const { data, isLoading, error } = useGetWorkflowsQuery(
    {
      ...queryParams
    },
    {
      skip
    }
  );
  React.useEffect(() => {
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    }
  }, [error, formatAPIError, toggleNotification]);
  const [createWorkflow] = useCreateWorkflowMutation();
  const create = React.useCallback(
    async (data2) => {
      try {
        const res = await createWorkflow({ data: data2 });
        if ("error" in res) {
          toggleNotification({
            type: "danger",
            message: formatAPIError(res.error)
          });
          return res;
        }
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "actions.created", defaultMessage: "Created workflow" })
        });
        return res;
      } catch (err) {
        toggleNotification({
          type: "danger",
          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG)
        });
        throw err;
      }
    },
    [createWorkflow, formatAPIError, formatMessage, toggleNotification]
  );
  const [updateWorkflow] = useUpdateWorkflowMutation();
  const update = React.useCallback(
    async (id, data2) => {
      try {
        const res = await updateWorkflow({ id, data: data2 });
        if ("error" in res) {
          toggleNotification({
            type: "danger",
            message: formatAPIError(res.error)
          });
          return res;
        }
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "actions.updated", defaultMessage: "Updated workflow" })
        });
        return res;
      } catch (err) {
        toggleNotification({
          type: "danger",
          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG)
        });
        throw err;
      }
    },
    [formatAPIError, formatMessage, toggleNotification, updateWorkflow]
  );
  const [deleteWorkflow] = useDeleteWorkflowMutation();
  const deleteAction = React.useCallback(
    async (id) => {
      try {
        const res = await deleteWorkflow({ id });
        if ("error" in res) {
          toggleNotification({
            type: "danger",
            message: formatAPIError(res.error)
          });
          return;
        }
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "actions.deleted", defaultMessage: "Deleted workflow" })
        });
        return res.data;
      } catch (err) {
        toggleNotification({
          type: "danger",
          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG)
        });
        throw err;
      }
    },
    [deleteWorkflow, formatAPIError, formatMessage, toggleNotification]
  );
  const { workflows = [], meta } = data ?? {};
  return {
    // meta contains e.g. the total of all workflows. we can not use
    // the pagination object here, because the list is not paginated.
    meta,
    workflows,
    isLoading,
    error,
    create,
    delete: deleteAction,
    update
  };
};

export {
  LimitsModal,
  useReviewWorkflows
};
//# sourceMappingURL=chunk-3UQA472L.js.map
