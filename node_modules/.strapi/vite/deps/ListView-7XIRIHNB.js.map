{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/TransferTokens/ListView.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { EmptyStateLayout, LinkButton } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport * as qs from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useOnce } from '../../../../hooks/useOnce';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport {\n  useDeleteTransferTokenMutation,\n  useGetTransferTokensQuery,\n} from '../../../../services/transferTokens';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { Table } from '../../components/Tokens/Table';\n\nimport type { Data } from '@strapi/types';\n\nconst tableHeaders = [\n  {\n    name: 'name',\n    label: {\n      id: 'Settings.tokens.ListView.headers.name',\n      defaultMessage: 'Name',\n    },\n    sortable: true,\n  },\n  {\n    name: 'description',\n    label: {\n      id: 'Settings.tokens.ListView.headers.description',\n      defaultMessage: 'Description',\n    },\n    sortable: false,\n  },\n  {\n    name: 'createdAt',\n    label: {\n      id: 'Settings.tokens.ListView.headers.createdAt',\n      defaultMessage: 'Created at',\n    },\n    sortable: false,\n  },\n  {\n    name: 'lastUsedAt',\n    label: {\n      id: 'Settings.tokens.ListView.headers.lastUsedAt',\n      defaultMessage: 'Last used',\n    },\n    sortable: false,\n  },\n] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * ListView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\n  );\n  const {\n    isLoading: isLoadingRBAC,\n    allowedActions: { canCreate, canDelete, canUpdate, canRead },\n  } = useRBAC(permissions);\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    navigate({ search: qs.stringify({ sort: 'name:ASC' }, { encode: false }) });\n  }, [navigate]);\n\n  useOnce(() => {\n    trackUsage('willAccessTokenList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  });\n\n  const headers = tableHeaders.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const {\n    data: transferTokens = [],\n    isLoading: isLoadingTokens,\n    error,\n  } = useGetTransferTokensQuery(undefined, {\n    skip: !canRead,\n  });\n\n  React.useEffect(() => {\n    if (transferTokens) {\n      trackUsage('didAccessTokenList', {\n        number: transferTokens.length,\n        tokenType: TRANSFER_TOKEN_TYPE,\n      });\n    }\n  }, [trackUsage, transferTokens]);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const [deleteToken] = useDeleteTransferTokenMutation();\n\n  const handleDelete = async (id: Data.ID) => {\n    try {\n      const res = await deleteToken(id);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n      });\n    }\n  };\n\n  const isLoading = isLoadingTokens || isLoadingRBAC;\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Transfer Tokens',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'Settings.transferTokens.title',\n          defaultMessage: 'Transfer Tokens',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.transferTokens.description',\n          defaultMessage: '\"List of generated transfer tokens\"', // TODO change this message\n        })}\n        primaryAction={\n          canCreate ? (\n            <LinkButton\n              role=\"button\"\n              tag={Link}\n              data-testid=\"create-transfer-token-button\"\n              startIcon={<Plus />}\n              size=\"S\"\n              onClick={() =>\n                trackUsage('willAddTokenFromList', {\n                  tokenType: TRANSFER_TOKEN_TYPE,\n                })\n              }\n              to=\"/settings/transfer-tokens/create\"\n            >\n              {formatMessage({\n                id: 'Settings.transferTokens.create',\n                defaultMessage: 'Create new Transfer Token',\n              })}\n            </LinkButton>\n          ) : undefined\n        }\n      />\n      {!canRead ? (\n        <Page.NoPermissions />\n      ) : (\n        <Page.Main aria-busy={isLoading}>\n          <Layouts.Content>\n            {transferTokens.length > 0 && (\n              <Table\n                permissions={{ canRead, canDelete, canUpdate }}\n                headers={headers}\n                isLoading={isLoading}\n                onConfirmDelete={handleDelete}\n                tokens={transferTokens}\n                tokenType={TRANSFER_TOKEN_TYPE}\n              />\n            )}\n            {canCreate && transferTokens.length === 0 ? (\n              <EmptyStateLayout\n                action={\n                  <LinkButton\n                    tag={Link}\n                    variant=\"secondary\"\n                    startIcon={<Plus />}\n                    to=\"/settings/transfer-tokens/create\"\n                  >\n                    {formatMessage({\n                      id: 'Settings.transferTokens.addNewToken',\n                      defaultMessage: 'Add new Transfer Token',\n                    })}\n                  </LinkButton>\n                }\n                icon={<EmptyDocuments width=\"16rem\" />}\n                content={formatMessage({\n                  id: 'Settings.transferTokens.addFirstToken',\n                  defaultMessage: 'Add your first Transfer Token',\n                })}\n              />\n            ) : null}\n            {!canCreate && transferTokens.length === 0 ? (\n              <EmptyStateLayout\n                icon={<EmptyDocuments width=\"16rem\" />}\n                content={formatMessage({\n                  id: 'Settings.transferTokens.emptyStateLayout',\n                  defaultMessage: 'You donâ€™t have any content yet...',\n                })}\n              />\n            ) : null}\n          </Layouts.Content>\n        </Page.Main>\n      )}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].main\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListView />\n    </Page.Protect>\n  );\n};\n\nexport { ListView, ProtectedListView };\n"],
  "mappings": "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",
  "names": []
}
