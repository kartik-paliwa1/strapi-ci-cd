import {
  DocumentStatus,
  RelativeTime
} from "./chunk-BLF5M6NP.js";
import {
  contentManagerApi
} from "./chunk-7QVSMWPD.js";
import {
  useGetCountDocumentsQuery
} from "./chunk-4JEMFY4B.js";
import "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import {
  Widget
} from "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import "./chunk-GJKFT6EX.js";
import "./chunk-HP6PMHBS.js";
import "./chunk-QP5S5OPY.js";
import "./chunk-LVJ5LIPC.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import "./chunk-CLBB5XWA.js";
import {
  useTracking
} from "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import "./chunk-KYOQACZ3.js";
import "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import "./chunk-5BKV6XT7.js";
import "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Box,
  Flex,
  IconButton,
  Portal$1,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import {
  Link,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$1z
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/content-manager/admin/src/components/Widgets.tsx
var React = __toESM(require_react());

// ../packages/core/content-manager/admin/src/services/homepage.ts
var homepageService = contentManagerApi.enhanceEndpoints({
  addTagTypes: ["RecentDocumentList"]
}).injectEndpoints({
  /**
   * TODO: Remove overrideExisting when we remove the future flag
   * and delete the old homepage service in the admin
   */
  overrideExisting: true,
  endpoints: (builder) => ({
    getRecentDocuments: builder.query({
      query: (params) => `/content-manager/homepage/recent-documents?action=${params.action}`,
      transformResponse: (response) => response.data,
      providesTags: (res, _err, { action }) => [
        { type: "RecentDocumentList", id: action }
      ]
    })
  })
});
var { useGetRecentDocumentsQuery } = homepageService;

// ../packages/core/content-manager/admin/src/components/Widgets.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({
  documents,
  type
}) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome", {
      entryType: type
    });
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, { colCount: 5, rowCount: (documents == null ? void 0 : documents.length) ?? 0, children: (0, import_jsx_runtime.jsx)(Tbody, { children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, { onClick: handleRowClick(document), cursor: "pointer", children: [
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { title: document.title, variant: "omega", textColor: "neutral800", children: document.title }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { variant: "omega", textColor: "neutral600", children: document.kind === "singleType" ? formatMessage({
      id: "content-manager.widget.last-edited.single-type",
      defaultMessage: "Single-Type"
    }) : formatMessage({
      id: document.contentTypeDisplayName,
      defaultMessage: document.contentTypeDisplayName
    }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, { status: document.status }) : (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", "aria-hidden": true, children: "-" }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: (0, import_jsx_runtime.jsx)(RelativeTime, { timestamp: new Date(document.updatedAt) }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        tag: Link,
        to: getEditViewLink(document),
        onClick: () => trackUsage("willEditEntryFromHome", { type }),
        label: formatMessage({
          id: "content-manager.actions.edit.label",
          defaultMessage: "Edit"
        }),
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
      }
    ) }) })
  ] }, document.documentId)) }) });
};
var LastEditedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: "update" });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-manager.widget.last-edited.no-data",
      defaultMessage: "No edited entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, { documents: data, type: "edited" });
};
var LastPublishedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: "publish" });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-manager.widget.last-published.no-data",
      defaultMessage: "No published entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, { documents: data, type: "published" });
};
var RADIUS = 80;
var STROKE = 10;
var CIRCUMFERENCE = 2 * Math.PI * (RADIUS - STROKE / 2);
var ArcChart = dt.circle`
  stroke: ${({ theme, $arcColor }) => theme.colors[$arcColor]};
`;
var TextChart = dt.tspan`
  text-transform: lowercase;
  fill: ${({ theme, $textColor }) => theme.colors[$textColor]};
`;
var KeyChartItem = dt(Flex)`
  width: 100%;

  ${({ theme }) => theme.breakpoints.small} {
    width: auto;
  }
`;
var DonutChartSVG = ({ data }) => {
  const { locale } = useIntl();
  const { formatMessage } = useIntl();
  const total = data.reduce((acc, curr) => acc + curr.count, 0);
  const [tooltip, setTooltip] = React.useState({ visible: false, x: 0, y: 0, value: null });
  let cumulativePercent = 0;
  const handleMouseOver = (e, value) => {
    setTooltip({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      value
    });
  };
  const handleMouseOut = () => {
    setTooltip((t) => ({ ...t, visible: false }));
  };
  const handleFocus = (e, value) => {
    setTooltip({
      visible: true,
      x: e.currentTarget.getBoundingClientRect().width / 2 + e.currentTarget.getBoundingClientRect().left,
      y: e.currentTarget.getBoundingClientRect().height + e.currentTarget.getBoundingClientRect().top,
      value
    });
  };
  return (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", gap: 6, margin: "auto", children: [
    (0, import_jsx_runtime.jsxs)(
      "svg",
      {
        width: RADIUS * 2,
        height: RADIUS * 2,
        viewBox: `0 0 ${RADIUS * 2} ${RADIUS * 2}`,
        style: { position: "relative", zIndex: 1 },
        children: [
          (0, import_jsx_runtime.jsx)("g", { transform: `rotate(-90 ${RADIUS} ${RADIUS})`, children: data.map((value) => {
            const percent = value.count / total * 100;
            const arcLength = percent / 100 * CIRCUMFERENCE;
            const dashArray = `${arcLength} ${CIRCUMFERENCE - arcLength}`;
            const dashOffset = CIRCUMFERENCE * (1 - cumulativePercent / 100);
            const el = (0, import_jsx_runtime.jsx)(
              ArcChart,
              {
                cx: RADIUS,
                cy: RADIUS,
                r: RADIUS - STROKE / 2,
                fill: "none",
                strokeWidth: STROKE,
                strokeDasharray: dashArray,
                strokeDashoffset: dashOffset,
                style: { transition: "stroke-dashoffset 0.3s", cursor: "pointer" },
                tabIndex: 0,
                "aria-describedby": tooltip.visible ? "chart-tooltip" : void 0,
                onFocus: (e) => handleFocus(e, value),
                onBlur: handleMouseOut,
                onMouseMove: (e) => handleMouseOver(e, value),
                onMouseLeave: handleMouseOut,
                $arcColor: value.color
              },
              value.label
            );
            cumulativePercent += percent;
            return el;
          }) }),
          (0, import_jsx_runtime.jsxs)("text", { x: RADIUS, y: RADIUS, textAnchor: "middle", fontSize: "2.4rem", fontWeight: "bold", children: [
            (0, import_jsx_runtime.jsx)(TextChart, { x: RADIUS, dy: "0", $textColor: "neutral800", children: new Intl.NumberFormat(locale, {
              notation: "compact",
              maximumFractionDigits: 1
            }).format(total) }),
            (0, import_jsx_runtime.jsx)(
              TextChart,
              {
                x: RADIUS,
                dy: "1.4em",
                fontSize: "1.4rem",
                fontWeight: "normal",
                $textColor: "neutral600",
                children: formatMessage(
                  {
                    id: "content-manager.widget.chart-entries.count.label",
                    defaultMessage: "{count, plural, =0 {entries} one {entry} other {entries}}"
                  },
                  { count: total }
                )
              }
            )
          ] })
        ]
      }
    ),
    tooltip.visible && tooltip.value && (0, import_jsx_runtime.jsx)(
      Portal$1,
      {
        style: {
          position: "fixed",
          left: 16,
          top: 16,
          zIndex: 2,
          transform: `translate(${tooltip.x}px, ${tooltip.y}px)`
        },
        "data-testid": "entries-chart-tooltip",
        children: (0, import_jsx_runtime.jsx)(
          Box,
          {
            background: "neutral900",
            padding: 2,
            borderRadius: 1,
            textAlign: "center",
            role: "tooltip",
            "aria-live": "polite",
            children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral0", children: formatMessage(
              {
                id: "content-manager.widget.chart-entries.tooltip",
                defaultMessage: "{count} items"
              },
              {
                count: tooltip.value.count,
                label: tooltip.value.label
              }
            ) })
          }
        )
      }
    ),
    (0, import_jsx_runtime.jsx)(Flex, { gap: 4, wrap: "wrap", children: data.map(
      (value) => value.count > 0 && (0, import_jsx_runtime.jsxs)(KeyChartItem, { gap: 1, children: [
        (0, import_jsx_runtime.jsx)(Box, { background: value.color, padding: 2, borderRadius: 1 }),
        (0, import_jsx_runtime.jsx)(Typography, { variant: "pi", children: value.label })
      ] }, value.label)
    ) })
  ] });
};
var ChartEntriesWidget = () => {
  const { formatMessage } = useIntl();
  const { data: countDocuments, isLoading, error } = useGetCountDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  const { draft, published, modified } = countDocuments ?? {
    draft: 0,
    published: 0,
    modified: 0
  };
  const total = draft + published + modified;
  if (!total) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-manager.widget.last-published.no-data",
      defaultMessage: "No published entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(Flex, { minHeight: "100%", children: (0, import_jsx_runtime.jsx)(
    DonutChartSVG,
    {
      data: [
        {
          label: formatMessage({
            id: "content-manager.containers.List.draft",
            defaultMessage: "Draft"
          }),
          count: draft,
          color: "secondary500"
        },
        {
          label: formatMessage({
            id: "content-manager.containers.List.modified",
            defaultMessage: "Modified"
          }),
          count: modified,
          color: "alternative500"
        },
        {
          label: formatMessage({
            id: "content-manager.containers.List.published",
            defaultMessage: "Published"
          }),
          count: published,
          color: "success500"
        }
      ]
    }
  ) });
};
export {
  ChartEntriesWidget,
  LastEditedWidget,
  LastPublishedWidget
};
//# sourceMappingURL=Widgets-5H3EE24F.js.map
