{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/pages/ListView/components/BulkActions/Actions.tsx", "../../../../../packages/core/content-manager/admin/src/pages/ListView/components/BulkActions/PublishAction.tsx", "../../../../../packages/core/content-manager/admin/src/pages/ListView/components/BulkActions/ConfirmBulkActionDialog.tsx", "../../../../../packages/core/content-manager/admin/src/pages/ListView/components/TableActions.tsx", "../../../../../packages/core/content-manager/admin/src/pages/ListView/components/AutoCloneFailureModal.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  useStrapiApp,\n  DescriptionComponentRenderer,\n  useTable,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Box, ButtonProps, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport {\n  DialogOptions,\n  DocumentActionButton,\n  ModalOptions,\n  NotificationOptions,\n} from '../../../EditView/components/DocumentActions';\n\nimport { PublishAction } from './PublishAction';\n\nimport type { BulkActionComponent, ContentManagerPlugin } from '../../../../content-manager';\n\ninterface BulkActionDescription {\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => void;\n  /**\n   * @default 'default'\n   */\n  type?: 'icon' | 'default';\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkActionsRenderer\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkActionsRenderer = () => {\n  const plugins = useStrapiApp('BulkActionsRenderer', (state) => state.plugins);\n\n  const { model, collectionType } = useDoc();\n  const { selectedRows } = useTable('BulkActionsRenderer', (state) => state);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          model,\n          collectionType,\n          documents: selectedRows,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getBulkActions()}\n      >\n        {(actions) => actions.map((action) => <DocumentActionButton key={action.id} {...action} />)}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DefaultBulkActions\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema: contentType } = useDoc();\n  const selectRow = useTable('DeleteAction', (state) => state.selectRow);\n  const hasI18nEnabled = Boolean(contentType?.pluginOptions?.i18n);\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const hasDeletePermission = useDocumentRBAC('deleteAction', (state) => state.canDelete);\n  const { deleteMany: bulkDeleteAction, isLoading } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n\n  const handleConfirmBulkDelete = async () => {\n    const res = await bulkDeleteAction({\n      documentIds,\n      model,\n      params,\n    });\n    if (!('error' in res)) {\n      selectRow([]);\n    }\n  };\n\n  if (!hasDeletePermission) return null;\n\n  return {\n    variant: 'danger-light',\n    label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      loading: isLoading,\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.delete.all',\n              defaultMessage: 'Are you sure you want to delete these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n                    defaultMessage:\n                      'This will delete the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      onConfirm: handleConfirmBulkDelete,\n    },\n  };\n};\n\nDeleteAction.type = 'delete';\n\nconst UnpublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const selectRow = useTable('UnpublishAction', (state) => state.selectRow);\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const hasI18nEnabled = Boolean(schema?.pluginOptions?.i18n);\n  const hasDraftAndPublishEnabled = Boolean(schema?.options?.draftAndPublish);\n  const { unpublishMany: bulkUnpublishAction, isLoading } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const handleConfirmBulkUnpublish = async () => {\n    const data = await bulkUnpublishAction({ documentIds, model, params });\n    if (!('error' in data)) {\n      selectRow([]);\n    }\n  };\n\n  const showUnpublishButton =\n    hasDraftAndPublishEnabled &&\n    hasPublishPermission &&\n    documents.some((entry) => entry.status === 'published' || entry.status === 'modified');\n\n  if (!showUnpublishButton) return null;\n\n  return {\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      loading: isLoading,\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.unpublish.all',\n              defaultMessage: 'Are you sure you want to unpublish these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n                    defaultMessage:\n                      'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      confirmButton: formatMessage({\n        id: 'app.utils.unpublish',\n        defaultMessage: 'Unpublish',\n      }),\n      onConfirm: handleConfirmBulkUnpublish,\n    },\n  };\n};\n\nUnpublishAction.type = 'unpublish';\n\nconst Emphasis = (chunks: React.ReactNode) => (\n  <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n    {chunks}\n  </Typography>\n);\n\nconst DEFAULT_BULK_ACTIONS: BulkActionComponent[] = [PublishAction, UnpublishAction, DeleteAction];\n\nexport { DEFAULT_BULK_ACTIONS, BulkActionsRenderer, Emphasis };\nexport type { BulkActionDescription };\n", "import * as React from 'react';\n\nimport {\n  FormErrors,\n  getYupValidationErrors,\n  Table,\n  useQueryParams,\n  useTable,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Flex,\n  IconButton,\n  Loader,\n  Modal,\n  Tooltip,\n  Typography,\n  TypographyComponent,\n  RawTable,\n  Tr,\n  Td,\n  Tbody,\n} from '@strapi/design-system';\nimport { ArrowsCounterClockwise, CheckCircle, CrossCircle, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport { ValidationError } from 'yup';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useContentTypeSchema } from '../../../../hooks/useContentTypeSchema';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { useDocLayout } from '../../../../hooks/useDocumentLayout';\nimport { contentManagerApi } from '../../../../services/api';\nimport {\n  useGetAllDocumentsQuery,\n  usePublishManyDocumentsMutation,\n} from '../../../../services/documents';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport { createYupSchema } from '../../../../utils/validation';\nimport { DocumentStatus } from '../../../EditView/components/DocumentStatus';\n\nimport { ConfirmDialogPublishAll, ConfirmDialogPublishAllProps } from './ConfirmBulkActionDialog';\n\nimport type { BulkActionComponent } from '../../../../content-manager';\nimport type { Document } from '../../../../hooks/useDocument';\n\nconst TypographyMaxWidth = styled<TypographyComponent>(Typography)`\n  max-width: 300px;\n`;\n\nconst TableComponent = styled(RawTable)`\n  width: 100%;\n  table-layout: fixed;\n  td:first-child {\n    border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n  td:first-of-type {\n    padding: ${({ theme }) => theme.spaces[4]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\nconst formatErrorMessages = (errors: FormErrors, parentKey: string, formatMessage: any) => {\n  const messages: string[] = [];\n\n  Object.entries(errors).forEach(([key, value]) => {\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      if ('id' in value && 'defaultMessage' in value) {\n        messages.push(\n          formatMessage(\n            {\n              id: `${value.id}.withField`,\n              defaultMessage: value.defaultMessage,\n            },\n            { field: currentKey }\n          )\n        );\n      } else {\n        messages.push(\n          ...formatErrorMessages(\n            // @ts-expect-error TODO: check why value is not compatible with FormErrors\n            value,\n            currentKey,\n            formatMessage\n          )\n        );\n      }\n    } else {\n      messages.push(\n        formatMessage(\n          {\n            id: `${value}.withField`,\n            defaultMessage: value,\n          },\n          { field: currentKey }\n        )\n      );\n    }\n  });\n\n  return messages;\n};\n\ninterface EntryValidationTextProps {\n  validationErrors?: FormErrors;\n  status: string;\n}\n\nconst EntryValidationText = ({ validationErrors, status }: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  if (validationErrors) {\n    const validationErrorsMessages = formatErrorMessages(validationErrors, '', formatMessage).join(\n      ' '\n    );\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip description={validationErrorsMessages}>\n          <TypographyMaxWidth textColor=\"danger600\" variant=\"omega\" fontWeight=\"bold\" ellipsis>\n            {validationErrorsMessages}\n          </TypographyMaxWidth>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <Flex gap={2}>\n        <CheckCircle fill=\"success600\" />\n        <Typography textColor=\"success600\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (status === 'modified') {\n    return (\n      <Flex gap={2}>\n        <ArrowsCounterClockwise fill=\"alternative600\" />\n        <Typography textColor=\"alternative600\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-manager.bulk-publish.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex gap={2}>\n      <CheckCircle fill=\"success600\" />\n      <Typography textColor=\"success600\" fontWeight=\"bold\">\n        {formatMessage({\n          id: 'app.utils.ready-to-publish',\n          defaultMessage: 'Ready to publish',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesTableContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SelectedEntriesTableContentProps {\n  isPublishing?: boolean;\n  rowsToDisplay?: TableRow[];\n  entriesToPublish?: TableRow['documentId'][];\n  validationErrors: Record<string, EntryValidationTextProps['validationErrors']>;\n}\n\nconst TABLE_HEADERS = [\n  { name: 'id', label: 'id' },\n  { name: 'name', label: 'name' },\n  { name: 'status', label: 'status' },\n  { name: 'publicationStatus', label: 'Publication status' },\n];\n\nconst SelectedEntriesTableContent = ({\n  isPublishing,\n  rowsToDisplay = [],\n  entriesToPublish = [],\n  validationErrors = {},\n}: SelectedEntriesTableContentProps) => {\n  const { pathname } = useLocation();\n  const { formatMessage } = useIntl();\n\n  const {\n    list: {\n      settings: { mainField },\n    },\n  } = useDocLayout();\n\n  const shouldDisplayMainField = mainField != null && mainField !== 'id';\n\n  return (\n    <Table.Content>\n      <Table.Head>\n        <Table.HeaderCheckboxCell />\n        {TABLE_HEADERS.filter((head) => head.name !== 'name' || shouldDisplayMainField).map(\n          (head) => (\n            <Table.HeaderCell key={head.name} {...head} />\n          )\n        )}\n      </Table.Head>\n      <Table.Loading />\n      <Table.Body>\n        {rowsToDisplay.map((row) => (\n          <Table.Row key={row.id}>\n            <Table.CheckboxCell id={row.id} />\n            <Table.Cell>\n              <Typography>{row.id}</Typography>\n            </Table.Cell>\n            {shouldDisplayMainField && (\n              <Table.Cell>\n                <Typography>{row[mainField as keyof TableRow]}</Typography>\n              </Table.Cell>\n            )}\n            <Table.Cell>\n              <DocumentStatus status={row.status} maxWidth={'min-content'} />\n            </Table.Cell>\n            <Table.Cell>\n              {isPublishing && entriesToPublish.includes(row.documentId) ? (\n                <Flex gap={2}>\n                  <Typography>\n                    {formatMessage({\n                      id: 'content-manager.success.record.publishing',\n                      defaultMessage: 'Publishing...',\n                    })}\n                  </Typography>\n                  <Loader small />\n                </Flex>\n              ) : (\n                <EntryValidationText\n                  validationErrors={validationErrors[row.documentId]}\n                  status={row.status}\n                />\n              )}\n            </Table.Cell>\n            <Table.Cell>\n              <Flex>\n                <IconButton\n                  tag={Link}\n                  to={{\n                    pathname: `${pathname}/${row.documentId}`,\n                    search: row.locale && `?plugins[i18n][locale]=${row.locale}`,\n                  }}\n                  state={{ from: pathname }}\n                  label={formatMessage({\n                    id: 'content-manager.bulk-publish.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                  target=\"_blank\"\n                  marginLeft=\"auto\"\n                  variant=\"ghost\"\n                >\n                  <Pencil width={'1.6rem'} height={'1.6rem'} />\n                </IconButton>\n              </Flex>\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublicationStatusSummary\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PublicationStatusSummaryProps {\n  count: number;\n  icon: React.ReactNode;\n  message: string;\n  textColor: string;\n}\n\nconst PublicationStatusSummary = ({\n  count,\n  icon,\n  message,\n  textColor,\n}: PublicationStatusSummaryProps) => {\n  return (\n    <Flex justifyContent=\"space-between\" flex={1} gap={3}>\n      <Flex gap={2}>\n        {icon}\n        <Typography textColor={textColor} fontWeight=\"bold\">\n          {message}\n        </Typography>\n      </Flex>\n      <Typography fontWeight=\"bold\">{count}</Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublicationStatusGrid\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PublicationStatusGridProps {\n  entriesReadyToPublishCount: number;\n  entriesModifiedCount: number;\n  entriesPublishedCount: number;\n  entriesWithErrorsCount: number;\n}\n\nconst PublicationStatusGrid = ({\n  entriesReadyToPublishCount,\n  entriesPublishedCount,\n  entriesModifiedCount,\n  entriesWithErrorsCount,\n}: PublicationStatusGridProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box hasRadius borderColor=\"neutral150\">\n      <TableComponent colCount={2} rowCount={2}>\n        <Tbody>\n          <Tr>\n            <Td>\n              <PublicationStatusSummary\n                textColor=\"success600\"\n                count={entriesReadyToPublishCount}\n                icon={<CheckCircle fill=\"success600\" />}\n                message={formatMessage({\n                  id: 'app.utils.ready-to-publish',\n                  defaultMessage: 'Ready to publish',\n                })}\n              />\n            </Td>\n            <Td>\n              <PublicationStatusSummary\n                textColor=\"success600\"\n                count={entriesPublishedCount}\n                icon={<CheckCircle fill=\"success600\" />}\n                message={formatMessage({\n                  id: 'app.utils.already-published',\n                  defaultMessage: 'Already published',\n                })}\n              />\n            </Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <PublicationStatusSummary\n                textColor=\"alternative600\"\n                count={entriesModifiedCount}\n                icon={<ArrowsCounterClockwise fill=\"alternative600\" />}\n                message={formatMessage({\n                  id: 'content-manager.bulk-publish.modified',\n                  defaultMessage: 'Ready to publish changes',\n                })}\n              />\n            </Td>\n            <Td>\n              <PublicationStatusSummary\n                textColor=\"danger600\"\n                count={entriesWithErrorsCount}\n                icon={<CrossCircle fill=\"danger600\" />}\n                message={formatMessage({\n                  id: 'content-manager.bulk-publish.waiting-for-action',\n                  defaultMessage: 'Waiting for action',\n                })}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </TableComponent>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesModalContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableRow extends Document {}\n\ninterface SelectedEntriesModalContentProps {\n  listViewSelectedEntries: TableRow[];\n  toggleModal: ConfirmDialogPublishAllProps['onToggleDialog'];\n  setListViewSelectedDocuments: (documents: TableRow[]) => void;\n  model: string;\n}\n\nconst SelectedEntriesModalContent = ({\n  listViewSelectedEntries,\n  toggleModal,\n  setListViewSelectedDocuments,\n  model,\n}: SelectedEntriesModalContentProps) => {\n  const { formatMessage } = useIntl();\n  const { schema, components } = useContentTypeSchema(model);\n  const documentIds = listViewSelectedEntries.map(({ documentId }) => documentId);\n\n  // We want to keep the selected entries order same as the list view\n  const [{ query }] = useQueryParams<{ sort?: string; plugins?: Record<string, any> }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  // Fetch the documents based on the selected entries and update the modal table\n  const { data, isLoading, isFetching, refetch } = useGetAllDocumentsQuery(\n    {\n      model,\n      params: {\n        page: '1',\n        pageSize: documentIds.length.toString(),\n        sort: query.sort,\n        filters: {\n          documentId: {\n            $in: documentIds,\n          },\n        },\n        locale: query.plugins?.i18n?.locale,\n      },\n    },\n    {\n      selectFromResult: ({ data, ...restRes }) => ({ data: data?.results ?? [], ...restRes }),\n    }\n  );\n\n  // Validate the entries based on the schema to show errors if any\n  const { rows, validationErrors } = React.useMemo(() => {\n    if (data.length > 0 && schema) {\n      const validate = createYupSchema(\n        schema.attributes,\n        components,\n        // Since this is the \"Publish\" action, the validation\n        // schema must enforce the rules for published entities\n        { status: 'published' }\n      );\n      const validationErrors: Record<TableRow['documentId'], FormErrors> = {};\n      const rows = data.map((entry: Document) => {\n        try {\n          validate.validateSync(entry, { abortEarly: false });\n\n          return entry;\n        } catch (e) {\n          if (e instanceof ValidationError) {\n            validationErrors[entry.documentId] = getYupValidationErrors(e);\n          }\n\n          return entry;\n        }\n      });\n\n      return { rows, validationErrors };\n    }\n\n    return {\n      rows: [],\n      validationErrors: {},\n    };\n  }, [components, data, schema]);\n\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const { publishMany: bulkPublishAction, isLoading: isPublishing } = useDocumentActions();\n  const [, { isLoading: isSubmittingForm }] = usePublishManyDocumentsMutation();\n\n  const selectedRows = useTable('publishAction', (state) => state.selectedRows);\n\n  // Filter selected entries from the updated modal table rows\n  const selectedEntries = rows.filter((entry) =>\n    selectedRows.some((selectedEntry) => selectedEntry.documentId === entry.documentId)\n  );\n\n  const entriesToPublish = selectedEntries\n    .filter((entry) => !validationErrors[entry.documentId])\n    .map((entry) => entry.documentId);\n\n  const selectedEntriesWithErrorsCount = selectedEntries.filter(\n    ({ documentId }) => validationErrors[documentId]\n  ).length;\n  const selectedEntriesPublishedCount = selectedEntries.filter(\n    ({ status }) => status === 'published'\n  ).length;\n  const selectedEntriesModifiedCount = selectedEntries.filter(\n    ({ status, documentId }) => status === 'modified' && !validationErrors[documentId]\n  ).length;\n  const selectedEntriesWithNoErrorsCount =\n    selectedEntries.length - selectedEntriesWithErrorsCount - selectedEntriesPublishedCount;\n\n  const toggleDialog = () => setIsDialogOpen((prev) => !prev);\n\n  const handleConfirmBulkPublish = async () => {\n    toggleDialog();\n\n    const res = await bulkPublishAction({ model: model, documentIds: entriesToPublish, params });\n    if (!('error' in res)) {\n      const unpublishedEntries = rows.filter((row) => {\n        return !entriesToPublish.includes(row.documentId);\n      });\n      // Keep selection of the entries in list view that were not published\n      setListViewSelectedDocuments(unpublishedEntries);\n    }\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <PublicationStatusGrid\n          entriesReadyToPublishCount={\n            selectedEntriesWithNoErrorsCount - selectedEntriesModifiedCount\n          }\n          entriesPublishedCount={selectedEntriesPublishedCount}\n          entriesModifiedCount={selectedEntriesModifiedCount}\n          entriesWithErrorsCount={selectedEntriesWithErrorsCount}\n        />\n        <Box marginTop={7}>\n          <SelectedEntriesTableContent\n            isPublishing={isSubmittingForm}\n            rowsToDisplay={rows}\n            entriesToPublish={entriesToPublish}\n            validationErrors={validationErrors}\n          />\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={toggleModal} variant=\"tertiary\">\n          {formatMessage({\n            id: 'app.components.Button.cancel',\n            defaultMessage: 'Cancel',\n          })}\n        </Button>\n        <Flex gap={2}>\n          <Button onClick={refetch} variant=\"tertiary\" loading={isFetching}>\n            {formatMessage({ id: 'app.utils.refresh', defaultMessage: 'Refresh' })}\n          </Button>\n          <Button\n            onClick={toggleDialog}\n            disabled={\n              selectedEntries.length === 0 ||\n              selectedEntries.length === selectedEntriesWithErrorsCount ||\n              selectedEntriesPublishedCount === selectedEntries.length ||\n              isLoading\n            }\n            loading={isPublishing || isSubmittingForm}\n          >\n            {formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' })}\n          </Button>\n        </Flex>\n      </Modal.Footer>\n      <ConfirmDialogPublishAll\n        isOpen={isDialogOpen}\n        onToggleDialog={toggleDialog}\n        isConfirmButtonLoading={isPublishing || isSubmittingForm}\n        onConfirm={handleConfirmBulkPublish}\n      />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublishAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  // Publish button visibility\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const showPublishButton =\n    hasPublishPermission && documents.some(({ status }) => status !== 'published');\n\n  const setListViewSelectedDocuments = useTable('publishAction', (state) => state.selectRow);\n\n  const refetchList = () => {\n    contentManagerApi.util.invalidateTags([{ type: 'Document', id: `${model}_LIST` }]);\n  };\n\n  if (!showPublishButton) return null;\n\n  return {\n    actionType: 'publish',\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' }),\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation('containers.ListPage.selectedEntriesModal.title'),\n        defaultMessage: 'Publish entries',\n      }),\n      content: ({ onClose }) => {\n        return (\n          <Table.Root rows={documents} defaultSelectedRows={documents} headers={TABLE_HEADERS}>\n            <SelectedEntriesModalContent\n              listViewSelectedEntries={documents}\n              toggleModal={() => {\n                onClose();\n                refetchList();\n              }}\n              setListViewSelectedDocuments={setListViewSelectedDocuments}\n              model={model}\n            />\n          </Table.Root>\n        );\n      },\n      onClose: () => {\n        refetchList();\n      },\n    },\n  };\n};\n\nexport { PublishAction, SelectedEntriesModalContent };\n", "import * as React from 'react';\n\nimport {\n  useTable,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Dialog, Typography } from '@strapi/design-system';\nimport { Check, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetManyDraftRelationCountQuery } from '../../../../services/documents';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport { Emphasis } from './Actions';\n\ninterface ConfirmBulkActionDialogProps {\n  endAction: React.ReactNode;\n  onToggleDialog: () => void;\n  isOpen?: boolean;\n  dialogBody: React.ReactNode;\n}\n\nconst ConfirmBulkActionDialog = ({\n  onToggleDialog,\n  isOpen = false,\n  dialogBody,\n  endAction,\n}: ConfirmBulkActionDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Dialog.Root open={isOpen}>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          })}\n        </Dialog.Header>\n        <Dialog.Body>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n            </Flex>\n            {dialogBody}\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button width={'50%'} onClick={onToggleDialog} variant=\"tertiary\">\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          {endAction}\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * ConfirmDialogPublishAll\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfirmDialogPublishAllProps\n  extends Pick<ConfirmBulkActionDialogProps, 'isOpen' | 'onToggleDialog'> {\n  isConfirmButtonLoading?: boolean;\n  onConfirm: () => void;\n}\n\nconst ConfirmDialogPublishAll = ({\n  isOpen,\n  onToggleDialog,\n  isConfirmButtonLoading = false,\n  onConfirm,\n}: ConfirmDialogPublishAllProps) => {\n  const { formatMessage } = useIntl();\n  const selectedEntries = useTable('ConfirmDialogPublishAll', (state) => state.selectedRows);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n  const { model, schema } = useDoc();\n  const [{ query }] = useQueryParams<{\n    plugins?: {\n      i18n?: {\n        locale?: string;\n      };\n    };\n  }>();\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n\n  const {\n    data: countDraftRelations = 0,\n    isLoading,\n    error,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: selectedEntries.map((entry) => entry.documentId),\n      locale: query?.plugins?.i18n?.locale,\n    },\n    {\n      skip: !enableDraftRelationsCount || selectedEntries.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (error) {\n    return null;\n  }\n\n  return (\n    <ConfirmBulkActionDialog\n      isOpen={isOpen && !isLoading}\n      onToggleDialog={onToggleDialog}\n      dialogBody={\n        <>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {countDraftRelations > 0 &&\n              formatMessage(\n                {\n                  id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n                  defaultMessage:\n                    '<b>{count} {count, plural, one { relation } other { relations } } out of {entities} { entities, plural, one { entry } other { entries } } {count, plural, one { is } other { are } }</b> not published yet and might lead to unexpected behavior. ',\n                },\n                {\n                  b: BoldChunk,\n                  count: countDraftRelations,\n                  entities: selectedEntries.length,\n                }\n              )}\n            {formatMessage({\n              id: getTranslation('popUpWarning.bodyMessage.contentType.publish.all'),\n              defaultMessage: 'Are you sure you want to publish these entries?',\n            })}\n          </Typography>\n          {schema?.pluginOptions &&\n            'i18n' in schema.pluginOptions &&\n            schema?.pluginOptions.i18n && (\n              <Typography textColor=\"danger500\" textAlign=\"center\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n                    defaultMessage:\n                      'This will publish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            )}\n        </>\n      }\n      endAction={\n        <Button\n          width={'50%'}\n          onClick={onConfirm}\n          variant=\"secondary\"\n          startIcon={<Check />}\n          loading={isConfirmButtonLoading}\n        >\n          {formatMessage({\n            id: 'app.utils.publish',\n            defaultMessage: 'Publish',\n          })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfirmDialogPublishAll, ConfirmBulkActionDialog };\nexport type { ConfirmDialogPublishAllProps, ConfirmBulkActionDialogProps };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, LinkButton, Modal } from '@strapi/design-system';\nimport { Duplicate, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { Document, useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { isBaseQueryError } from '../../../utils/api';\nimport { DocumentActionsMenu } from '../../EditView/components/DocumentActions';\n\nimport { AutoCloneFailureModalBody } from './AutoCloneFailureModal';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\nimport type {\n  ContentManagerPlugin,\n  DocumentActionComponent,\n  DocumentActionProps,\n} from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * TableActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableActionsProps {\n  document: Document;\n}\n\nconst TableActions = ({ document }: TableActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { model, collectionType } = useDoc();\n  const plugins = useStrapiApp('TableActions', (state) => state.plugins);\n\n  const props: DocumentActionProps = {\n    activeTab: null,\n    model,\n    documentId: document.documentId,\n    collectionType,\n    document,\n  };\n\n  return (\n    <DescriptionComponentRenderer\n      props={props}\n      descriptions={(plugins['content-manager'].apis as ContentManagerPlugin['config']['apis'])\n        .getDocumentActions('table-row')\n        // We explicitly remove the PublishAction from description so we never render it and we don't make unnecessary requests.\n        .filter((action) => action.name !== 'PublishAction')}\n    >\n      {(actions) => {\n        const tableRowActions = actions.filter((action) => {\n          const positions = Array.isArray(action.position) ? action.position : [action.position];\n          return positions.includes('table-row');\n        });\n\n        return (\n          <DocumentActionsMenu\n            actions={tableRowActions}\n            label={formatMessage({\n              id: 'content-manager.containers.list.table.row-actions',\n              defaultMessage: 'Row actions',\n            })}\n            variant=\"ghost\"\n          />\n        );\n      }}\n    </DescriptionComponentRenderer>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditAction: DocumentActionComponent = ({ documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canRead } = useDocumentRBAC('EditAction', ({ canRead }) => ({ canRead }));\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\n\n  return {\n    disabled: !canRead,\n    icon: <StyledPencil />,\n    label: formatMessage({\n      id: 'content-manager.actions.edit.label',\n      defaultMessage: 'Edit',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to edit a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.edit.error',\n            defaultMessage: 'An error occurred while trying to edit the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      navigate({\n        pathname: documentId,\n        search: stringify({\n          plugins: query.plugins,\n        }),\n      });\n    },\n  };\n};\n\nEditAction.type = 'edit';\nEditAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledPencil = styled(Pencil)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst CloneAction: DocumentActionComponent = ({ model, documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canCreate } = useDocumentRBAC('CloneAction', ({ canCreate }) => ({ canCreate }));\n  const { toggleNotification } = useNotification();\n  const { autoClone } = useDocumentActions();\n  const [prohibitedFields, setProhibitedFields] = React.useState<ProhibitedCloningField[]>([]);\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, any> }>();\n\n  return {\n    disabled: !canCreate,\n    icon: <StyledDuplicate />,\n    label: formatMessage({\n      id: 'content-manager.actions.clone.label',\n      defaultMessage: 'Duplicate',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to clone a document in the table without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.clone.error',\n            defaultMessage: 'An error occurred while trying to clone the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      const res = await autoClone({\n        model,\n        sourceId: documentId,\n        locale: query.plugins?.i18n?.locale,\n      });\n\n      if ('data' in res) {\n        navigate({\n          pathname: res.data.documentId,\n          search: stringify({\n            plugins: query.plugins,\n          }),\n        });\n\n        /**\n         * We return true because we don't need to show a modal anymore.\n         */\n        return true;\n      }\n\n      if (\n        isBaseQueryError(res.error) &&\n        res.error.details &&\n        typeof res.error.details === 'object' &&\n        'prohibitedFields' in res.error.details &&\n        Array.isArray(res.error.details.prohibitedFields)\n      ) {\n        const prohibitedFields = res.error.details.prohibitedFields as ProhibitedCloningField[];\n\n        setProhibitedFields(prohibitedFields);\n      }\n    },\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-manager.containers.list.autoCloneModal.header',\n        defaultMessage: 'Duplicate',\n      }),\n      content: <AutoCloneFailureModalBody prohibitedFields={prohibitedFields} />,\n      footer: ({ onClose }) => {\n        return (\n          <Modal.Footer>\n            <Button onClick={onClose} variant=\"tertiary\">\n              {formatMessage({\n                id: 'cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n            <LinkButton\n              tag={NavLink}\n              to={{\n                pathname: `clone/${documentId}`,\n                search: stringify({\n                  plugins: query.plugins,\n                }),\n              }}\n            >\n              {formatMessage({\n                id: 'content-manager.containers.list.autoCloneModal.create',\n                defaultMessage: 'Create',\n              })}\n            </LinkButton>\n          </Modal.Footer>\n        );\n      },\n    },\n  };\n};\n\nCloneAction.type = 'clone';\nCloneAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledDuplicate = styled(Duplicate)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst DEFAULT_TABLE_ROW_ACTIONS = [EditAction, CloneAction];\n\nexport { TableActions, DEFAULT_TABLE_ROW_ACTIONS };\n", "import { Box, Flex, Typography } from '@strapi/design-system';\nimport { ChevronRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\n\ntype Reason = ProhibitedCloningField[1];\n\ninterface AutoCloneFailureModalBodyProps {\n  prohibitedFields: ProhibitedCloningField[];\n}\n\nconst AutoCloneFailureModalBody = ({ prohibitedFields }: AutoCloneFailureModalBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  const getDefaultErrorMessage = (reason: Reason) => {\n    switch (reason) {\n      case 'relation':\n        return 'Duplicating the relation could remove it from the original entry.';\n      case 'unique':\n        return 'Identical values in a unique field are not allowed';\n      default:\n        return reason;\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"beta\">\n        {formatMessage({\n          id: getTranslation('containers.list.autoCloneModal.title'),\n          defaultMessage: \"This entry can't be duplicated directly.\",\n        })}\n      </Typography>\n      <Box marginTop={2}>\n        <Typography textColor=\"neutral600\">\n          {formatMessage({\n            id: getTranslation('containers.list.autoCloneModal.description'),\n            defaultMessage:\n              \"A new entry will be created with the same content, but you'll have to change the following fields to save it.\",\n          })}\n        </Typography>\n      </Box>\n      <Flex marginTop={6} gap={2} direction=\"column\" alignItems=\"stretch\">\n        {prohibitedFields.map(([fieldPath, reason]) => (\n          <Flex\n            direction=\"column\"\n            gap={2}\n            alignItems=\"flex-start\"\n            borderColor=\"neutral200\"\n            hasRadius\n            padding={6}\n            key={fieldPath.join()}\n          >\n            <Flex direction=\"row\" tag=\"ol\">\n              {fieldPath.map((pathSegment, index) => (\n                <Typography fontWeight=\"semiBold\" tag=\"li\" key={index}>\n                  {pathSegment}\n                  {index !== fieldPath.length - 1 && (\n                    <ChevronRight\n                      fill=\"neutral500\"\n                      height=\"0.8rem\"\n                      width=\"0.8rem\"\n                      style={{ margin: '0 0.8rem' }}\n                    />\n                  )}\n                </Typography>\n              ))}\n            </Flex>\n            <Typography tag=\"p\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation(`containers.list.autoCloneModal.error.${reason}`),\n                defaultMessage: getDefaultErrorMessage(reason),\n              })}\n            </Typography>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n\nexport { AutoCloneFailureModalBody };\nexport type { AutoCloneFailureModalBodyProps };\n"],
  "mappings": "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",
  "names": ["React", "React", "import_jsx_runtime", "data", "validationErrors", "rows", "import_jsx_runtime", "React", "import_jsx_runtime", "import_jsx_runtime", "canRead", "canCreate", "prohibitedFields"]
}
