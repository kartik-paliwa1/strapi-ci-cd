{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useElementOnScreen.ts", "../../../../../packages/core/admin/admin/src/components/Layouts/ActionLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/ContentLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/GridLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/HeaderLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\n/**\n * Hook that returns a ref to an element and a boolean indicating if the element is in the viewport\n * or in the element specified in `options.root`.\n */\nconst useElementOnScreen = <TElement extends HTMLElement = HTMLElement>(\n  onVisiblityChange: (isVisible: boolean) => void,\n  options?: IntersectionObserverInit\n): React.RefObject<TElement> => {\n  const containerRef = React.useRef<TElement>(null);\n\n  React.useEffect(() => {\n    const containerEl = containerRef.current;\n    const observer = new IntersectionObserver(([entry]) => {\n      onVisiblityChange(entry.isIntersecting);\n    }, options);\n\n    if (containerEl) {\n      observer.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerEl) {\n        observer.disconnect();\n      }\n    };\n  }, [containerRef, options, onVisiblityChange]);\n\n  return containerRef;\n};\n\nexport { useElementOnScreen };\n", "import * as React from 'react';\n\nimport { Flex } from '@strapi/design-system';\n\ninterface ActionLayoutProps {\n  endActions?: React.ReactNode;\n  startActions?: React.ReactNode;\n}\n\nconst ActionLayout = ({ startActions, endActions }: ActionLayoutProps) => {\n  if (!startActions && !endActions) {\n    return null;\n  }\n\n  return (\n    <Flex\n      justifyContent=\"space-between\"\n      alignItems=\"flex-start\"\n      paddingBottom={4}\n      paddingLeft={10}\n      paddingRight={10}\n    >\n      <Flex gap={2} wrap=\"wrap\">\n        {startActions}\n      </Flex>\n\n      <Flex gap={2} shrink={0} wrap=\"wrap\">\n        {endActions}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { ActionLayout, type ActionLayoutProps };\n", "import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\n\ninterface ContentLayoutProps {\n  children: React.ReactNode;\n}\n\nconst ContentLayout = ({ children }: ContentLayoutProps) => {\n  return (\n    <Box paddingLeft={10} paddingRight={10}>\n      {children}\n    </Box>\n  );\n};\n\nexport { ContentLayout, type ContentLayoutProps };\n", "import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\ninterface GridColSize {\n  S: number;\n  M: number;\n}\n\nconst GridColSize = {\n  S: 180,\n  M: 250,\n};\n\ntype Size = keyof GridColSize;\n\nconst StyledGrid = styled(Box)<{ $size: Size }>`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${({ $size }: { $size: Size }) => `${GridColSize[$size]}px`}, 1fr)\n  );\n  grid-gap: ${({ theme }) => theme.spaces[4]};\n`;\n\ninterface GridLayoutProps {\n  size: Size;\n  children: React.ReactNode;\n}\n\nconst GridLayout = ({ size, children }: GridLayoutProps) => {\n  return <StyledGrid $size={size}>{children}</StyledGrid>;\n};\n\nexport { GridLayout };\nexport type { GridLayoutProps, GridColSize };\n", "import * as React from 'react';\n\nimport { Box, Flex, Typography, TypographyProps, useCallbackRef } from '@strapi/design-system';\n\nimport { useElementOnScreen } from '../../hooks/useElementOnScreen';\n\n/* -------------------------------------------------------------------------------------------------\n * BaseHeaderLayout\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseHeaderLayoutProps extends Omit<TypographyProps<'div'>, 'tag'> {\n  navigationAction?: React.ReactNode;\n  primaryAction?: React.ReactNode;\n  secondaryAction?: React.ReactNode;\n  subtitle?: React.ReactNode;\n  sticky?: boolean;\n  width?: number;\n}\n\nconst BaseHeaderLayout = React.forwardRef<HTMLDivElement, BaseHeaderLayoutProps>(\n  (\n    { navigationAction, primaryAction, secondaryAction, subtitle, title, sticky, width, ...props },\n    ref\n  ) => {\n    const isSubtitleString = typeof subtitle === 'string';\n\n    if (sticky) {\n      return (\n        <Box\n          paddingLeft={6}\n          paddingRight={6}\n          paddingTop={3}\n          paddingBottom={3}\n          position=\"fixed\"\n          top={0}\n          right={0}\n          background=\"neutral0\"\n          shadow=\"tableShadow\"\n          width={`${width}px`}\n          zIndex={3}\n          data-strapi-header-sticky\n        >\n          <Flex justifyContent=\"space-between\">\n            <Flex>\n              {navigationAction && <Box paddingRight={3}>{navigationAction}</Box>}\n              <Box>\n                <Typography variant=\"beta\" tag=\"h1\" {...props}>\n                  {title}\n                </Typography>\n                {isSubtitleString ? (\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {subtitle}\n                  </Typography>\n                ) : (\n                  subtitle\n                )}\n              </Box>\n              {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\n            </Flex>\n            <Flex>{primaryAction ? <Box paddingLeft={2}>{primaryAction}</Box> : undefined}</Flex>\n          </Flex>\n        </Box>\n      );\n    }\n\n    return (\n      <Box\n        ref={ref}\n        paddingLeft={10}\n        paddingRight={10}\n        paddingBottom={8}\n        paddingTop={navigationAction ? 6 : 8}\n        background=\"neutral100\"\n        data-strapi-header\n      >\n        {navigationAction ? <Box paddingBottom={2}>{navigationAction}</Box> : null}\n        <Flex justifyContent=\"space-between\">\n          <Flex minWidth={0}>\n            <Typography tag=\"h1\" variant=\"alpha\" {...props}>\n              {title}\n            </Typography>\n            {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\n          </Flex>\n          {primaryAction}\n        </Flex>\n        {isSubtitleString ? (\n          <Typography variant=\"epsilon\" textColor=\"neutral600\" tag=\"p\">\n            {subtitle}\n          </Typography>\n        ) : (\n          subtitle\n        )}\n      </Box>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderLayout\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderLayoutProps extends BaseHeaderLayoutProps {}\n\nconst HeaderLayout = (props: HeaderLayoutProps) => {\n  const baseHeaderLayoutRef = React.useRef<HTMLDivElement>(null);\n  const [headerSize, setHeaderSize] = React.useState<DOMRect | null>(null);\n  const [isVisible, setIsVisible] = React.useState(true);\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(setIsVisible, {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0,\n  });\n\n  useResizeObserver(containerRef, () => {\n    if (containerRef.current) {\n      setHeaderSize(containerRef.current.getBoundingClientRect());\n    }\n  });\n\n  React.useEffect(() => {\n    if (baseHeaderLayoutRef.current) {\n      setHeaderSize(baseHeaderLayoutRef.current.getBoundingClientRect());\n    }\n  }, [baseHeaderLayoutRef]);\n\n  return (\n    <>\n      <div style={{ height: headerSize?.height }} ref={containerRef}>\n        {isVisible && <BaseHeaderLayout ref={baseHeaderLayoutRef} {...props} />}\n      </div>\n\n      {!isVisible && <BaseHeaderLayout {...props} sticky width={headerSize?.width} />}\n    </>\n  );\n};\n\nHeaderLayout.displayName = 'HeaderLayout';\n\n/**\n * useResizeObserver: hook that observes the size of an element and calls a callback when it changes.\n */\nconst useResizeObserver = (\n  sources: React.RefObject<HTMLElement> | React.RefObject<HTMLElement>[],\n  onResize: ResizeObserverCallback\n) => {\n  const handleResize = useCallbackRef(onResize);\n\n  React.useLayoutEffect(() => {\n    const resizeObs = new ResizeObserver(handleResize);\n\n    if (Array.isArray(sources)) {\n      sources.forEach((source) => {\n        if (source.current) {\n          resizeObs.observe(source.current);\n        }\n      });\n    } else if (sources.current) {\n      resizeObs.observe(sources.current);\n    }\n\n    return () => {\n      resizeObs.disconnect();\n    };\n  }, [sources, handleResize]);\n};\n\nexport type { HeaderLayoutProps, BaseHeaderLayoutProps };\nexport { HeaderLayout, BaseHeaderLayout };\n", "import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { ActionLayout } from './ActionLayout';\nimport { ContentLayout } from './ContentLayout';\nimport { GridLayout, GridLayoutProps } from './GridLayout';\nimport { HeaderLayout, BaseHeaderLayout } from './HeaderLayout';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  sideNav?: React.ReactNode;\n}\n\nconst GridContainer = styled(Box)<{ $hasSideNav: boolean }>`\n  display: grid;\n  grid-template-columns: ${({ $hasSideNav }) => ($hasSideNav ? `auto 1fr` : '1fr')};\n`;\n\nconst OverflowingItem = styled(Box)`\n  overflow-x: hidden;\n`;\n\nconst RootLayout = ({ sideNav, children }: LayoutProps) => {\n  return (\n    <GridContainer $hasSideNav={Boolean(sideNav)}>\n      {sideNav}\n      <OverflowingItem paddingBottom={10}>{children}</OverflowingItem>\n    </GridContainer>\n  );\n};\n\nconst Layouts = {\n  Root: RootLayout,\n  Header: HeaderLayout,\n  BaseHeader: BaseHeaderLayout,\n  Grid: GridLayout,\n  Action: ActionLayout,\n  Content: ContentLayout,\n};\n\nexport { Layouts, type LayoutProps, type GridLayoutProps };\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "import_jsx_runtime"]
}
