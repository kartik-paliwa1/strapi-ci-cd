{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/StrapiApp.tsx", "../../../../../packages/core/admin/admin/src/hooks/useQueryParams.ts", "../../../../../packages/core/admin/admin/src/reducer.ts", "../../../../../packages/core/admin/admin/src/services/auth.ts", "../../../../../packages/core/admin/admin/src/features/Auth.tsx"],
  "sourcesContent": ["import { createContext } from '../components/Context';\nimport { RBAC } from '../core/apis/rbac';\nimport { Router } from '../core/apis/router';\n\nimport type { StrapiApp } from '../StrapiApp';\n\n/* -------------------------------------------------------------------------------------------------\n * StrapiApp\n * -----------------------------------------------------------------------------------------------*/\ninterface StrapiAppContextValue\n  extends Pick<\n      StrapiApp,\n      | 'customFields'\n      | 'getPlugin'\n      | 'getAdminInjectedComponents'\n      | 'plugins'\n      | 'runHookParallel'\n      | 'runHookSeries'\n      | 'widgets'\n    >,\n    Pick<Router, 'menu' | 'settings'> {\n  components: StrapiApp['library']['components'];\n  fields: StrapiApp['library']['fields'];\n  rbac: RBAC;\n  runHookWaterfall: <TData>(\n    name: Parameters<StrapiApp['runHookWaterfall']>[0],\n    initialValue: TData\n  ) => TData;\n}\n\nconst [StrapiAppProvider, useStrapiApp] = createContext<StrapiAppContextValue>('StrapiApp');\n\nexport { StrapiAppProvider, useStrapiApp };\nexport type { StrapiAppContextValue };\n", "import { useCallback, useMemo } from 'react';\n\nimport { parse, stringify } from 'qs';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst useSearch = () => {\n  const { search } = useLocation();\n\n  return useMemo(() => search, [search]);\n};\n\nconst useQueryParams = <TQuery extends object>(initialParams?: TQuery) => {\n  const search = useSearch();\n  const navigate = useNavigate();\n\n  const query = useMemo(() => {\n    // TODO: investigate why sometimes we're getting the search with a leading `?` and sometimes not.\n    const searchQuery = search.startsWith('?') ? search.slice(1) : search;\n    if (!search && initialParams) {\n      return initialParams;\n    }\n\n    return { ...initialParams, ...parse(searchQuery) } as TQuery;\n  }, [search, initialParams]);\n\n  const setQuery = useCallback(\n    (nextParams: TQuery, method: 'push' | 'remove' = 'push', replace = false) => {\n      let nextQuery = { ...query };\n\n      if (method === 'remove') {\n        Object.keys(nextParams).forEach((key) => {\n          if (Object.prototype.hasOwnProperty.call(nextQuery, key)) {\n            // @ts-expect-error â€“ this is fine, if you want to fix it, please do.\n            delete nextQuery[key];\n          }\n        });\n      } else {\n        nextQuery = { ...query, ...nextParams };\n      }\n\n      navigate({ search: stringify(nextQuery, { encode: false }) }, { replace });\n    },\n    [navigate, query]\n  );\n\n  return [{ query, rawQuery: search }, setQuery] as const;\n};\n\nexport { useQueryParams };\n", "import { createSlice } from '@reduxjs/toolkit';\n\nimport { PermissionMap } from './types/permissions';\nimport { getCookieValue, setCookie, deleteCookie } from './utils/cookies';\n\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\ntype ThemeName = 'light' | 'dark' | 'system';\n\ninterface AppState {\n  language: {\n    locale: string;\n    localeNames: Record<string, string>;\n  };\n  permissions: Partial<PermissionMap>;\n  theme: {\n    currentTheme: ThemeName;\n    availableThemes: string[];\n  };\n  token?: string | null;\n}\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  STATUS: 'isLoggedIn',\n};\n\nconst THEME_LOCAL_STORAGE_KEY = 'STRAPI_THEME';\nconst LANGUAGE_LOCAL_STORAGE_KEY = 'strapi-admin-language';\n\nexport const getStoredToken = (): string | null => {\n  const fromLocalStorage = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (fromLocalStorage) {\n    return JSON.parse(fromLocalStorage);\n  }\n\n  const fromCookie = getCookieValue(STORAGE_KEYS.TOKEN);\n  return fromCookie ?? null;\n};\n\nconst adminSlice = createSlice({\n  name: 'admin',\n  initialState: () => {\n    return {\n      language: {\n        locale: 'en',\n        localeNames: { en: 'English' },\n      },\n      permissions: {},\n      theme: {\n        availableThemes: [],\n        currentTheme: localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || 'system',\n      },\n      token: null,\n    } as AppState;\n  },\n  reducers: {\n    setAppTheme(state, action: PayloadAction<ThemeName>) {\n      state.theme.currentTheme = action.payload;\n      window.localStorage.setItem(THEME_LOCAL_STORAGE_KEY, action.payload);\n    },\n    setAvailableThemes(state, action: PayloadAction<AppState['theme']['availableThemes']>) {\n      state.theme.availableThemes = action.payload;\n    },\n    setLocale(state, action: PayloadAction<string>) {\n      state.language.locale = action.payload;\n\n      window.localStorage.setItem(LANGUAGE_LOCAL_STORAGE_KEY, action.payload);\n      document.documentElement.setAttribute('lang', action.payload);\n    },\n    setToken(state, action: PayloadAction<string | null>) {\n      state.token = action.payload;\n    },\n    login(state, action: PayloadAction<{ token: string; persist?: boolean }>) {\n      const { token, persist } = action.payload;\n\n      if (!persist) {\n        setCookie(STORAGE_KEYS.TOKEN, token);\n      } else {\n        window.localStorage.setItem(STORAGE_KEYS.TOKEN, JSON.stringify(token));\n      }\n      window.localStorage.setItem(STORAGE_KEYS.STATUS, 'true');\n      state.token = token;\n    },\n    logout(state) {\n      state.token = null;\n      deleteCookie(STORAGE_KEYS.TOKEN);\n      window.localStorage.removeItem(STORAGE_KEYS.TOKEN);\n      window.localStorage.removeItem(STORAGE_KEYS.STATUS);\n    },\n  },\n});\n\nconst reducer = adminSlice.reducer;\n\nexport const { setAppTheme, setAvailableThemes, setLocale, setToken, logout, login } =\n  adminSlice.actions;\n\nexport { reducer, THEME_LOCAL_STORAGE_KEY, LANGUAGE_LOCAL_STORAGE_KEY };\nexport type { AppState, ThemeName };\n", "import { ProvidersOptions } from '../../../shared/contracts/admin';\nimport {\n  type RenewToken,\n  type Login,\n  type ResetPassword,\n  type RegisterAdmin,\n  type Register,\n  type RegistrationInfo,\n  ForgotPassword,\n} from '../../../shared/contracts/authentication';\nimport { Check } from '../../../shared/contracts/permissions';\nimport { GetProviders, IsSSOLocked } from '../../../shared/contracts/providers';\nimport { type GetOwnPermissions, type GetMe, type UpdateMe } from '../../../shared/contracts/users';\n\nimport { adminApi } from './api';\n\nconst authService = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['User', 'Me', 'ProvidersOptions'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      /**\n       * ME\n       */\n      getMe: builder.query<GetMe.Response['data'], void>({\n        query: () => ({\n          method: 'GET',\n          url: '/admin/users/me',\n        }),\n        transformResponse(res: GetMe.Response) {\n          return res.data;\n        },\n        providesTags: (res) => (res ? ['Me', { type: 'User', id: res.id }] : ['Me']),\n      }),\n      getMyPermissions: builder.query<GetOwnPermissions.Response['data'], void>({\n        query: () => ({\n          method: 'GET',\n          url: '/admin/users/me/permissions',\n        }),\n        transformResponse(res: GetOwnPermissions.Response) {\n          return res.data;\n        },\n      }),\n      updateMe: builder.mutation<UpdateMe.Response['data'], UpdateMe.Request['body']>({\n        query: (body) => ({\n          method: 'PUT',\n          url: '/admin/users/me',\n          data: body,\n        }),\n        transformResponse(res: UpdateMe.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['Me'],\n      }),\n      /**\n       * Permissions\n       */\n      checkPermissions: builder.query<Check.Response, Check.Request['body']>({\n        query: (permissions) => ({\n          method: 'POST',\n          url: '/admin/permissions/check',\n          data: permissions,\n        }),\n      }),\n      /**\n       * Auth methods\n       */\n      login: builder.mutation<Login.Response['data'], Login.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/login',\n          data: body,\n        }),\n        transformResponse(res: Login.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['Me'],\n      }),\n      logout: builder.mutation<void, void>({\n        query: () => ({\n          method: 'POST',\n          url: '/admin/logout',\n        }),\n      }),\n      resetPassword: builder.mutation<\n        ResetPassword.Response['data'],\n        ResetPassword.Request['body']\n      >({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/reset-password',\n          data: body,\n        }),\n        transformResponse(res: ResetPassword.Response) {\n          return res.data;\n        },\n      }),\n      renewToken: builder.mutation<RenewToken.Response['data'], RenewToken.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/renew-token',\n          data: body,\n        }),\n        transformResponse(res: RenewToken.Response) {\n          return res.data;\n        },\n      }),\n      getRegistrationInfo: builder.query<\n        RegistrationInfo.Response['data'],\n        RegistrationInfo.Request['query']['registrationToken']\n      >({\n        query: (registrationToken) => ({\n          url: '/admin/registration-info',\n          method: 'GET',\n          config: {\n            params: {\n              registrationToken,\n            },\n          },\n        }),\n        transformResponse(res: RegistrationInfo.Response) {\n          return res.data;\n        },\n      }),\n      registerAdmin: builder.mutation<\n        RegisterAdmin.Response['data'],\n        RegisterAdmin.Request['body']\n      >({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/register-admin',\n          data: body,\n        }),\n        transformResponse(res: RegisterAdmin.Response) {\n          return res.data;\n        },\n      }),\n      registerUser: builder.mutation<Register.Response['data'], Register.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/register',\n          data: body,\n        }),\n        transformResponse(res: Register.Response) {\n          return res.data;\n        },\n      }),\n      forgotPassword: builder.mutation<ForgotPassword.Response, ForgotPassword.Request['body']>({\n        query: (body) => ({\n          url: '/admin/forgot-password',\n          method: 'POST',\n          data: body,\n        }),\n      }),\n      isSSOLocked: builder.query<IsSSOLocked.Response['data'], void>({\n        query: () => ({\n          url: '/admin/providers/isSSOLocked',\n          method: 'GET',\n        }),\n        transformResponse(res: IsSSOLocked.Response) {\n          return res.data;\n        },\n      }),\n      getProviders: builder.query<GetProviders.Response, void>({\n        query: () => ({\n          url: '/admin/providers',\n          method: 'GET',\n        }),\n      }),\n      getProviderOptions: builder.query<ProvidersOptions.Response['data'], void>({\n        query: () => ({\n          url: '/admin/providers/options',\n          method: 'GET',\n        }),\n        transformResponse(res: ProvidersOptions.Response) {\n          return res.data;\n        },\n        providesTags: ['ProvidersOptions'],\n      }),\n      updateProviderOptions: builder.mutation<\n        ProvidersOptions.Response['data'],\n        ProvidersOptions.Request['body']\n      >({\n        query: (body) => ({\n          url: '/admin/providers/options',\n          method: 'PUT',\n          data: body,\n        }),\n        transformResponse(res: ProvidersOptions.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['ProvidersOptions'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useCheckPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useGetMeQuery,\n  useLoginMutation,\n  useRenewTokenMutation,\n  useLogoutMutation,\n  useUpdateMeMutation,\n  useResetPasswordMutation,\n  useRegisterAdminMutation,\n  useRegisterUserMutation,\n  useGetRegistrationInfoQuery,\n  useForgotPasswordMutation,\n  useGetMyPermissionsQuery,\n  useIsSSOLockedQuery,\n  useGetProvidersQuery,\n  useGetProviderOptionsQuery,\n  useUpdateProviderOptionsMutation,\n} = authService;\n\nexport {\n  useCheckPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useGetMeQuery,\n  useLoginMutation,\n  useRenewTokenMutation,\n  useLogoutMutation,\n  useUpdateMeMutation,\n  useResetPasswordMutation,\n  useRegisterAdminMutation,\n  useRegisterUserMutation,\n  useGetRegistrationInfoQuery,\n  useForgotPasswordMutation,\n  useGetMyPermissionsQuery,\n  useIsSSOLockedQuery,\n  useGetProvidersQuery,\n  useGetProviderOptionsQuery,\n  useUpdateProviderOptionsMutation,\n};\n", "import * as React from 'react';\n\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Login } from '../../../shared/contracts/authentication';\nimport { createContext } from '../components/Context';\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useStrapiApp } from '../features/StrapiApp';\nimport { useQueryParams } from '../hooks/useQueryParams';\nimport { login as loginAction, logout as logoutAction, setLocale } from '../reducer';\nimport { adminApi } from '../services/api';\nimport {\n  useGetMeQuery,\n  useGetMyPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useLoginMutation,\n  useLogoutMutation,\n  useRenewTokenMutation,\n} from '../services/auth';\n\nimport type {\n  Permission as PermissionContract,\n  SanitizedAdminUser,\n} from '../../../shared/contracts/shared';\n\ninterface Permission\n  extends Pick<PermissionContract, 'action' | 'subject'>,\n    Partial<Omit<PermissionContract, 'action' | 'subject'>> {}\n\ninterface User\n  extends Pick<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>,\n    Partial<Omit<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>> {}\n\ninterface AuthContextValue {\n  login: (\n    body: Login.Request['body'] & { rememberMe: boolean }\n  ) => Promise<Awaited<ReturnType<ReturnType<typeof useLoginMutation>[0]>>>;\n  logout: () => Promise<void>;\n  /**\n   * @alpha\n   * @description given a list of permissions, this function checks\n   * those against the current user's permissions or those passed as\n   * the second argument, if the user has those permissions the complete\n   * permission object form the API is returned. Therefore, if the list is\n   * empty, the user does not have any of those permissions.\n   */\n  checkUserHasPermissions: (\n    permissions?: Array<Pick<Permission, 'action'> & Partial<Omit<Permission, 'action'>>>,\n    passedPermissions?: Permission[],\n    rawQueryContext?: string\n  ) => Promise<Permission[]>;\n  isLoading: boolean;\n  permissions: Permission[];\n  refetchPermissions: () => Promise<void>;\n  token: string | null;\n  user?: User;\n}\n\nconst [Provider, useAuth] = createContext<AuthContextValue>('Auth');\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n  /**\n   * @internal could be removed at any time.\n   */\n  _defaultPermissions?: Permission[];\n\n  // NOTE: this is used for testing purposed only\n  _disableRenewToken?: boolean;\n}\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  STATUS: 'isLoggedIn',\n};\n\nconst AuthProvider = ({\n  children,\n  _defaultPermissions = [],\n  _disableRenewToken = false,\n}: AuthProviderProps) => {\n  const dispatch = useTypedDispatch();\n  const runRbacMiddleware = useStrapiApp('AuthProvider', (state) => state.rbac.run);\n  const location = useLocation();\n  const [{ rawQuery }] = useQueryParams();\n\n  const locationRef = React.useRef(location);\n\n  // Update ref without causing re-render\n  React.useEffect(() => {\n    locationRef.current = location;\n  }, [location]);\n\n  const token = useTypedSelector((state) => state.admin_app.token ?? null);\n\n  const { data: user, isLoading: isLoadingUser } = useGetMeQuery(undefined, {\n    /**\n     * If there's no token, we don't try to fetch\n     * the user data because it will fail.\n     */\n    skip: !token,\n  });\n\n  const {\n    data: userPermissions = _defaultPermissions,\n    refetch,\n    isUninitialized,\n    isLoading: isLoadingPermissions,\n  } = useGetMyPermissionsQuery(undefined, {\n    skip: !token,\n  });\n\n  const navigate = useNavigate();\n\n  const [loginMutation] = useLoginMutation();\n  const [renewTokenMutation] = useRenewTokenMutation();\n  const [logoutMutation] = useLogoutMutation();\n\n  const clearStateAndLogout = React.useCallback(() => {\n    dispatch(adminApi.util.resetApiState());\n    dispatch(logoutAction());\n    navigate('/auth/login');\n  }, [dispatch, navigate]);\n\n  /**\n   * Fetch data from storages on mount and store it in our state.\n   * It's not normally stored in session storage unless the user\n   * does click \"remember me\" when they login. We also need to renew the token.\n   */\n  React.useEffect(() => {\n    if (token && !_disableRenewToken) {\n      renewTokenMutation({ token }).then((res) => {\n        if ('data' in res) {\n          dispatch(\n            loginAction({\n              token: res.data.token,\n            })\n          );\n        } else {\n          clearStateAndLogout();\n        }\n      });\n    }\n  }, [token, dispatch, renewTokenMutation, clearStateAndLogout, _disableRenewToken]);\n\n  React.useEffect(() => {\n    if (user) {\n      if (user.preferedLanguage) {\n        dispatch(setLocale(user.preferedLanguage));\n      }\n    }\n  }, [dispatch, user]);\n\n  React.useEffect(() => {\n    /**\n     * This will log a user out of all tabs if they log out in one tab.\n     */\n    const handleUserStorageChange = (event: StorageEvent) => {\n      if (event.key === STORAGE_KEYS.STATUS && event.newValue === null) {\n        clearStateAndLogout();\n      }\n    };\n\n    window.addEventListener('storage', handleUserStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleUserStorageChange);\n    };\n  });\n\n  const login = React.useCallback<AuthContextValue['login']>(\n    async ({ rememberMe, ...body }) => {\n      const res = await loginMutation(body);\n\n      /**\n       * There will always be a `data` key in the response\n       * because if something fails, it will throw an error.\n       */\n      if ('data' in res) {\n        const { token } = res.data;\n\n        dispatch(\n          loginAction({\n            token,\n            persist: rememberMe,\n          })\n        );\n      }\n\n      return res;\n    },\n    [dispatch, loginMutation]\n  );\n\n  const logout = React.useCallback(async () => {\n    await logoutMutation();\n    clearStateAndLogout();\n  }, [clearStateAndLogout, logoutMutation]);\n\n  const refetchPermissions = React.useCallback(async () => {\n    if (!isUninitialized) {\n      await refetch();\n    }\n  }, [isUninitialized, refetch]);\n\n  const [checkPermissions] = useLazyCheckPermissionsQuery();\n  const checkUserHasPermissions: AuthContextValue['checkUserHasPermissions'] = React.useCallback(\n    async (\n      permissions,\n      passedPermissions,\n      // TODO:\n      // Here we have parameterised checkUserHasPermissions in order to pass\n      // query context from elsewhere in the application.\n      // See packages/core/content-manager/admin/src/features/DocumentRBAC.tsx\n\n      // This is in order to calculate permissions on accurate query params.\n      // We should be able to rely on the query params in this provider\n      // If we need to pass additional context to the RBAC middleware\n      // we should define a better context type.\n      rawQueryContext\n    ) => {\n      /**\n       * If there's no permissions to check, then we allow it to\n       * pass to preserve existing behaviours.\n       *\n       * TODO: should we review this? it feels more dangerous than useful.\n       */\n      if (!permissions || permissions.length === 0) {\n        return [{ action: '', subject: '' }];\n      }\n\n      /**\n       * Given the provided permissions, return the permissions from either passedPermissions\n       * or userPermissions as this is expected to be the full permission entity.\n       */\n      const actualUserPermissions = passedPermissions ?? userPermissions;\n\n      const matchingPermissions = actualUserPermissions.filter(\n        (permission) =>\n          permissions.findIndex(\n            (perm) =>\n              perm.action === permission.action &&\n              // Only check the subject if it's provided\n              (perm.subject == undefined || perm.subject === permission.subject)\n          ) >= 0\n      );\n\n      const middlewaredPermissions = await runRbacMiddleware(\n        {\n          user,\n          permissions: userPermissions,\n          pathname: locationRef.current.pathname,\n          search: (rawQueryContext || rawQuery).split('?')[1] ?? '',\n        },\n        matchingPermissions\n      );\n\n      const shouldCheckConditions = middlewaredPermissions.some(\n        (perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0\n      );\n\n      if (!shouldCheckConditions) {\n        return middlewaredPermissions;\n      }\n\n      const { data, error } = await checkPermissions({\n        permissions: middlewaredPermissions.map((perm) => ({\n          action: perm.action,\n          subject: perm.subject,\n        })),\n      });\n\n      if (error) {\n        throw error;\n      } else {\n        return middlewaredPermissions.filter((_, index) => data?.data[index] === true);\n      }\n    },\n    [checkPermissions, rawQuery, runRbacMiddleware, user, userPermissions]\n  );\n\n  const isLoading = isLoadingUser || isLoadingPermissions;\n\n  return (\n    <Provider\n      token={token}\n      user={user}\n      login={login}\n      logout={logout}\n      permissions={userPermissions}\n      checkUserHasPermissions={checkUserHasPermissions}\n      refetchPermissions={refetchPermissions}\n      isLoading={isLoading}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport { AuthProvider, useAuth, STORAGE_KEYS };\nexport type { AuthContextValue, Permission, User };\n"],
  "mappings": "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",
  "names": ["STORAGE_KEYS", "login", "token", "logout"]
}
