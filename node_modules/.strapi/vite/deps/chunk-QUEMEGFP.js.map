{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/hooks/useLicenseLimits.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useGetLicenseLimitsQuery } from '../../../../admin/src/services/admin';\nimport { GetLicenseLimitInformation } from '../../../../shared/contracts/admin';\n\ninterface UseLicenseLimitsArgs {\n  enabled?: boolean;\n}\n\nfunction useLicenseLimits({ enabled }: UseLicenseLimitsArgs = { enabled: true }) {\n  const { data, isError, isLoading } = useGetLicenseLimitsQuery(undefined, {\n    skip: !enabled,\n  });\n\n  type FeatureNames = GetLicenseLimitInformation.Response['data']['features'][number]['name'];\n\n  type GetFeatureType = <T>(name: FeatureNames) => Record<string, T> | undefined;\n\n  const getFeature = React.useCallback<GetFeatureType>(\n    (name) => {\n      const feature = data?.data?.features.find((feature) => feature.name === name);\n\n      if (feature && 'options' in feature) {\n        return feature.options;\n      } else {\n        return {};\n      }\n    },\n    [data]\n  );\n\n  return {\n    license: data?.data,\n    getFeature,\n    isError,\n    isLoading,\n    isTrial: data?.data?.isTrial ?? false,\n  };\n}\n\nexport { useLicenseLimits };\nexport type { UseLicenseLimitsArgs };\n"],
  "mappings": ";;;;;;;;;;;AAAA,YAAuB;AASvB,SAAS,iBAAiB,EAAE,QAAQ,IAA0B,EAAE,SAAS,KAAK,GAAG;AATjF;AAUE,QAAM,EAAE,MAAM,SAAS,UAAU,IAAI,yBAAyB,QAAW;AAAA,IACvE,MAAM,CAAC;AAAA,EACT,CAAC;AAMD,QAAM,aAAmB;AAAA,IACvB,CAAC,SAAS;AAnBd,UAAAA;AAoBM,YAAM,WAAUA,MAAA,6BAAM,SAAN,gBAAAA,IAAY,SAAS,KAAK,CAACC,aAAYA,SAAQ,SAAS;AAExE,UAAI,WAAW,aAAa,SAAS;AACnC,eAAO,QAAQ;AAAA,MACjB,OAAO;AACL,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AAAA,IACA,CAAC,IAAI;AAAA,EACP;AAEA,SAAO;AAAA,IACL,SAAS,6BAAM;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAS,kCAAM,SAAN,mBAAY,YAAW;AAAA,EAClC;AACF;",
  "names": ["_a", "feature"]
}
