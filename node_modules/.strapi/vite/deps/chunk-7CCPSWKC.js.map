{
  "version": 3,
  "sources": ["../../../../../packages/core/review-workflows/admin/src/utils/users.ts", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/components/TableColumns.tsx"],
  "sourcesContent": ["import type { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\n\n/**\n * Retrieves the display name of an admin panel user\n */\nconst getDisplayName = ({\n  firstname,\n  lastname,\n  username,\n  email,\n}: Partial<\n  Pick<SanitizedAdminUser, 'firstname' | 'lastname' | 'username' | 'email'>\n> = {}): string => {\n  if (username) {\n    return username;\n  }\n\n  // firstname is not required if the user is created with a username\n  if (firstname) {\n    return `${firstname} ${lastname ?? ''}`.trim();\n  }\n\n  return email ?? '';\n};\n\nexport { getDisplayName };\n", "import { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, Typography } from '@strapi/design-system';\n\nimport { STAGE_COLOR_DEFAULT } from '../../../../constants';\nimport { getStageColorByHex } from '../../../../utils/colors';\nimport { getDisplayName } from '../../../../utils/users';\n\ninterface StageColumnProps {\n  documentId?: string;\n  id?: number;\n  strapi_stage?: {\n    color?: string;\n    name: string;\n  };\n}\n\nconst StageColumn = (props: StageColumnProps) => {\n  const { color = STAGE_COLOR_DEFAULT, name } = props.strapi_stage ?? {};\n  const { themeColorName } = getStageColorByHex(color) ?? {};\n\n  return (\n    <Flex alignItems=\"center\" gap={2} maxWidth=\"30rem\">\n      <Box\n        height={2}\n        background={color}\n        borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n        hasRadius\n        shrink={0}\n        width={2}\n      />\n\n      <Typography fontWeight=\"regular\" textColor=\"neutral700\" ellipsis>\n        {name}\n      </Typography>\n    </Flex>\n  );\n};\n\ninterface AssigneeColumnProps {\n  documentId?: string;\n  id?: number;\n  strapi_assignee?: Pick<\n    SanitizedAdminUser,\n    'firstname' | 'lastname' | 'username' | 'email'\n  > | null;\n}\n\nconst AssigneeColumn = (props: AssigneeColumnProps) => {\n  const { strapi_assignee: user } = props;\n  return <Typography textColor=\"neutral800\">{user ? getDisplayName(user) : '-'}</Typography>;\n};\n\nexport { StageColumn, AssigneeColumn };\nexport type { StageColumnProps, AssigneeColumnProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAKA,IAAM,iBAAiB,CAAC;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAEI,CAAC,MAAc;AACjB,MAAI,UAAU;AACZ,WAAO;AAAA,EACT;AAGA,MAAI,WAAW;AACb,WAAO,GAAG,SAAS,IAAI,YAAY,EAAE,GAAG,KAAK;AAAA,EAC/C;AAEA,SAAO,SAAS;AAClB;;;ACFI;AALJ,IAAM,cAAc,CAAC,UAA4B;AAC/C,QAAM,EAAE,QAAQ,qBAAqB,KAAK,IAAI,MAAM,gBAAgB,CAAC;AACrE,QAAM,EAAE,eAAe,IAAI,mBAAmB,KAAK,KAAK,CAAC;AAEzD,aACE,yBAAC,QAAK,YAAW,UAAS,KAAK,GAAG,UAAS,SACzC;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,aAAa,mBAAmB,aAAa,eAAe;AAAA,QAC5D,WAAS;AAAA,QACT,QAAQ;AAAA,QACR,OAAO;AAAA;AAAA,IACT;AAAA,QAEA,wBAAC,cAAW,YAAW,WAAU,WAAU,cAAa,UAAQ,MAC7D,gBACH;AAAA,KACF;AAEJ;AAWA,IAAM,iBAAiB,CAAC,UAA+B;AACrD,QAAM,EAAE,iBAAiB,KAAK,IAAI;AAClC,aAAO,wBAAC,cAAW,WAAU,cAAc,iBAAO,eAAe,IAAI,IAAI,KAAI;AAC/E;",
  "names": []
}
