import {
  PERMISSIONS,
  getTrad
} from "./chunk-T6YJK32F.js";
import "./chunk-4JEMFY4B.js";
import {
  useMutation,
  useQuery
} from "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import {
  useFetchClient
} from "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import "./chunk-GJKFT6EX.js";
import "./chunk-HP6PMHBS.js";
import "./chunk-QP5S5OPY.js";
import "./chunk-LVJ5LIPC.js";
import "./chunk-6VU4ULW6.js";
import {
  require_set
} from "./chunk-SG5GK5UT.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import {
  require_isEqual
} from "./chunk-KYOQACZ3.js";
import {
  Page
} from "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import {
  useNotification
} from "./chunk-5BKV6XT7.js";
import "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import {
  fn
} from "./chunk-SPCPB6JM.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Toggle,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$4N
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/upload/admin/src/pages/SettingsPage/SettingsPage.tsx
var React = __toESM(require_react());
var import_isEqual = __toESM(require_isEqual());

// ../packages/core/upload/admin/src/pages/SettingsPage/init.ts
var init = (initialState2) => {
  return initialState2;
};

// ../packages/core/upload/admin/src/pages/SettingsPage/reducer.ts
var import_set = __toESM(require_set());
var initialState = {
  initialData: {
    responsiveDimensions: true,
    sizeOptimization: true,
    autoOrientation: false,
    videoPreview: false
  },
  modifiedData: {
    responsiveDimensions: true,
    sizeOptimization: true,
    autoOrientation: false,
    videoPreview: false
  }
};
var reducer = (state, action) => fn(state, (drafState) => {
  switch (action.type) {
    case "GET_DATA_SUCCEEDED": {
      drafState.initialData = action.data;
      drafState.modifiedData = action.data;
      break;
    }
    case "ON_CHANGE": {
      (0, import_set.default)(drafState, ["modifiedData", ...action.keys.split(".")], action.value);
      break;
    }
    default:
      return state;
  }
});

// ../packages/core/upload/admin/src/pages/SettingsPage/SettingsPage.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var SettingsPage = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { get, put } = useFetchClient();
  const [{ initialData, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);
  const { data, isLoading, refetch } = useQuery({
    queryKey: ["upload", "settings"],
    async queryFn() {
      const {
        data: { data: data2 }
      } = await get("/upload/settings");
      return data2;
    }
  });
  React.useEffect(() => {
    if (data) {
      dispatch({
        type: "GET_DATA_SUCCEEDED",
        data
      });
    }
  }, [data]);
  const isSaveButtonDisabled = (0, import_isEqual.default)(initialData, modifiedData);
  const { mutateAsync, isLoading: isSubmitting } = useMutation(
    async (body) => {
      const { data: data2 } = await put("/upload/settings", body);
      return data2;
    },
    {
      onSuccess() {
        refetch();
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "notification.form.success.fields" })
        });
      },
      onError(err) {
        console.error(err);
      }
    }
  );
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSaveButtonDisabled) {
      return;
    }
    await mutateAsync(modifiedData);
  };
  const handleChange = ({
    target: { name, value }
  }) => {
    dispatch({
      type: "ON_CHANGE",
      keys: name,
      value
    });
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, { tabIndex: -1, children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage({
      id: getTrad("page.title"),
      defaultMessage: "Settings - Media Libray"
    }) }),
    (0, import_jsx_runtime.jsxs)("form", { onSubmit: handleSubmit, children: [
      (0, import_jsx_runtime.jsx)(
        Layouts.Header,
        {
          title: formatMessage({
            id: getTrad("settings.header.label"),
            defaultMessage: "Media Library"
          }),
          primaryAction: (0, import_jsx_runtime.jsx)(
            Button,
            {
              disabled: isSaveButtonDisabled,
              loading: isSubmitting,
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
              size: "S",
              children: formatMessage({
                id: "global.save",
                defaultMessage: "Save"
              })
            }
          ),
          subtitle: formatMessage({
            id: getTrad("settings.sub-header.label"),
            defaultMessage: "Configure the settings for the Media Library"
          })
        }
      ),
      (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (0, import_jsx_runtime.jsx)(Layouts.Root, { children: (0, import_jsx_runtime.jsx)(Flex, { direction: "column", alignItems: "stretch", gap: 12, children: (0, import_jsx_runtime.jsx)(Box, { background: "neutral0", padding: 6, shadow: "filterShadow", hasRadius: true, children: (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 4, children: [
        (0, import_jsx_runtime.jsx)(Flex, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h2", children: formatMessage({
          id: getTrad("settings.blockTitle"),
          defaultMessage: "Asset management"
        }) }) }),
        (0, import_jsx_runtime.jsxs)(Grid.Root, { gap: 6, children: [
          (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
            Field.Root,
            {
              hint: formatMessage({
                id: getTrad("settings.form.responsiveDimensions.description"),
                defaultMessage: "Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset."
              }),
              name: "responsiveDimensions",
              children: [
                (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
                  id: getTrad("settings.form.responsiveDimensions.label"),
                  defaultMessage: "Responsive friendly upload"
                }) }),
                (0, import_jsx_runtime.jsx)(
                  Toggle,
                  {
                    checked: modifiedData == null ? void 0 : modifiedData.responsiveDimensions,
                    offLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.off-label",
                      defaultMessage: "Off"
                    }),
                    onLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.on-label",
                      defaultMessage: "On"
                    }),
                    onChange: (e) => {
                      handleChange({
                        target: { name: "responsiveDimensions", value: e.target.checked }
                      });
                    }
                  }
                ),
                (0, import_jsx_runtime.jsx)(Field.Hint, {})
              ]
            }
          ) }),
          (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
            Field.Root,
            {
              hint: formatMessage({
                id: getTrad("settings.form.sizeOptimization.description"),
                defaultMessage: "Enabling this option will reduce the image size and slightly reduce its quality."
              }),
              name: "sizeOptimization",
              children: [
                (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
                  id: getTrad("settings.form.sizeOptimization.label"),
                  defaultMessage: "Size optimization"
                }) }),
                (0, import_jsx_runtime.jsx)(
                  Toggle,
                  {
                    checked: modifiedData == null ? void 0 : modifiedData.sizeOptimization,
                    offLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.off-label",
                      defaultMessage: "Off"
                    }),
                    onLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.on-label",
                      defaultMessage: "On"
                    }),
                    onChange: (e) => {
                      handleChange({
                        target: { name: "sizeOptimization", value: e.target.checked }
                      });
                    }
                  }
                ),
                (0, import_jsx_runtime.jsx)(Field.Hint, {})
              ]
            }
          ) }),
          (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
            Field.Root,
            {
              hint: formatMessage({
                id: getTrad("settings.form.autoOrientation.description"),
                defaultMessage: "Enabling this option will automatically rotate the image according to EXIF orientation tag."
              }),
              name: "autoOrientation",
              children: [
                (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
                  id: getTrad("settings.form.autoOrientation.label"),
                  defaultMessage: "Auto orientation"
                }) }),
                (0, import_jsx_runtime.jsx)(
                  Toggle,
                  {
                    checked: modifiedData == null ? void 0 : modifiedData.autoOrientation,
                    offLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.off-label",
                      defaultMessage: "Off"
                    }),
                    onLabel: formatMessage({
                      id: "app.components.ToggleCheckbox.on-label",
                      defaultMessage: "On"
                    }),
                    onChange: (e) => {
                      handleChange({
                        target: { name: "autoOrientation", value: e.target.checked }
                      });
                    }
                  }
                ),
                (0, import_jsx_runtime.jsx)(Field.Hint, {})
              ]
            }
          ) })
        ] })
      ] }) }) }) }) })
    ] })
  ] });
};
var ProtectedSettingsPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, { permissions: PERMISSIONS.settings, children: (0, import_jsx_runtime.jsx)(SettingsPage, {}) });
export {
  ProtectedSettingsPage,
  SettingsPage
};
//# sourceMappingURL=SettingsPage-JO56KE3N.js.map
