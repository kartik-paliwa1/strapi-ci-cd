{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/Fields.tsx", "../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/EditFieldForm.tsx", "../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/Form.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useDroppable, DndContext, UniqueIdentifier, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useField, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Modal,\n  Box,\n  Flex,\n  Grid,\n  IconButton,\n  IconButtonComponent,\n  Typography,\n  Link,\n  Menu,\n} from '@strapi/design-system';\nimport { Cog, Cross, Drag, Pencil, Plus } from '@strapi/icons';\nimport { generateNKeysBetween as generateNKeysBetweenImpl } from 'fractional-indexing';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../../utils/translations';\nimport { ComponentIcon } from '../ComponentIcon';\n\nimport { EditFieldForm, EditFieldFormProps } from './EditFieldForm';\n\nimport type { ConfigurationFormData, EditFieldSpacerLayout } from './Form';\nimport type { EditLayout } from '../../hooks/useDocumentLayout';\n\ntype FormField = ConfigurationFormData['layout'][number]['children'][number];\ntype Field = Omit<ConfigurationFormData['layout'][number]['children'][number], '__temp_key__'>;\n\nconst GRID_COLUMNS = 12;\n\n/* -------------------------------------------------------------------------------------------------\n * Drag and Drop\n * -----------------------------------------------------------------------------------------------*/\n\nconst DroppableContainer = ({\n  id,\n  children,\n}: {\n  id: string;\n  children: (props: ReturnType<typeof useDroppable>) => React.ReactNode;\n}) => {\n  const droppable = useDroppable({\n    id,\n  });\n\n  return children(droppable);\n};\n\nexport const SortableItem = ({ id, children }: { id: string; children: React.ReactNode }) => {\n  const { attributes, setNodeRef, transform, transition } = useSortable({\n    id,\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    height: '100%',\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes}>\n      {children}\n    </div>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Fields\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldsProps extends Pick<EditLayout, 'metadatas'>, Pick<FieldProps, 'components'> {\n  attributes: {\n    [key: string]: FieldProps['attribute'];\n  };\n  fieldSizes: Record<string, number>;\n  components: EditLayout['components'];\n}\n\n/**\n * Compute uids and formName for drag and drop items for the incoming layout\n */\nconst createDragAndDropContainersFromLayout = (layout: ConfigurationFormData['layout']) => {\n  return layout.map((row, containerIndex) => ({\n    ...row,\n    // Use unique ids for drag and drop items\n    dndId: `container-${containerIndex}`,\n    children: row.children.map((child, childIndex) => ({\n      ...child,\n      dndId: `container-${containerIndex}-child-${childIndex}`,\n\n      // The formName must be recomputed each time an item is moved\n      formName: `layout.${containerIndex}.children.${childIndex}`,\n    })),\n  }));\n};\n\nconst Fields = ({ attributes, fieldSizes, components, metadatas = {} }: FieldsProps) => {\n  const { formatMessage } = useIntl();\n\n  const layout = useForm<ConfigurationFormData['layout']>(\n    'Fields',\n    (state) => state.values.layout ?? []\n  );\n\n  const onChange = useForm('Fields', (state) => state.onChange);\n  const addFieldRow = useForm('Fields', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('Fields', (state) => state.removeFieldRow);\n\n  const existingFields = layout.map((row) => row.children.map((field) => field.name)).flat();\n\n  /**\n   * Get the fields that are not already in the layout\n   * But also check that they are visible before we give users\n   * the option to display them. e.g. `id` is not visible.\n   */\n  const remainingFields = Object.entries(metadatas).reduce<Field[]>((acc, current) => {\n    const [name, { visible, ...field }] = current;\n\n    if (!existingFields.includes(name) && visible === true) {\n      const type = attributes[name]?.type;\n      const size = type ? fieldSizes[type] : GRID_COLUMNS;\n\n      acc.push({\n        ...field,\n        label: field.label ?? name,\n        name,\n        size,\n      });\n    }\n\n    return acc;\n  }, []);\n\n  const handleRemoveField =\n    (rowIndex: number, fieldIndex: number): FieldProps['onRemoveField'] =>\n    () => {\n      if (layout[rowIndex].children.length === 1) {\n        removeFieldRow(`layout`, rowIndex);\n      } else {\n        onChange(`layout.${rowIndex}.children`, [\n          ...layout[rowIndex].children.slice(0, fieldIndex),\n          ...layout[rowIndex].children.slice(fieldIndex + 1),\n        ]);\n      }\n    };\n\n  const handleAddField = (field: Field) => () => {\n    addFieldRow('layout', { children: [field] });\n  };\n\n  const [containers, setContainers] = React.useState(() =>\n    createDragAndDropContainersFromLayout(layout)\n  );\n  type Container = (typeof containers)[number];\n  const [activeDragItem, setActiveDragItem] = React.useState<Container['children'][number] | null>(\n    null\n  );\n\n  /**\n   * Finds either the parent container id or the child id within a container\n   */\n  function findContainer(id: UniqueIdentifier, containersAsDictionary: Record<string, Container>) {\n    // If the id is a key, then it is the parent container\n    if (id in containersAsDictionary) {\n      return id;\n    }\n\n    // Otherwise, it is a child inside a container\n    return Object.keys(containersAsDictionary).find((key) =>\n      containersAsDictionary[key].children.find((child) => child.dndId === id)\n    );\n  }\n\n  /**\n   * Gets an item from a container based on its id\n   */\n  const getItemFromContainer = (id: UniqueIdentifier, container: Container) => {\n    return container.children.find((item) => id === item.dndId);\n  };\n\n  /**\n   * Gets the containers as dictionary for quick lookup\n   */\n  const getContainersAsDictionary = () => {\n    return Object.fromEntries(containers.map((container) => [container.dndId, container]));\n  };\n\n  /**\n   * Recomputes the empty space in the grid\n   */\n  const createContainersWithSpacers = (layout: typeof containers) => {\n    return layout\n      .map((row) => ({\n        ...row,\n        children: row.children.filter((field) => field.name !== TEMP_FIELD_NAME),\n      }))\n      .filter((row) => row.children.length > 0)\n      .map((row) => {\n        const totalSpaceTaken = row.children.reduce((acc, curr) => acc + curr.size, 0);\n\n        if (totalSpaceTaken < GRID_COLUMNS) {\n          const [spacerKey] = generateNKeysBetweenImpl(\n            row.children.at(-1)?.__temp_key__,\n            undefined,\n            1\n          );\n\n          return {\n            ...row,\n            children: [\n              ...row.children,\n              {\n                name: TEMP_FIELD_NAME,\n                size: GRID_COLUMNS - totalSpaceTaken,\n                __temp_key__: spacerKey,\n              } satisfies EditFieldSpacerLayout,\n            ],\n          };\n        }\n\n        return row;\n      });\n  };\n\n  /**\n   * When layout changes (e.g. when a field size is changed or the containers are reordered)\n   * we need to update the ids and form names\n   */\n  React.useEffect(() => {\n    const containers = createDragAndDropContainersFromLayout(layout);\n    setContainers(containers);\n  }, [layout, setContainers]);\n\n  return (\n    <DndContext\n      onDragStart={(event) => {\n        const containersAsDictionary = getContainersAsDictionary();\n\n        const activeContainer = findContainer(event.active.id, containersAsDictionary);\n\n        if (!activeContainer) return;\n\n        const activeItem = getItemFromContainer(\n          event.active.id,\n          containersAsDictionary[activeContainer]\n        );\n\n        if (activeItem) {\n          setActiveDragItem(activeItem);\n        }\n      }}\n      onDragOver={({ active, over }) => {\n        const containersAsDictionary = getContainersAsDictionary();\n        const activeContainer = findContainer(active.id, containersAsDictionary);\n        const overContainer = findContainer(over?.id ?? '', containersAsDictionary);\n        const activeContainerIndex = containers.findIndex(\n          (container) => container.dndId === activeContainer\n        );\n        const overContainerIndex = containers.findIndex(\n          (container) => container.dndId === overContainer\n        );\n\n        if (!activeContainer || !overContainer) {\n          return;\n        }\n\n        const draggedItem = getItemFromContainer(\n          active.id,\n          containersAsDictionary[activeContainer]\n        );\n        const overItem = getItemFromContainer(\n          over?.id ?? '',\n          containersAsDictionary[overContainer]\n        );\n        const overIndex = containersAsDictionary[overContainer].children.findIndex(\n          (item) => item.dndId === over?.id\n        );\n\n        if (!draggedItem) return;\n\n        // Handle a full width field being dragged\n        if (draggedItem?.size === GRID_COLUMNS) {\n          // Swap the items in the containers\n          const update = produce(containers, (draft) => {\n            draft[activeContainerIndex].children = containers[overContainerIndex].children;\n            draft[overContainerIndex].children = containers[activeContainerIndex].children;\n          });\n          setContainers(update);\n          return;\n        }\n\n        /**\n         * Handle an item being dragged from one container to another,\n         * the item is removed from its current container, and then added to its new container\n         * An item can only be added in a container if there is enough space.\n         */\n        const update = produce(containers, (draft) => {\n          draft[activeContainerIndex].children = draft[activeContainerIndex].children.filter(\n            (item) => item.dndId !== active.id\n          );\n          const spaceTaken = draft[overContainerIndex].children.reduce((acc, curr) => {\n            if (curr.name === TEMP_FIELD_NAME) {\n              return acc;\n            }\n\n            return acc + curr.size;\n          }, 0);\n\n          // Check the sizes of the children, if there is no room, exit\n          if (spaceTaken + draggedItem.size > GRID_COLUMNS) {\n            // Leave the item where it started\n            draft[activeContainerIndex].children = containers[activeContainerIndex].children;\n            return;\n          }\n\n          if (overItem?.name === TEMP_FIELD_NAME) {\n            // We are over an invisible spacer, replace it with the dragged item\n            draft[overContainerIndex].children.splice(overIndex, 1, draggedItem);\n            return;\n          }\n\n          // There is room for the item in the container, drop it\n          draft[overContainerIndex].children.splice(overIndex, 0, draggedItem);\n        });\n\n        setContainers(update);\n      }}\n      onDragEnd={(event) => {\n        const { active, over } = event;\n        const { id } = active;\n        const overId = over?.id;\n        const containersAsDictionary = getContainersAsDictionary();\n        const activeContainer = findContainer(id, containersAsDictionary);\n        const overContainer = findContainer(overId!, containersAsDictionary);\n\n        if (!activeContainer || !overContainer) {\n          return;\n        }\n\n        const activeIndex = containersAsDictionary[activeContainer].children.findIndex(\n          (children) => children.dndId === id\n        );\n        const overIndex = containersAsDictionary[overContainer].children.findIndex(\n          (children) => children.dndId === overId\n        );\n\n        const movedContainerItems = produce(containersAsDictionary, (draft) => {\n          if (activeIndex !== overIndex && activeContainer === overContainer) {\n            // Move items around inside their own container\n            draft[activeContainer].children = arrayMove(\n              draft[activeContainer].children,\n              activeIndex,\n              overIndex\n            );\n          }\n        });\n\n        // Remove properties the server does not expect before updating the form\n        const updatedContainers = Object.values(movedContainerItems);\n        const updatedContainersWithSpacers = createContainersWithSpacers(\n          updatedContainers\n        ) as typeof containers;\n        const updatedLayout = updatedContainersWithSpacers.map(\n          ({ dndId: _dndId, children, ...container }) => ({\n            ...container,\n            children: children.map(({ dndId: _dndId, formName: _formName, ...child }) => child),\n          })\n        );\n\n        // Update the layout\n        onChange('layout', updatedLayout);\n        setActiveDragItem(null);\n      }}\n    >\n      <Flex paddingTop={6} direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex alignItems=\"flex-start\" direction=\"column\" justifyContent=\"space-between\">\n          <Typography fontWeight=\"bold\">\n            {formatMessage({\n              id: getTranslation('containers.list.displayedFields'),\n              defaultMessage: 'Displayed fields',\n            })}\n          </Typography>\n          <Typography variant=\"pi\" textColor=\"neutral600\">\n            {formatMessage({\n              id: 'containers.SettingPage.editSettings.description',\n              defaultMessage: 'Drag & drop the fields to build the layout',\n            })}\n          </Typography>\n        </Flex>\n        <Box padding={4} hasRadius borderStyle=\"dashed\" borderWidth=\"1px\" borderColor=\"neutral300\">\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            {containers.map((container, containerIndex) => (\n              <SortableContext\n                key={container.dndId}\n                id={container.dndId}\n                items={container.children.map((child) => ({ id: child.dndId }))}\n              >\n                <DroppableContainer id={container.dndId}>\n                  {({ setNodeRef }) => (\n                    <Grid.Root key={container.dndId} ref={setNodeRef} gap={2}>\n                      {container.children.map((child, childIndex) => (\n                        <Grid.Item\n                          col={child.size}\n                          key={child.dndId}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <SortableItem id={child.dndId}>\n                            <Field\n                              attribute={attributes[child.name]}\n                              components={components}\n                              name={child.formName}\n                              onRemoveField={handleRemoveField(containerIndex, childIndex)}\n                              dndId={child.dndId}\n                            />\n                          </SortableItem>\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  )}\n                </DroppableContainer>\n              </SortableContext>\n            ))}\n            <DragOverlay>\n              {activeDragItem ? (\n                <Field\n                  attribute={attributes[activeDragItem.name]}\n                  components={components}\n                  name={activeDragItem.formName}\n                  dndId={activeDragItem.dndId}\n                />\n              ) : null}\n            </DragOverlay>\n            <Menu.Root>\n              <Menu.Trigger\n                startIcon={<Plus />}\n                endIcon={null}\n                disabled={remainingFields.length === 0}\n                fullWidth\n                variant=\"secondary\"\n              >\n                {formatMessage({\n                  id: getTranslation('containers.SettingPage.add.field'),\n                  defaultMessage: 'Insert another field',\n                })}\n              </Menu.Trigger>\n              <Menu.Content>\n                {remainingFields.map((field) => (\n                  <Menu.Item key={field.name} onSelect={handleAddField(field)}>\n                    {field.label}\n                  </Menu.Item>\n                ))}\n              </Menu.Content>\n            </Menu.Root>\n          </Flex>\n        </Box>\n      </Flex>\n    </DndContext>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldProps extends Pick<EditFieldFormProps, 'name' | 'attribute'> {\n  components: EditLayout['components'];\n  dndId: string;\n  onRemoveField?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nconst TEMP_FIELD_NAME = '_TEMP_';\n\n/**\n * Displays a field in the layout with drag options, also\n * opens a modal  to edit the details of said field.\n */\nconst Field = ({ attribute, components, name, onRemoveField, dndId }: FieldProps) => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n  const { value } = useField<FormField>(name);\n  const { listeners, setActivatorNodeRef } = useSortable({\n    id: dndId,\n  });\n\n  const handleRemoveField: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (onRemoveField) {\n      onRemoveField?.(e);\n    }\n  };\n\n  const onEditFieldMeta: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsModalOpen(true);\n  };\n\n  if (!value) {\n    return null;\n  }\n\n  if (value.name === TEMP_FIELD_NAME) {\n    return <Flex tag=\"span\" height=\"100%\" style={{ opacity: 0 }} />;\n  }\n\n  if (!attribute) {\n    return null;\n  }\n\n  return (\n    <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\n      <Flex\n        borderColor=\"neutral150\"\n        background=\"neutral100\"\n        hasRadius\n        gap={3}\n        cursor=\"pointer\"\n        onClick={() => {\n          setIsModalOpen(true);\n        }}\n      >\n        <DragButton\n          ref={setActivatorNodeRef}\n          tag=\"span\"\n          withTooltip={false}\n          label={formatMessage(\n            {\n              id: getTranslation('components.DraggableCard.move.field'),\n              defaultMessage: 'Move {item}',\n            },\n            { item: value.label }\n          )}\n          {...listeners}\n        >\n          <Drag />\n        </DragButton>\n        <Flex direction=\"column\" alignItems=\"flex-start\" grow={1} overflow=\"hidden\">\n          <Flex gap={3} justifyContent=\"space-between\" width=\"100%\">\n            <Typography ellipsis fontWeight=\"bold\">\n              {value.label}\n            </Typography>\n            <Flex>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                background=\"transparent\"\n                onClick={onEditFieldMeta}\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.edit.field'),\n                    defaultMessage: 'Edit {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Pencil />\n              </IconButton>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={handleRemoveField}\n                background=\"transparent\"\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.delete.field'),\n                    defaultMessage: 'Delete {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Cross />\n              </IconButton>\n            </Flex>\n          </Flex>\n          {attribute?.type === 'component' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              direction=\"column\"\n              gap={2}\n              width=\"100%\"\n            >\n              <Grid.Root gap={4} width=\"100%\">\n                {components[attribute.component].layout.map((row) =>\n                  row.map(({ size, ...field }) => (\n                    <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                      <Flex\n                        alignItems=\"center\"\n                        background=\"neutral0\"\n                        paddingTop={2}\n                        paddingBottom={2}\n                        paddingLeft={3}\n                        paddingRight={3}\n                        hasRadius\n                        borderColor=\"neutral200\"\n                      >\n                        <Typography textColor=\"neutral800\">{field.name}</Typography>\n                      </Flex>\n                    </Grid.Item>\n                  ))\n                )}\n              </Grid.Root>\n              <Link\n                // used to stop the edit form from appearing when we click here.\n                onClick={(e) => e.stopPropagation()}\n                startIcon={<Cog />}\n                tag={NavLink}\n                to={`../components/${attribute.component}/configurations/edit`}\n              >\n                {formatMessage({\n                  id: getTranslation('components.FieldItem.linkToComponentLayout'),\n                  defaultMessage: \"Set the component's layout\",\n                })}\n              </Link>\n            </Flex>\n          ) : null}\n          {attribute?.type === 'dynamiczone' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              gap={2}\n              width=\"100%\"\n              wrap=\"wrap\"\n            >\n              {attribute?.components.map((uid) => (\n                <ComponentLink\n                  // used to stop the edit form from appearing when we click here.\n                  onClick={(e) => e.stopPropagation()}\n                  key={uid}\n                  to={`../components/${uid}/configurations/edit`}\n                >\n                  <ComponentIcon icon={components[uid].settings.icon} />\n                  <Typography fontSize={1} textColor=\"neutral600\" fontWeight=\"bold\">\n                    {components[uid].settings.displayName}\n                  </Typography>\n                </ComponentLink>\n              ))}\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n      {value.name !== TEMP_FIELD_NAME && (\n        <EditFieldForm attribute={attribute} name={name} onClose={() => setIsModalOpen(false)} />\n      )}\n    </Modal.Root>\n  );\n};\n\nconst DragButton = styled<IconButtonComponent<'span'>>(IconButton)`\n  height: unset;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 0px;\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  cursor: all-scroll;\n\n  svg {\n    width: 1.2rem;\n    height: 1.2rem;\n  }\n`;\n\nconst ComponentLink = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${({ theme }) => theme.spaces[1]};\n  padding: ${(props) => props.theme.spaces[2]};\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral0};\n  width: 14rem;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    ${({ theme }) => `\n      background-color: ${theme.colors.primary100};\n      border-color: ${theme.colors.primary200};\n\n      ${Typography} {\n          color: ${theme.colors.primary600};\n      }\n    `}\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nexport { Fields, TEMP_FIELD_NAME };\nexport type { FieldsProps };\n", "import {\n  useNotification,\n  InputRenderer,\n  Form,\n  InputProps,\n  useField,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Grid, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { useGetInitialDataQuery } from '../../services/init';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\nimport { FieldTypeIcon } from '../FieldTypeIcon';\n\nimport { TEMP_FIELD_NAME } from './Fields';\n\nimport type { ConfigurationFormData } from './Form';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Constants\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_SCHEMA = yup.object().shape({\n  label: yup.string().required().nullable(),\n  description: yup.string(),\n  editable: yup.boolean(),\n  size: yup.number().required(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditFieldForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditFieldFormProps {\n  attribute?: Schema.Attribute.AnyAttribute;\n  name: string;\n  onClose: () => void;\n}\n\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const { value, onChange } =\n    useField<ConfigurationFormData['layout'][number]['children'][number]>(name);\n\n  const { data: mainFieldOptions } = useGetInitialDataQuery(undefined, {\n    selectFromResult: (res) => {\n      if (attribute?.type !== 'relation' || !res.data) {\n        return { data: [] };\n      }\n\n      if ('targetModel' in attribute && typeof attribute.targetModel === 'string') {\n        const targetSchema = res.data.contentTypes.find(\n          (schema) => schema.uid === attribute.targetModel\n        );\n\n        if (targetSchema) {\n          return {\n            data: Object.entries(targetSchema.attributes).reduce<\n              Array<{ label: string; value: string }>\n            >((acc, [key, attribute]) => {\n              /**\n               * Create the list of attributes from the schema as to which can\n               * be our `mainField` and dictate the display name of the schema\n               * we're editing.\n               */\n              if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                acc.push({\n                  label: key,\n                  value: key,\n                });\n              }\n\n              return acc;\n            }, []),\n          };\n        }\n      }\n\n      return { data: [] };\n    },\n    skip: attribute?.type !== 'relation',\n  });\n\n  if (!value || value.name === TEMP_FIELD_NAME || !attribute) {\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\n    console.error(\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\n    );\n\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.containers.edit-settings.modal-form.error',\n        defaultMessage: 'An error occurred while trying to open the form.',\n      }),\n      type: 'danger',\n    });\n\n    return null;\n  }\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"PUT\"\n        initialValues={value}\n        validationSchema={FIELD_SCHEMA}\n        onSubmit={(data) => {\n          onChange(name, data);\n          onClose();\n        }}\n      >\n        <Modal.Header>\n          <Flex gap={3}>\n            <FieldTypeIcon type={attribute.type} />\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: 'content-manager.containers.edit-settings.modal-form.label',\n                  defaultMessage: 'Edit {fieldName}',\n                },\n                { fieldName: capitalise(value.name) }\n              )}\n            </Modal.Title>\n          </Flex>\n        </Modal.Header>\n        <Modal.Body>\n          <Grid.Root gap={4}>\n            {[\n              {\n                name: 'label',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.label'),\n                  defaultMessage: 'Label',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'description',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.description'),\n                  defaultMessage: 'Description',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'placeholder',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.placeholder'),\n                  defaultMessage: 'Placeholder',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'editable',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.editable'),\n                  defaultMessage: 'Editable',\n                }),\n                size: 6,\n                type: 'boolean' as const,\n              },\n              {\n                name: 'mainField',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.mainField'),\n                  defaultMessage: 'Entry title',\n                }),\n                hint: formatMessage({\n                  id: getTranslation(\n                    'containers.SettingPage.edit-settings.modal-form.mainField.hint'\n                  ),\n                  defaultMessage: 'Set the displayed field',\n                }),\n                size: 6,\n                options: mainFieldOptions,\n                type: 'enumeration' as const,\n              },\n              {\n                name: 'size',\n                label: formatMessage({\n                  id: getTranslation('containers.ListSettingsView.modal-form.size'),\n                  defaultMessage: 'Size',\n                }),\n                size: 6,\n                options: [\n                  { value: '4', label: '33%' },\n                  { value: '6', label: '50%' },\n                  { value: '8', label: '66%' },\n                  { value: '12', label: '100%' },\n                ],\n                type: 'enumeration' as const,\n              },\n            ]\n              .filter(filterFieldsBasedOnAttributeType(attribute.type))\n              .map(({ size, ...field }) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n          </Grid.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>\n            <Button variant=\"tertiary\">\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n            </Button>\n          </Modal.Close>\n          <Button type=\"submit\">\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\n/**\n * @internal\n * @description not all edit fields have the same editable properties, it depends on the type\n * e.g. a dynamic zone can only change it's label.\n */\nconst filterFieldsBasedOnAttributeType = (type: Schema.Attribute.Kind) => (field: InputProps) => {\n  switch (type) {\n    case 'blocks':\n    case 'richtext':\n      return field.name !== 'size' && field.name !== 'mainField';\n    case 'boolean':\n    case 'media':\n      return field.name !== 'placeholder' && field.name !== 'mainField';\n    case 'component':\n    case 'dynamiczone':\n      return field.name === 'label' || field.name === 'editable';\n    case 'json':\n      return field.name !== 'placeholder' && field.name !== 'mainField' && field.name !== 'size';\n    case 'relation':\n      return true;\n    default:\n      return field.name !== 'mainField';\n  }\n};\n\nexport { EditFieldForm };\nexport type { EditFieldFormProps };\n", "import * as React from 'react';\n\nimport {\n  Form,\n  FormProps,\n  useForm,\n  InputRenderer,\n  BackButton,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Divider, Flex, Grid, Main, Typography } from '@strapi/design-system';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\nimport { useIntl } from 'react-intl';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\n\nimport { Fields, FieldsProps, TEMP_FIELD_NAME } from './Fields';\n\nimport type { EditFieldLayout, EditLayout } from '../../hooks/useDocumentLayout';\n\n/* -------------------------------------------------------------------------------------------------\n * ConfigurationForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfigurationFormProps extends Pick<FieldsProps, 'attributes' | 'fieldSizes'> {\n  layout: EditLayout;\n  onSubmit: FormProps<ConfigurationFormData>['onSubmit'];\n}\n\n/**\n * Every key in EditFieldLayout is turned to optional never and then we overwrite the ones we are using.\n */\n\ntype EditFieldSpacerLayout = {\n  [key in keyof Omit<EditFieldLayout, 'name' | 'size'>]?: never;\n} & {\n  description?: never;\n  editable?: never;\n  name: '_TEMP_';\n  size: number;\n  __temp_key__: string;\n};\n\ninterface ConfigurationFormData extends Pick<EditLayout, 'settings'> {\n  layout: Array<{\n    __temp_key__: string;\n    children: Array<\n      | (Pick<EditFieldLayout, 'label' | 'size' | 'name' | 'placeholder' | 'mainField'> & {\n          description: EditFieldLayout['hint'];\n          editable: EditFieldLayout['disabled'];\n          __temp_key__: string;\n        })\n      | EditFieldSpacerLayout\n    >;\n  }>;\n}\n\nconst ConfigurationForm = ({\n  attributes,\n  fieldSizes,\n  layout: editLayout,\n  onSubmit,\n}: ConfigurationFormProps) => {\n  const { components, settings, layout, metadatas } = editLayout;\n\n  const { formatMessage } = useIntl();\n\n  const initialValues: ConfigurationFormData = React.useMemo(() => {\n    const transformations = pipe(\n      flattenPanels,\n      replaceMainFieldWithNameOnly,\n      extractMetadata,\n      addTmpSpaceToLayout,\n      addTmpKeysToLayout\n    );\n\n    return {\n      layout: transformations(layout),\n      settings,\n    };\n  }, [layout, settings]);\n\n  return (\n    <Layouts.Root>\n      <Main>\n        <Form initialValues={initialValues} onSubmit={onSubmit} method=\"PUT\">\n          <Header name={settings.displayName ?? ''} />\n          <Layouts.Content>\n            <Flex\n              alignItems=\"stretch\"\n              background=\"neutral0\"\n              direction=\"column\"\n              gap={6}\n              hasRadius\n              shadow=\"tableShadow\"\n              paddingTop={6}\n              paddingBottom={6}\n              paddingLeft={7}\n              paddingRight={7}\n            >\n              <Typography variant=\"delta\" tag=\"h2\">\n                {formatMessage({\n                  id: getTranslation('containers.SettingPage.settings'),\n                  defaultMessage: 'Settings',\n                })}\n              </Typography>\n              <Grid.Root>\n                <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer\n                    type=\"enumeration\"\n                    label={formatMessage({\n                      id: getTranslation('containers.SettingPage.editSettings.entry.title'),\n                      defaultMessage: 'Entry title',\n                    })}\n                    hint={formatMessage({\n                      id: getTranslation(\n                        'containers.SettingPage.editSettings.entry.title.description'\n                      ),\n                      defaultMessage: 'Set the display field of your entry',\n                    })}\n                    name=\"settings.mainField\"\n                    options={Object.entries(attributes).reduce<\n                      Array<{ label: string; value: string }>\n                    >((acc, [key, attribute]) => {\n                      if (!attribute) {\n                        return acc;\n                      }\n\n                      /**\n                       * Create the list of attributes from the schema as to which can\n                       * be our `mainField` and dictate the display name of the schema\n                       * we're editing.\n                       */\n                      if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                        acc.push({\n                          label: key,\n                          value: key,\n                        });\n                      }\n\n                      return acc;\n                    }, [])}\n                  />\n                </Grid.Item>\n                <Grid.Item\n                  paddingTop={6}\n                  paddingBottom={6}\n                  col={12}\n                  s={12}\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                >\n                  <Divider />\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage({\n                      id: getTranslation('containers.SettingPage.view'),\n                      defaultMessage: 'View',\n                    })}\n                  </Typography>\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Fields\n                    attributes={attributes}\n                    components={components}\n                    fieldSizes={fieldSizes}\n                    metadatas={metadatas}\n                  />\n                </Grid.Item>\n              </Grid.Root>\n            </Flex>\n          </Layouts.Content>\n        </Form>\n      </Main>\n    </Layouts.Root>\n  );\n};\n\n/**\n * @internal\n * @description Panels don't exist in the layout, so we flatten by one.\n */\nconst flattenPanels = (layout: EditLayout['layout']): EditLayout['layout'][number] =>\n  layout.flat(1);\n\n/**\n * @internal\n * @description We don't need the mainField object in the layout, we only need the name.\n */\nconst replaceMainFieldWithNameOnly = (layout: EditLayout['layout'][number]) =>\n  layout.map((row) =>\n    row.map((field) => ({\n      ...field,\n      mainField: field.mainField?.name,\n    }))\n  );\n\n/**\n * @internal\n * @description We extract the metadata values from the field layout, because these are editable by the user.\n */\nconst extractMetadata = (\n  layout: EditLayout['layout'][number]\n): Array<Exclude<ConfigurationFormData['layout'], { name: '_TEMP_' }>[number]['children']> => {\n  return layout.map((row) =>\n    row.map(({ label, disabled, hint, placeholder, size, name, mainField }) => ({\n      label,\n      editable: !disabled,\n      description: hint,\n      mainField,\n      placeholder,\n      size,\n      name,\n      __temp_key__: '',\n    }))\n  );\n};\n\n/**\n * @internal\n * @description Each row of the layout has a max size of 12 (based on bootstrap grid system)\n * So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\n */\nconst addTmpSpaceToLayout = (\n  layout: ReturnType<typeof extractMetadata>\n): Array<ConfigurationFormData['layout'][number]['children']> => [\n  ...layout.map((row) => {\n    const totalSpaceTaken = row.reduce((acc, field) => acc + field.size, 0);\n\n    if (totalSpaceTaken < 12) {\n      return [\n        ...row,\n        {\n          name: TEMP_FIELD_NAME,\n          size: 12 - totalSpaceTaken,\n          __temp_key__: '',\n        } satisfies EditFieldSpacerLayout,\n      ];\n    }\n\n    return row;\n  }),\n];\n\n/**\n * @internal\n * @description At this point of the transformations we have Field[][], but each row for the form should have a __temp_key__\n * applied. This means we need to change it so `Field` is nested under the children property.\n */\nconst addTmpKeysToLayout = (\n  layout: ReturnType<typeof addTmpSpaceToLayout>\n): ConfigurationFormData['layout'] => {\n  const keys = generateNKeysBetween(undefined, undefined, layout.length);\n\n  return layout.map((row, rowIndex) => {\n    const fieldKeys = generateNKeysBetween(undefined, undefined, row.length);\n\n    return {\n      __temp_key__: keys[rowIndex],\n      children: row.map((field, fieldIndex) => {\n        return {\n          ...field,\n          __temp_key__: fieldKeys[fieldIndex],\n        };\n      }),\n    };\n  });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  name: string;\n}\n\nconst Header = ({ name }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const modified = useForm('Header', (state) => state.modified);\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\n\n  return (\n    <Layouts.Header\n      title={formatMessage(\n        {\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\n          defaultMessage: `Configure the view - {name}`,\n        },\n        { name: capitalise(name) }\n      )}\n      subtitle={formatMessage({\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\n        defaultMessage: 'Customize how the edit view will look like.',\n      })}\n      navigationAction={<BackButton />}\n      primaryAction={\n        <Button disabled={!modified} loading={isSubmitting} type=\"submit\">\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfigurationForm };\nexport type { ConfigurationFormProps, ConfigurationFormData, EditFieldSpacerLayout };\n"],
  "mappings": "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",
  "names": ["create", "attribute", "import_jsx_runtime", "layout", "containers", "update", "_dndId", "React", "import_jsx_runtime", "pipe"]
}
