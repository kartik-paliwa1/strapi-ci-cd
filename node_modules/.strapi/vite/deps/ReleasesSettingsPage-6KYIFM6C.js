import {
  useTypedSelector
} from "./chunk-5U2WYAEW.js";
import {
  SETTINGS_SCHEMA
} from "./chunk-P6ZGRK46.js";
import {
  getTimezones,
  useGetReleaseSettingsQuery,
  useUpdateReleaseSettingsMutation
} from "./chunk-MQY5TE4O.js";
import "./chunk-4JEMFY4B.js";
import "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import {
  GradientBadgeWithIcon
} from "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import {
  Form,
  useField
} from "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import "./chunk-GJKFT6EX.js";
import {
  useRBAC
} from "./chunk-HP6PMHBS.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import "./chunk-KYOQACZ3.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import {
  useNotification
} from "./chunk-5BKV6XT7.js";
import {
  isFetchError
} from "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import "./chunk-SPCPB6JM.js";
import {
  Button,
  Combobox,
  Field,
  Flex,
  Grid,
  Option,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$4N
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/content-releases/admin/src/pages/ReleasesSettingsPage.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ReleasesSettingsPage = () => {
  const { formatMessage } = useIntl();
  const { formatAPIError } = useAPIErrorHandler();
  const { toggleNotification } = useNotification();
  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();
  const [updateReleaseSettings, { isLoading: isSubmittingForm }] = useUpdateReleaseSettingsMutation();
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
    }
  );
  const {
    allowedActions: { canUpdate }
  } = useRBAC(permissions);
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const handleSubmit = async (body, { setErrors }) => {
    const { defaultTimezone } = body;
    const formattedDefaultTimezone = defaultTimezone;
    const isBodyTimezoneValid = timezoneList.some(
      (timezone) => timezone.value === formattedDefaultTimezone
    );
    if (!isBodyTimezoneValid && defaultTimezone) {
      const errorMessage = formatMessage({
        id: "components.Input.error.validation.combobox.invalid",
        defaultMessage: "The value provided is not valid"
      });
      setErrors({
        defaultTimezone: errorMessage
      });
      toggleNotification({
        type: "danger",
        message: errorMessage
      });
      return;
    }
    const newBody = !defaultTimezone || !isBodyTimezoneValid ? { defaultTimezone: null } : { defaultTimezone: formattedDefaultTimezone };
    try {
      const response = await updateReleaseSettings(newBody);
      if ("data" in response) {
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "content-releases.pages.Settings.releases.setting.default-timezone-notification-success",
            defaultMessage: "Default timezone updated."
          })
        });
      } else if (isFetchError(response.error)) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatMessage({
            id: "notification.error",
            defaultMessage: "An error occurred"
          })
        });
      }
    } catch (error) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoadingSettings) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const releasePageTitle = formatMessage({
    id: "content-releases.pages.Releases.title",
    defaultMessage: "Releases"
  });
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: releasePageTitle
      }
    ) }),
    (0, import_jsx_runtime.jsx)(Page.Main, { "aria-busy": isLoadingSettings, tabIndex: -1, children: (0, import_jsx_runtime.jsx)(
      Form,
      {
        method: "PUT",
        initialValues: {
          defaultTimezone: data == null ? void 0 : data.data.defaultTimezone
        },
        onSubmit: handleSubmit,
        validationSchema: SETTINGS_SCHEMA,
        children: ({ modified, isSubmitting }) => {
          return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            (0, import_jsx_runtime.jsx)(
              Layouts.Header,
              {
                primaryAction: canUpdate ? (0, import_jsx_runtime.jsx)(
                  Button,
                  {
                    disabled: !modified || isSubmittingForm,
                    loading: isSubmitting,
                    startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
                    type: "submit",
                    children: formatMessage({
                      id: "global.save",
                      defaultMessage: "Save"
                    })
                  }
                ) : null,
                secondaryAction: (0, import_jsx_runtime.jsx)(
                  GradientBadgeWithIcon,
                  {
                    label: formatMessage({
                      id: "components.premiumFeature.title",
                      defaultMessage: "Premium feature"
                    })
                  }
                ),
                title: releasePageTitle,
                subtitle: formatMessage({
                  id: "content-releases.pages.Settings.releases.description",
                  defaultMessage: "Create and manage content updates"
                })
              }
            ),
            (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (0, import_jsx_runtime.jsxs)(
              Flex,
              {
                direction: "column",
                background: "neutral0",
                alignItems: "stretch",
                padding: 6,
                gap: 6,
                shadow: "filterShadow",
                hasRadius: true,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h2", children: formatMessage({
                    id: "content-releases.pages.Settings.releases.preferences.title",
                    defaultMessage: "Preferences"
                  }) }),
                  (0, import_jsx_runtime.jsx)(Grid.Root, { children: (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsx)(TimezoneDropdown, {}) }) })
                ]
              }
            ) })
          ] });
        }
      }
    ) })
  ] });
};
var TimezoneDropdown = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
    }
  );
  const {
    allowedActions: { canUpdate }
  } = useRBAC(permissions);
  const { formatMessage } = useIntl();
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const field = useField("defaultTimezone");
  return (0, import_jsx_runtime.jsxs)(
    Field.Root,
    {
      name: "defaultTimezone",
      hint: formatMessage({
        id: "content-releases.pages.Settings.releases.timezone.hint",
        defaultMessage: "The timezone of every release can still be changed individually."
      }),
      error: field.error,
      children: [
        (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
          id: "content-releases.pages.Settings.releases.timezone.label",
          defaultMessage: "Default timezone"
        }) }),
        (0, import_jsx_runtime.jsx)(
          Combobox,
          {
            autocomplete: { type: "list", filter: "contains" },
            onTextValueChange: (value) => field.onChange("defaultTimezone", value),
            onChange: (value) => {
              if (field.value && value || !field.value) {
                field.onChange("defaultTimezone", value);
              }
            },
            onClear: () => field.onChange("defaultTimezone", ""),
            value: field.value,
            disabled: !canUpdate,
            children: timezoneList.map((timezone) => (0, import_jsx_runtime.jsx)(Option, { value: timezone.value, children: timezone.value.replace(/&/, " ") }, timezone.value))
          }
        ),
        (0, import_jsx_runtime.jsx)(Field.Hint, {}),
        (0, import_jsx_runtime.jsx)(Field.Error, {})
      ]
    }
  );
};
var ProtectedReleasesSettingsPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a, _b;
      return (_b = (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"]) == null ? void 0 : _b.read;
    }
  );
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(ReleasesSettingsPage, {}) });
};
export {
  ProtectedReleasesSettingsPage
};
//# sourceMappingURL=ReleasesSettingsPage-6KYIFM6C.js.map
