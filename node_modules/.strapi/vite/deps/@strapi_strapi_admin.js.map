{
  "version": 3,
  "sources": ["../../../../../packages/core/content-type-builder/admin/src/reducers.ts", "../../../../../packages/core/content-type-builder/admin/src/utils/formAPI.ts", "../../../../../packages/core/content-type-builder/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/content-type-builder/admin/src/index.ts", "../../../../../packages/core/email/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/email/admin/src/index.ts", "../../../../../packages/core/upload/admin/src/components/MediaLibraryDialog/MediaLibraryDialog.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/AssetDialog.tsx", "../../../../../packages/core/upload/admin/src/hooks/useModalQueryParams.ts", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/Filters.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PageSize.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PaginationFooter/Pagination.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PaginationFooter/PaginationFooter.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/SearchAsset/SearchAsset.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/utils/isSelectable.ts", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/BrowseStep.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/DialogFooter.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/SelectedStep/SelectedStep.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/MediaLibraryInput.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAssets.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAsset.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAssetActions.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/EmptyStateAsset.tsx", "../../../../../packages/core/upload/admin/src/index.ts", "../../../../../packages/plugins/i18n/admin/src/index.ts", "../../../../../packages/plugins/i18n/admin/src/components/CheckboxConfirmation.tsx", "../../../../../packages/plugins/i18n/admin/src/components/CMHeaderActions.tsx", "../../../../../packages/plugins/i18n/admin/src/hooks/useI18n.ts", "../../../../../packages/plugins/i18n/admin/src/utils/fields.ts", "../../../../../packages/plugins/i18n/admin/src/utils/strings.ts", "../../../../../packages/plugins/i18n/admin/src/services/relations.ts", "../../../../../packages/plugins/i18n/admin/src/utils/clean.ts", "../../../../../packages/plugins/i18n/admin/src/components/BulkLocaleActionModal.tsx", "../../../../../packages/plugins/i18n/admin/src/components/CMListViewModalsAdditionalInformation.tsx", "../../../../../packages/plugins/i18n/admin/src/components/LocalePicker.tsx", "../../../../../packages/plugins/i18n/admin/src/contentManagerHooks/editView.tsx", "../../../../../packages/plugins/i18n/admin/src/components/LocaleListCell.tsx", "../../../../../packages/plugins/i18n/admin/src/contentManagerHooks/listView.tsx", "../../../../../packages/plugins/i18n/admin/src/contentReleasesHooks/releaseDetailsView.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/extendCTBAttributeInitialData.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/extendCTBInitialData.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/rbac-middleware.ts", "../../../../../packages/plugins/i18n/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/plugins/i18n/admin/src/utils/schemas.ts", "../../../../../packages/core/content-releases/admin/src/components/ReleaseActionModal.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleaseAction.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleaseListCell.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleasesPanel.tsx", "../../../../../packages/core/content-releases/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/content-releases/admin/src/index.ts", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/AssigneeSelect.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/constants.ts", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/StageSelect.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/Header.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/Panel.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/components/AssigneeFilter.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/components/StageFilter.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/constants.tsx", "../../../../../packages/core/review-workflows/admin/src/utils/cm-hooks.ts", "../../../../../packages/core/review-workflows/admin/src/utils/translations.ts", "../../../../../packages/core/review-workflows/admin/src/index.ts", "../../../@strapi/strapi/src/admin.ts"],
  "sourcesContent": ["import { reducer as dataManagerProviderReducer } from './components/DataManager/reducer';\nimport { reducer as formModalReducer } from './components/FormModal/reducer';\n\nexport const reducers = {\n  [`content-type-builder_formModal`]: formModalReducer,\n  [`content-type-builder_dataManagerProvider`]: dataManagerProviderReducer,\n};\n", "import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport * as yup from 'yup';\n\nexport interface FormAPI {\n  components: {\n    inputs: Record<string, any>;\n    add: ({ id, component }: { id: string; component: any }) => void;\n  };\n  types: {\n    attribute: {\n      [key: string]: {\n        validators: any[];\n        form: {\n          advanced: any[];\n          base: any[];\n        };\n      };\n    };\n    contentType: {\n      validators: any[];\n      form: {\n        advanced: any[];\n        base: any[];\n      };\n    };\n    component: {\n      validators: any[];\n      form: {\n        advanced: any[];\n        base: any[];\n      };\n    };\n  };\n  contentTypeSchemaMutations: any[];\n  addContentTypeSchemaMutation: (cb: any) => void;\n  extendContentType: (data: any) => void;\n  extendFields: (fields: any[], data: any) => void;\n  getAdvancedForm: (target: any, props?: any) => any[];\n  makeCustomFieldValidator: (attributeShape: any, validator: any, ...validatorArgs: any) => any;\n  makeValidator: (target: any, initShape: any, ...args: any) => any;\n  mutateContentTypeSchema: (\n    data: Record<string, unknown>,\n    initialData: Record<string, unknown>\n  ) => any;\n}\n\nexport const formsAPI: FormAPI = {\n  components: {\n    inputs: {},\n    add({ id, component }) {\n      if (!this.inputs[id]) {\n        this.inputs[id] = component;\n      }\n    },\n  },\n  types: {\n    attribute: {\n      // test: {\n      //   validators: [],\n      //   form: {\n      //     advanced: [\n      //       /* cb */\n      //     ],\n      //     base: [\n      //       /* cb */\n      //     ],\n      //   },\n      // },\n    },\n    contentType: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n    component: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n  },\n  contentTypeSchemaMutations: [],\n  addContentTypeSchemaMutation(cb) {\n    this.contentTypeSchemaMutations.push(cb);\n  },\n  extendContentType({ validator, form: { advanced, base } }) {\n    const { contentType } = this.types;\n\n    if (validator) {\n      contentType.validators.push(validator);\n    }\n    contentType.form.advanced.push(advanced);\n    contentType.form.base.push(base);\n  },\n  extendFields(fields, { validator, form: { advanced, base } }) {\n    const formType = this.types.attribute;\n\n    fields.forEach((field) => {\n      if (!formType[field]) {\n        formType[field] = {\n          validators: [],\n          form: {\n            advanced: [\n              /* cb */\n            ],\n            base: [\n              /* cb */\n            ],\n          },\n        };\n      }\n\n      if (validator) {\n        formType[field].validators.push(validator);\n      }\n      formType[field].form.advanced.push(advanced);\n      formType[field].form.base.push(base);\n    });\n  },\n\n  getAdvancedForm(target, props = null) {\n    const sectionsToAdd = get(this.types, [...target, 'form', 'advanced'], []).reduce(\n      (acc: any, current: any) => {\n        const sections = current(props);\n\n        return [...acc, ...sections];\n      },\n      []\n    );\n\n    return sectionsToAdd;\n  },\n\n  makeCustomFieldValidator(attributeShape, validator, ...validatorArgs) {\n    // When no validator, return the attribute shape\n    if (!validator) return attributeShape;\n\n    // Otherwise extend the shape with the provided validator\n    return attributeShape.shape({ options: yup.object().shape(validator(validatorArgs)) });\n  },\n\n  makeValidator(target, initShape, ...args) {\n    const validators = get(this.types, [...target, 'validators'], []);\n\n    const pluginOptionsShape = validators.reduce((acc: any, current: any) => {\n      const pluginOptionShape = current(args);\n\n      return { ...acc, ...pluginOptionShape };\n    }, {});\n\n    return initShape.shape({ pluginOptions: yup.object().shape(pluginOptionsShape) });\n  },\n  mutateContentTypeSchema(data: Record<string, unknown>, initialData: Record<string, unknown>) {\n    let enhancedData = cloneDeep(data);\n\n    const refData = cloneDeep(initialData);\n\n    this.contentTypeSchemaMutations.forEach((cb: any) => {\n      enhancedData = cb(enhancedData, refData);\n    });\n\n    return enhancedData;\n  },\n};\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { Layout } from '@strapi/icons';\n\nimport { PERMISSIONS } from './constants';\nimport { pluginId } from './pluginId';\nimport { reducers } from './reducers';\nimport { formsAPI } from './utils/formAPI';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: StrapiApp) {\n    app.addReducers(reducers);\n    app.addMenuLink({\n      to: `plugins/${pluginId}`,\n      icon: Layout,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'Content-Type Builder',\n      },\n      permissions: PERMISSIONS.main,\n      Component: () => import('./pages/App'),\n      position: 5,\n    });\n\n    app.registerPlugin({\n      id: pluginId,\n      name: pluginId,\n      // Internal APIs exposed by the CTB for the other plugins to use\n      apis: {\n        forms: formsAPI,\n      },\n    });\n  },\n  bootstrap() {},\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\nexport * from './exports';\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { PERMISSIONS } from './constants';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nimport type { Plugin } from '@strapi/types';\n\nconst admin: Plugin.Config.AdminInput = {\n  // TODO typing app in strapi/types as every plugin needs it\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: any) {\n    // Create the email settings section\n    app.createSettingSection(\n      {\n        id: 'email',\n        intlLabel: { id: 'email.SettingsNav.section-label', defaultMessage: 'Email Plugin' },\n      },\n      [\n        {\n          intlLabel: {\n            id: 'email.Settings.email.plugin.title',\n            defaultMessage: 'Settings',\n          },\n          id: 'settings',\n          to: 'email',\n          Component: () =>\n            import('./pages/Settings').then((mod) => ({\n              default: mod.ProtectedSettingsPage,\n            })),\n          permissions: PERMISSIONS.settings,\n        },\n      ]\n    );\n    app.registerPlugin({\n      id: 'email',\n      name: 'email',\n    });\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  bootstrap() {},\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, 'email'),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\nimport { UploadAssetDialog } from '../UploadAssetDialog/UploadAssetDialog';\n\nconst STEPS = {\n  AssetSelect: 'SelectAsset',\n  AssetUpload: 'UploadAsset',\n  FolderCreate: 'FolderCreate',\n};\n\nimport type { File } from '../../../../shared/contracts/files';\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\nexport interface MediaLibraryDialogProps {\n  allowedTypes?: AllowedTypes[];\n  onClose: () => void;\n  onSelectAssets: (selectedAssets: File[]) => void;\n}\n\nexport const MediaLibraryDialog = ({\n  onClose,\n  onSelectAssets,\n  allowedTypes = ['files', 'images', 'videos', 'audios'],\n}: MediaLibraryDialogProps) => {\n  const [step, setStep] = React.useState(STEPS.AssetSelect);\n  const [folderId, setFolderId] = React.useState<number | null>(null);\n\n  switch (step) {\n    case STEPS.AssetSelect:\n      return (\n        <AssetDialog\n          allowedTypes={allowedTypes}\n          folderId={folderId}\n          open\n          onClose={onClose}\n          onValidate={onSelectAssets}\n          onAddAsset={() => setStep(STEPS.AssetUpload)}\n          onAddFolder={() => setStep(STEPS.FolderCreate)}\n          onChangeFolder={(folderId) => setFolderId(folderId)}\n          multiple\n        />\n      );\n\n    case STEPS.FolderCreate:\n      return (\n        <EditFolderDialog\n          open\n          onClose={() => setStep(STEPS.AssetSelect)}\n          parentFolderId={folderId}\n        />\n      );\n\n    default:\n      return (\n        <UploadAssetDialog open onClose={() => setStep(STEPS.AssetSelect)} folderId={folderId} />\n      );\n  }\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page } from '@strapi/admin/strapi-admin';\nimport { Badge, Button, Divider, Flex, Loader, Modal, Tabs } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useAssets } from '../../hooks/useAssets';\nimport { useFolders } from '../../hooks/useFolders';\nimport { useMediaLibraryPermissions } from '../../hooks/useMediaLibraryPermissions';\nimport { useModalQueryParams } from '../../hooks/useModalQueryParams';\nimport { useSelectionState } from '../../hooks/useSelectionState';\nimport {\n  containsAssetFilter,\n  getTrad,\n  getAllowedFiles,\n  moveElement,\n  AllowedFiles,\n} from '../../utils';\nimport { EditAssetContent, Asset as EditAsset } from '../EditAssetDialog/EditAssetContent';\nimport { EditFolderContent } from '../EditFolderDialog/EditFolderDialog';\n\nimport {\n  BrowseStep,\n  FolderWithType,\n  FileWithType,\n  Filter as BrowseFilter,\n} from './BrowseStep/BrowseStep';\nimport { DialogFooter } from './DialogFooter';\nimport { SelectedStep } from './SelectedStep/SelectedStep';\n\nimport type { File as Asset, FilterCondition, Query } from '../../../../shared/contracts/files';\nimport type { Folder, FolderDefinition } from '../../../../shared/contracts/folders';\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\n\nconst LoadingBody = styled(Flex)`\n  /* 80px are coming from the Tabs component that is not included in the ModalBody */\n  min-height: ${() => `calc(60vh + 8rem)`};\n`;\n\nexport interface FileRow extends Asset {\n  folderURL?: string;\n  isSelectable?: boolean;\n  type?: string;\n}\n\nexport interface FolderRow extends Folder {\n  folderURL?: string;\n  isSelectable?: boolean;\n  type?: string;\n}\n\ninterface AssetContentProps {\n  allowedTypes?: AllowedTypes[];\n  folderId?: number | null;\n  onClose: () => void;\n  onAddAsset: (arg?: { folderId: number | { id: number } | null | undefined }) => void;\n  onAddFolder: ({ folderId }: { folderId: number | { id: number } | null | undefined }) => void;\n  onChangeFolder: (folderId: number | null) => void;\n  onValidate: (selectedAssets: Asset[]) => void;\n  multiple?: boolean;\n  trackedLocation?: string;\n  initiallySelectedAssets?: Asset[];\n}\n\nexport const AssetContent = ({\n  allowedTypes = [],\n  folderId = null,\n  onClose,\n  onAddAsset,\n  onAddFolder,\n  onChangeFolder,\n  onValidate,\n  multiple = false,\n  initiallySelectedAssets = [],\n  trackedLocation,\n}: AssetContentProps) => {\n  const [assetToEdit, setAssetToEdit] = React.useState<FileWithType | undefined>(undefined);\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined>(undefined);\n  const { formatMessage } = useIntl();\n  const {\n    canRead,\n    canCreate,\n    isLoading: isLoadingPermissions,\n    canUpdate,\n    canCopyLink,\n    canDownload,\n  } = useMediaLibraryPermissions();\n\n  const [\n    { queryObject },\n    {\n      onChangeFilters,\n      onChangePage,\n      onChangePageSize,\n      onChangeSort,\n      onChangeSearch,\n      onChangeFolder: onChangeFolderParam,\n    },\n  ] = useModalQueryParams({ folder: folderId });\n\n  const {\n    data: { pagination, results: assets } = {},\n    isLoading: isLoadingAssets,\n    error: errorAssets,\n  } = useAssets({ skipWhen: !canRead, query: queryObject });\n\n  const {\n    data: folders,\n    isLoading: isLoadingFolders,\n    error: errorFolders,\n  } = useFolders({\n    enabled: canRead && !containsAssetFilter(queryObject!) && pagination?.page === 1,\n    query: queryObject,\n  });\n\n  const [\n    selectedAssets,\n    { selectOne, selectOnly, setSelections, selectMultiple, deselectMultiple },\n  ] = useSelectionState(['id'], initiallySelectedAssets);\n\n  const handleSelectAllAssets = () => {\n    const allowedAssets = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\n\n    if (!multiple) {\n      return undefined;\n    }\n\n    // selected files in current folder\n    const alreadySelected = allowedAssets.filter(\n      (asset) => selectedAssets.findIndex((selectedAsset) => selectedAsset.id === asset.id) !== -1\n    );\n\n    if (alreadySelected.length > 0) {\n      deselectMultiple(alreadySelected);\n    } else {\n      selectMultiple(allowedAssets);\n    }\n  };\n\n  const handleSelectAsset = (asset: Asset | FileRow | FolderRow) => {\n    return multiple ? selectOne(asset as Asset) : selectOnly(asset as Asset);\n  };\n\n  const isLoading = isLoadingPermissions || isLoadingAssets || isLoadingFolders;\n  const hasError = errorAssets || errorFolders;\n\n  const [activeTab, setActiveTab] = React.useState(\n    selectedAssets.length > 0 ? 'selected' : 'browse'\n  );\n\n  if (isLoading) {\n    return (\n      <>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage({\n              id: getTrad('header.actions.add-assets'),\n              defaultMessage: 'Add new assets',\n            })}\n          </Modal.Title>\n        </Modal.Header>\n        <LoadingBody justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\n          <Loader>\n            {formatMessage({\n              id: getTrad('content.isLoading'),\n              defaultMessage: 'Content is loading.',\n            })}\n          </Loader>\n        </LoadingBody>\n        <DialogFooter onClose={onClose} />\n      </>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage({\n              id: getTrad('header.actions.add-assets'),\n              defaultMessage: 'Add new assets',\n            })}\n          </Modal.Title>\n        </Modal.Header>\n        <Page.Error />\n        <DialogFooter onClose={onClose} />\n      </>\n    );\n  }\n\n  if (!canRead) {\n    return (\n      <>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage({\n              id: getTrad('header.actions.add-assets'),\n              defaultMessage: 'Add new assets',\n            })}\n          </Modal.Title>\n        </Modal.Header>\n        <Page.NoPermissions />\n        <DialogFooter onClose={onClose} />\n      </>\n    );\n  }\n\n  if (assetToEdit) {\n    return (\n      <EditAssetContent\n        onClose={() => setAssetToEdit(undefined)}\n        asset={assetToEdit as EditAsset}\n        canUpdate={canUpdate}\n        canCopyLink={canCopyLink}\n        canDownload={canDownload}\n        trackedLocation={trackedLocation}\n      />\n    );\n  }\n\n  if (folderToEdit) {\n    return (\n      <EditFolderContent\n        folder={folderToEdit as FolderDefinition}\n        onClose={() => setFolderToEdit(undefined)}\n        location=\"content-manager\"\n        parentFolderId={queryObject?.folder as string | number | null | undefined}\n      />\n    );\n  }\n\n  const handleMoveItem = (hoverIndex: number, destIndex: number) => {\n    const offset = destIndex - hoverIndex;\n    const orderedAssetsClone = selectedAssets.slice();\n    const nextAssets = moveElement<Asset>(orderedAssetsClone, hoverIndex, offset);\n    setSelections(nextAssets);\n  };\n\n  const handleFolderChange = (folderId: number, folderPath?: string) => {\n    onChangeFolder(folderId);\n    if (onChangeFolderParam) {\n      onChangeFolderParam(folderId, folderPath);\n    }\n  };\n\n  return (\n    <>\n      <Modal.Header>\n        <Modal.Title>\n          {formatMessage({\n            id: getTrad('header.actions.add-assets'),\n            defaultMessage: 'Add new assets',\n          })}\n        </Modal.Title>\n      </Modal.Header>\n\n      <TabsRoot variant=\"simple\" value={activeTab} onValueChange={setActiveTab}>\n        <Flex paddingLeft={8} paddingRight={8} paddingTop={6} justifyContent=\"space-between\">\n          <Tabs.List>\n            <Tabs.Trigger value=\"browse\">\n              {formatMessage({\n                id: getTrad('modal.nav.browse'),\n                defaultMessage: 'Browse',\n              })}\n            </Tabs.Trigger>\n            <Tabs.Trigger value=\"selected\">\n              {formatMessage({\n                id: getTrad('modal.header.select-files'),\n                defaultMessage: 'Selected files',\n              })}\n              <Badge marginLeft={2}>{selectedAssets.length}</Badge>\n            </Tabs.Trigger>\n          </Tabs.List>\n          <Flex gap={2}>\n            <Button\n              variant=\"secondary\"\n              onClick={() => onAddFolder({ folderId: queryObject?.folder })}\n            >\n              {formatMessage({\n                id: getTrad('modal.upload-list.sub-header.add-folder'),\n                defaultMessage: 'Add folder',\n              })}\n            </Button>\n            <Button onClick={() => onAddAsset({ folderId: queryObject?.folder })}>\n              {formatMessage({\n                id: getTrad('modal.upload-list.sub-header.button'),\n                defaultMessage: 'Add more assets',\n              })}\n            </Button>\n          </Flex>\n        </Flex>\n        <Divider />\n        <Modal.Body>\n          <Tabs.Content value=\"browse\">\n            <BrowseStep\n              allowedTypes={allowedTypes}\n              assets={assets!}\n              canCreate={canCreate}\n              canRead={canRead}\n              folders={folders as FolderWithType[]}\n              onSelectAsset={handleSelectAsset}\n              selectedAssets={selectedAssets}\n              multiple={multiple}\n              onSelectAllAsset={handleSelectAllAssets}\n              onEditAsset={setAssetToEdit}\n              onEditFolder={setFolderToEdit}\n              pagination={pagination!}\n              queryObject={queryObject!}\n              onAddAsset={onAddAsset}\n              onChangeFilters={(filters: FilterCondition<string>[] | BrowseFilter[]) =>\n                onChangeFilters!(filters as FilterCondition<string>[])\n              }\n              onChangeFolder={handleFolderChange}\n              onChangePage={onChangePage!}\n              onChangePageSize={onChangePageSize!}\n              onChangeSort={(sort: string | undefined) => onChangeSort!(sort as Query['sort'])}\n              onChangeSearch={onChangeSearch!}\n            />\n          </Tabs.Content>\n          <Tabs.Content value=\"selected\">\n            <SelectedStep\n              selectedAssets={selectedAssets}\n              onSelectAsset={handleSelectAsset}\n              onReorderAsset={handleMoveItem}\n            />\n          </Tabs.Content>\n        </Modal.Body>\n      </TabsRoot>\n      <DialogFooter onClose={onClose} onValidate={() => onValidate(selectedAssets)} />\n    </>\n  );\n};\n\ninterface AssetDialogProps extends AssetContentProps {\n  open?: boolean;\n}\n\nexport const AssetDialog = ({ open = false, onClose, ...restProps }: AssetDialogProps) => {\n  return (\n    <Modal.Root open={open} onOpenChange={onClose}>\n      <Modal.Content>\n        <AssetContent onClose={onClose} {...restProps} />\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nconst TabsRoot = styled(Tabs.Root)`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n", "import * as React from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { stringify } from 'qs';\n\nimport { useConfig } from './useConfig';\n\nimport type { Query, FilterCondition } from '../../../shared/contracts/files';\n\nexport const useModalQueryParams = (initialState?: Partial<Query>) => {\n  const { trackUsage } = useTracking();\n  const {\n    config: { data: config },\n  } = useConfig();\n\n  const [queryObject, setQueryObject] = React.useState<Query>({\n    page: 1,\n    sort: 'updatedAt:DESC',\n    pageSize: 10,\n    filters: {\n      $and: [],\n    },\n    ...initialState,\n  });\n\n  React.useEffect(() => {\n    if (config && 'sort' in config && 'pageSize' in config) {\n      setQueryObject((prevQuery) => ({\n        ...prevQuery,\n        sort: config.sort,\n        pageSize: config.pageSize,\n      }));\n    }\n  }, [config]);\n\n  const handleChangeFilters = (nextFilters: FilterCondition<string>[]) => {\n    if (nextFilters) {\n      trackUsage('didFilterMediaLibraryElements', {\n        location: 'content-manager',\n        filter: Object.keys(nextFilters[nextFilters.length - 1])[0],\n      });\n      setQueryObject((prev) => ({ ...prev, page: 1, filters: { $and: nextFilters } }));\n    }\n  };\n\n  const handleChangePageSize = (pageSize: Query['pageSize']) => {\n    setQueryObject((prev) => ({\n      ...prev,\n      pageSize: typeof pageSize === 'string' ? parseInt(pageSize, 10) : pageSize,\n      page: 1,\n    }));\n  };\n\n  const handeChangePage = (page: Query['page']) => {\n    setQueryObject((prev) => ({ ...prev, page }));\n  };\n\n  const handleChangeSort = (sort: Query['sort']) => {\n    if (sort) {\n      trackUsage('didSortMediaLibraryElements', {\n        location: 'content-manager',\n        sort,\n      });\n      setQueryObject((prev) => ({ ...prev, sort }));\n    }\n  };\n\n  const handleChangeSearch = (_q: Query['_q'] | null) => {\n    if (_q) {\n      setQueryObject((prev) => ({ ...prev, _q, page: 1 }));\n    } else {\n      const newState: Query = { page: 1 };\n\n      Object.keys(queryObject).forEach((key) => {\n        if (!['page', '_q'].includes(key)) {\n          (newState as Record<string, string | number | undefined>)[key] = (\n            queryObject as Record<string, string | number | undefined>\n          )[key];\n        }\n      });\n\n      setQueryObject(newState);\n    }\n  };\n\n  const handleChangeFolder = (folder: Query['folder'], folderPath: Query['folderPath']) => {\n    setQueryObject((prev) => ({ ...prev, folder: folder ?? null, folderPath }));\n  };\n\n  return [\n    { queryObject, rawQuery: stringify(queryObject, { encode: false }) },\n    {\n      onChangeFilters: handleChangeFilters,\n      onChangeFolder: handleChangeFolder,\n      onChangePage: handeChangePage,\n      onChangePageSize: handleChangePageSize,\n      onChangeSort: handleChangeSort,\n      onChangeSearch: handleChangeSearch,\n    },\n  ];\n};\n", "import * as React from 'react';\n\nimport { Button, Popover } from '@strapi/design-system';\nimport { Filter } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { displayedFilters } from '../../../utils';\nimport { FilterList } from '../../FilterList/FilterList';\nimport { FilterPopover } from '../../FilterPopover/FilterPopover';\n\ntype NumberKeyedObject = Record<number, string>;\n\ntype StringFilter = {\n  [key: string]: string;\n};\n\ntype MimeFilter = {\n  [key: string]:\n    | string\n    | NumberKeyedObject\n    | Record<string, string | NumberKeyedObject>\n    | undefined;\n};\n\nexport type FilterStructure = {\n  [key: string]: MimeFilter | StringFilter | undefined;\n};\n\nexport type Filter = {\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\n    | {\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\n          | string[]\n          | string\n          | { $contains: string[] };\n      }\n    | undefined;\n};\n\ninterface FiltersProps {\n  appliedFilters: FilterStructure[];\n  onChangeFilters: (filters: Filter[]) => void;\n}\n\nexport const Filters = ({ appliedFilters, onChangeFilters }: FiltersProps) => {\n  const [open, setOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger>\n        <Button variant=\"tertiary\" startIcon={<Filter />} size=\"S\">\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n        </Button>\n      </Popover.Trigger>\n      <FilterPopover\n        onToggle={() => setOpen((prev) => !prev)}\n        displayedFilters={displayedFilters}\n        filters={appliedFilters}\n        onSubmit={onChangeFilters}\n      />\n\n      {appliedFilters && (\n        <FilterList\n          appliedFilters={appliedFilters}\n          filtersSchema={displayedFilters}\n          onRemoveFilter={onChangeFilters}\n        />\n      )}\n    </Popover.Root>\n  );\n};\n", "import { Box, Flex, SingleSelectOption, SingleSelect, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface PageSizeProps {\n  onChangePageSize: (value: number) => void;\n  pageSize: number;\n}\n\nexport const PageSize = ({ onChangePageSize, pageSize }: PageSizeProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange = (value: string | number) => {\n    onChangePageSize(Number(value));\n  };\n\n  return (\n    <Flex>\n      <SingleSelect\n        size=\"S\"\n        aria-label={formatMessage({\n          id: 'components.PageFooter.select',\n          defaultMessage: 'Entries per page',\n        })}\n        onChange={handleChange}\n        value={pageSize.toString()}\n      >\n        <SingleSelectOption value=\"10\">10</SingleSelectOption>\n        <SingleSelectOption value=\"20\">20</SingleSelectOption>\n        <SingleSelectOption value=\"50\">50</SingleSelectOption>\n        <SingleSelectOption value=\"100\">100</SingleSelectOption>\n      </SingleSelect>\n      <Box paddingLeft={2}>\n        <Typography textColor=\"neutral600\" tag=\"label\" htmlFor=\"page-size\">\n          {formatMessage({\n            id: 'components.PageFooter.select',\n            defaultMessage: 'Entries per page',\n          })}\n        </Typography>\n      </Box>\n    </Flex>\n  );\n};\n", "import * as React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\n\nconst PaginationContext = React.createContext({ activePage: 1, pageCount: 1 });\nexport const usePagination = () => React.useContext(PaginationContext);\n\ninterface PaginationProps {\n  activePage: number;\n  children: React.ReactNode;\n  label?: string;\n  pageCount: number;\n}\n\nexport const Pagination = ({\n  children,\n  activePage,\n  pageCount,\n  label = 'pagination',\n}: PaginationProps) => {\n  const paginationValue = React.useMemo(() => ({ activePage, pageCount }), [activePage, pageCount]);\n\n  return (\n    <PaginationContext.Provider value={paginationValue}>\n      <Box tag=\"nav\" aria-label={label}>\n        <Flex tag=\"ul\" gap={1}>\n          {children}\n        </Flex>\n      </Box>\n    </PaginationContext.Provider>\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\n/**\n * The component works as follows: this is a duplicate of the helper-plugin one but without the router\n * `1` , 2, 3, ... 10\n * 1, `2`, 3, ... 10\n * 1, 2, `3`, 4, ... 10\n * 1, 2, 3, `4`, 5, ... 10\n * 1, ..,4, `5`, 6, ... 10\n *\n * 1, ...., 8, 9, `10`\n * 1, ...., 8, `9`, 10\n * 1, ...., 7, `8`, 9, 10\n * 1, ... 6, `7`, 8, 9, 10\n */\nimport { Typography, VisuallyHidden } from '@strapi/design-system';\nimport { ChevronLeft, ChevronRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled, css } from 'styled-components';\n\nimport { Pagination, usePagination } from './Pagination';\n\nconst PaginationText = styled(Typography)`\n  line-height: revert;\n`;\n\nconst linkWrapperStyles = css<{ $active?: boolean }>`\n  padding: ${({ theme }) => theme.spaces[3]};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: ${({ $active, theme }) => ($active ? theme.shadows.filterShadow : undefined)};\n  text-decoration: none;\n  display: flex;\n  position: relative;\n  outline: none;\n\n  &:after {\n    transition-property: all;\n    transition-duration: 0.2s;\n    border-radius: 8px;\n    content: '';\n    position: absolute;\n    top: -4px;\n    bottom: -4px;\n    left: -4px;\n    right: -4px;\n    border: 2px solid transparent;\n  }\n\n  &:focus-visible {\n    outline: none;\n\n    &:after {\n      border-radius: 8px;\n      content: '';\n      position: absolute;\n      top: -5px;\n      bottom: -5px;\n      left: -5px;\n      right: -5px;\n      border: 2px solid ${(props) => props.theme.colors.primary600};\n    }\n  }\n`;\n\nconst LinkWrapperButton = styled.button<{ $active?: boolean }>`\n  ${linkWrapperStyles}\n`;\n\nconst LinkWrapperDiv = styled.div<{ $active?: boolean }>`\n  ${linkWrapperStyles}\n`;\n\nLinkWrapperButton.defaultProps = { type: 'button' };\n\nconst PageLinkWrapper = styled(LinkWrapperButton)`\n  color: ${({ theme, $active }) => ($active ? theme.colors.primary700 : theme.colors.neutral800)};\n  background: ${({ theme, $active }) => ($active ? theme.colors.neutral0 : undefined)};\n\n  &:hover {\n    box-shadow: ${({ theme }) => theme.shadows.filterShadow};\n  }\n`;\n\nconst ActionLinkWrapper = styled(LinkWrapperButton)`\n  font-size: 1.1rem;\n  svg path {\n    fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral600)};\n  }\n\n  &:focus,\n  &:hover {\n    svg path {\n      fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral700)};\n    }\n  }\n\n  ${(p) =>\n    p['aria-disabled']\n      ? `\n  pointer-events: none;\n    `\n      : undefined}\n`;\n\nconst DotsWrapper = styled(LinkWrapperDiv)`\n  color: ${({ theme }) => theme.colors.neutral800};\n`;\n\ninterface PaginationLinkProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\ninterface PageLinkProps extends PaginationLinkProps {\n  number: number;\n}\n\nconst PreviousLink = ({ children, ...props }: PaginationLinkProps) => {\n  const { activePage } = usePagination();\n\n  const disabled = activePage === 1;\n\n  return (\n    <li>\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\n        <VisuallyHidden>{children}</VisuallyHidden>\n        <ChevronLeft aria-hidden />\n      </ActionLinkWrapper>\n    </li>\n  );\n};\n\nconst NextLink = ({ children, ...props }: PaginationLinkProps) => {\n  const { activePage, pageCount } = usePagination();\n\n  const disabled = activePage === pageCount;\n\n  return (\n    <li>\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\n        <VisuallyHidden>{children}</VisuallyHidden>\n        <ChevronRight aria-hidden />\n      </ActionLinkWrapper>\n    </li>\n  );\n};\n\nconst PageLink = ({ number, children, ...props }: PageLinkProps) => {\n  const { activePage } = usePagination();\n\n  const isActive = activePage === number;\n\n  return (\n    <li>\n      <PageLinkWrapper {...props} $active={isActive}>\n        <VisuallyHidden>{children}</VisuallyHidden>\n        <PaginationText aria-hidden variant=\"pi\" fontWeight={isActive ? 'bold' : ''}>\n          {number}\n        </PaginationText>\n      </PageLinkWrapper>\n    </li>\n  );\n};\n\ninterface DotsProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nconst Dots = ({ children, ...props }: DotsProps) => (\n  <li>\n    <DotsWrapper {...props} as=\"div\">\n      <VisuallyHidden>{children}</VisuallyHidden>\n      <PaginationText aria-hidden small>\n        …\n      </PaginationText>\n    </DotsWrapper>\n  </li>\n);\n\ninterface PaginationFooterProps {\n  activePage: number;\n  onChangePage: (page: number) => void;\n  pagination: {\n    pageCount: number;\n  };\n}\n\nexport const PaginationFooter = ({\n  activePage,\n  onChangePage,\n  pagination: { pageCount },\n}: PaginationFooterProps) => {\n  const { formatMessage } = useIntl();\n\n  const previousActivePage = activePage - 1;\n  const nextActivePage = activePage + 1;\n\n  const firstLinks = [\n    <PageLink\n      key={1}\n      number={1}\n      onClick={() => {\n        onChangePage(1);\n      }}\n    >\n      {formatMessage(\n        { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n        { page: 1 }\n      )}\n    </PageLink>,\n  ];\n\n  if (pageCount <= 4) {\n    const links = Array.from({ length: pageCount })\n      .map((_, i) => i + 1)\n      .map((number) => {\n        return (\n          <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\n            {formatMessage(\n              { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n              { page: number }\n            )}\n          </PageLink>\n        );\n      });\n\n    return (\n      <Pagination activePage={activePage} pageCount={pageCount}>\n        <PreviousLink onClick={() => onChangePage(previousActivePage)}>\n          {formatMessage({\n            id: 'components.pagination.go-to-previous',\n            defaultMessage: 'Go to previous page',\n          })}\n        </PreviousLink>\n        {links}\n        <NextLink onClick={() => onChangePage(nextActivePage)}>\n          {formatMessage({\n            id: 'components.pagination.go-to-next',\n            defaultMessage: 'Go to next page',\n          })}\n        </NextLink>\n      </Pagination>\n    );\n  }\n\n  let firstLinksToCreate: number[] = [];\n  const lastLinks: JSX.Element[] = [];\n  let lastLinksToCreate: number[] = [];\n  const middleLinks: JSX.Element[] = [];\n\n  if (pageCount > 1) {\n    lastLinks.push(\n      <PageLink key={pageCount} number={pageCount} onClick={() => onChangePage(pageCount)}>\n        {formatMessage(\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n          { page: pageCount }\n        )}\n      </PageLink>\n    );\n  }\n\n  if (activePage === 1 && pageCount >= 3) {\n    firstLinksToCreate = [2];\n  }\n\n  if (activePage === 2 && pageCount >= 3) {\n    if (pageCount === 5) {\n      firstLinksToCreate = [2, 3, 4];\n    } else if (pageCount === 3) {\n      firstLinksToCreate = [2];\n    } else {\n      firstLinksToCreate = [2, 3];\n    }\n  }\n\n  if (activePage === 4 && pageCount >= 3) {\n    firstLinksToCreate = [2];\n  }\n\n  if (activePage === pageCount && pageCount >= 3) {\n    lastLinksToCreate = [pageCount - 1];\n  }\n\n  if (activePage === pageCount - 2 && pageCount > 3) {\n    lastLinksToCreate = [activePage + 1, activePage, activePage - 1];\n  }\n\n  if (activePage === pageCount - 3 && pageCount > 3 && activePage > 5) {\n    lastLinksToCreate = [activePage + 2, activePage + 1, activePage, activePage - 1];\n  }\n\n  if (activePage === pageCount - 1 && pageCount > 3) {\n    lastLinksToCreate = [activePage, activePage - 1];\n  }\n\n  lastLinksToCreate.forEach((number) => {\n    lastLinks.unshift(\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\n        Go to page {number}\n      </PageLink>\n    );\n  });\n\n  firstLinksToCreate.forEach((number) => {\n    firstLinks.push(\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\n        {formatMessage(\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n          { page: number }\n        )}\n      </PageLink>\n    );\n  });\n\n  if (\n    ![1, 2].includes(activePage) &&\n    activePage <= pageCount - 3 &&\n    firstLinks.length + lastLinks.length < 6\n  ) {\n    const middleLinksToCreate = [activePage - 1, activePage, activePage + 1];\n\n    middleLinksToCreate.forEach((number) => {\n      middleLinks.push(\n        <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\n          {formatMessage(\n            { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n            { page: number }\n          )}\n        </PageLink>\n      );\n    });\n  }\n\n  const shouldShowDotsAfterFirstLink =\n    pageCount > 5 || (pageCount === 5 && (activePage === 1 || activePage === 5));\n  const shouldShowMiddleDots = middleLinks.length > 2 && activePage > 4 && pageCount > 5;\n\n  const beforeDotsLinksLength = shouldShowMiddleDots\n    ? pageCount - activePage - 1\n    : pageCount - firstLinks.length - lastLinks.length;\n  const afterDotsLength = shouldShowMiddleDots\n    ? pageCount - firstLinks.length - lastLinks.length\n    : pageCount - activePage - 1;\n\n  return (\n    <Pagination activePage={activePage} pageCount={pageCount}>\n      <PreviousLink onClick={() => onChangePage(previousActivePage)}>\n        {formatMessage({\n          id: 'components.pagination.go-to-previous',\n          defaultMessage: 'Go to previous page',\n        })}\n      </PreviousLink>\n      {firstLinks}\n      {shouldShowMiddleDots && (\n        <Dots>\n          {formatMessage(\n            {\n              id: 'components.pagination.remaining-links',\n              defaultMessage: 'And {number} other links',\n            },\n            { number: beforeDotsLinksLength }\n          )}\n        </Dots>\n      )}\n      {middleLinks}\n      {shouldShowDotsAfterFirstLink && (\n        <Dots>\n          {formatMessage(\n            {\n              id: 'components.pagination.remaining-links',\n              defaultMessage: 'And {number} other links',\n            },\n            { number: afterDotsLength }\n          )}\n        </Dots>\n      )}\n      {lastLinks}\n      <NextLink onClick={() => onChangePage(nextActivePage)}>\n        {formatMessage({\n          id: 'components.pagination.go-to-next',\n          defaultMessage: 'Go to next page',\n        })}\n      </NextLink>\n    </Pagination>\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { IconButton, Searchbar, SearchForm } from '@strapi/design-system';\nimport { Search } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../../utils';\n\nimport type { Query } from '../../../../../../shared/contracts/files';\n\ninterface SearchAssetProps {\n  onChangeSearch: (_q: Query['_q'] | null) => void;\n  queryValue?: Query['_q'] | null;\n}\n\nexport const SearchAsset = ({ onChangeSearch, queryValue = null }: SearchAssetProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [isOpen, setIsOpen] = React.useState(!!queryValue);\n  const [value, setValue] = React.useState(queryValue || '');\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\n\n  React.useLayoutEffect(() => {\n    if (isOpen) {\n      setTimeout(() => {\n        wrapperRef.current?.querySelector('input')?.focus();\n      }, 0);\n    }\n  }, [isOpen]);\n\n  const handleToggle = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const handleClear = () => {\n    handleToggle();\n    onChangeSearch(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    trackUsage('didSearchMediaLibraryElements', { location: 'content-manager' });\n    onChangeSearch(value);\n  };\n\n  if (isOpen) {\n    return (\n      <div ref={wrapperRef}>\n        <SearchForm onSubmit={handleSubmit}>\n          <Searchbar\n            name=\"search\"\n            onClear={handleClear}\n            onChange={(e) => setValue(e.target.value)}\n            clearLabel={formatMessage({\n              id: getTrad('search.clear.label'),\n              defaultMessage: 'Clear the search',\n            })}\n            aria-label=\"search\"\n            size=\"S\"\n            value={value}\n            placeholder={formatMessage({\n              id: getTrad('search.placeholder'),\n              defaultMessage: 'e.g: the first dog on the moon',\n            })}\n          >\n            {formatMessage({ id: getTrad('search.label'), defaultMessage: 'Search for an asset' })}\n          </Searchbar>\n        </SearchForm>\n      </div>\n    );\n  }\n\n  return (\n    <IconButton label=\"Search\" onClick={handleToggle}>\n      <Search />\n    </IconButton>\n  );\n};\n", "export const isSelectable = (allowedTypes: string[], mime = '') => {\n  if (!mime) return false;\n\n  const fileType = mime.split('/')[0];\n\n  return (\n    allowedTypes.includes(fileType) ||\n    (allowedTypes.includes('file') && !['video', 'image', 'audio'].includes(fileType))\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport {\n  Checkbox,\n  Box,\n  Button,\n  Divider,\n  Flex,\n  IconButton,\n  Typography,\n  VisuallyHidden,\n  Grid,\n} from '@strapi/design-system';\nimport { GridFour as GridIcon, List, Pencil, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { localStorageKeys, viewOptions } from '../../../constants';\nimport { useFolder } from '../../../hooks/useFolder';\nimport { usePersistentState } from '../../../hooks/usePersistentState';\nimport {\n  getBreadcrumbDataCM,\n  toSingularTypes,\n  getTrad,\n  getAllowedFiles,\n  BreadcrumbDataFolder,\n  AllowedFiles,\n} from '../../../utils';\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\nimport { Breadcrumbs } from '../../Breadcrumbs/Breadcrumbs';\nimport { EmptyAssets } from '../../EmptyAssets/EmptyAssets';\nimport { FolderCard } from '../../FolderCard/FolderCard/FolderCard';\nimport { FolderCardBody } from '../../FolderCard/FolderCardBody/FolderCardBody';\nimport { FolderCardBodyAction } from '../../FolderCard/FolderCardBodyAction/FolderCardBodyAction';\nimport { FolderGridList } from '../../FolderGridList/FolderGridList';\nimport { SortPicker } from '../../SortPicker/SortPicker';\nimport { TableList, FolderRow, FileRow } from '../../TableList/TableList';\n\nimport { Filters, FilterStructure as ImportedFilterStructure } from './Filters';\nimport { PageSize } from './PageSize';\nimport { PaginationFooter } from './PaginationFooter/PaginationFooter';\nimport { SearchAsset } from './SearchAsset/SearchAsset';\nimport { isSelectable } from './utils/isSelectable';\n\nimport type { File, Query, FilterCondition } from '../../../../../shared/contracts/files';\nimport type { Folder } from '../../../../../shared/contracts/folders';\nimport type { AllowedTypes } from '../../AssetCard/AssetCard';\n\nconst TypographyMaxWidth = styled(Typography)`\n  max-width: 100%;\n`;\n\nconst ActionContainer = styled(Box)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\ntype NumberKeyedObject = Record<number, string>;\n\ntype StringFilter = {\n  [key: string]: string;\n};\n\ntype MimeFilter = {\n  [key: string]:\n    | string\n    | NumberKeyedObject\n    | Record<string, string | NumberKeyedObject>\n    | undefined;\n};\n\nexport type FilterStructure = {\n  [key: string]: MimeFilter | StringFilter | undefined;\n};\n\nexport type Filter = {\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\n    | {\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\n          | string[]\n          | string\n          | { $contains: string[] };\n      }\n    | undefined;\n};\n\nexport interface FolderWithType extends Omit<Folder, 'children' | 'files'> {\n  folderURL?: string;\n  isSelectable?: boolean;\n  type?: string;\n  children?: Folder['children'] & {\n    count: number;\n  };\n  files?: Folder['files'] & {\n    count: number;\n  };\n}\n\nexport interface FileWithType extends File {\n  folderURL?: string;\n  isSelectable?: boolean;\n  type?: string;\n}\n\nexport interface BrowseStepProps {\n  allowedTypes?: AllowedTypes[];\n  assets: File[];\n  canCreate: boolean;\n  canRead: boolean;\n  folders?: FolderWithType[];\n  multiple?: boolean;\n  onAddAsset: () => void;\n  onChangeFilters: (filters: FilterCondition<string>[] | Filter[]) => void;\n  onChangeFolder: (id: number, path?: string) => void;\n  onChangePage: (page: number) => void;\n  onChangePageSize: (value: number) => void;\n  onChangeSort: (value: Query['sort'] | string) => void;\n  onChangeSearch: (_q?: Query['_q'] | null) => void;\n  onEditAsset: ((asset: FileWithType) => void) | null;\n  onEditFolder: ((folder: FolderRow) => void) | null;\n  onSelectAsset: (element: FileRow | FolderRow) => void;\n  onSelectAllAsset?: (checked: boolean | string, rows?: FolderRow[] | FileRow[]) => void;\n  queryObject: Query;\n  pagination: { pageCount: number };\n  selectedAssets: FileWithType[] | FolderWithType[];\n}\n\nexport const BrowseStep = ({\n  allowedTypes = [],\n  assets: rawAssets,\n  canCreate,\n  canRead,\n  folders = [],\n  multiple = false,\n  onAddAsset,\n  onChangeFilters,\n  onChangePage,\n  onChangePageSize,\n  onChangeSearch,\n  onChangeSort,\n  onChangeFolder,\n  onEditAsset,\n  onEditFolder,\n  onSelectAllAsset,\n  onSelectAsset,\n  pagination,\n  queryObject,\n  selectedAssets,\n}: BrowseStepProps) => {\n  const { formatMessage } = useIntl();\n  const [view, setView] = usePersistentState(localStorageKeys.modalView, viewOptions.GRID);\n  const isGridView = view === viewOptions.GRID;\n\n  const { data: currentFolder, isLoading: isCurrentFolderLoading } = useFolder(\n    queryObject?.folder as number | null | undefined,\n    {\n      enabled: canRead && !!queryObject?.folder,\n    }\n  );\n\n  const singularTypes = toSingularTypes(allowedTypes);\n  const assets = rawAssets.map((asset) => ({\n    ...asset,\n    isSelectable: isSelectable(singularTypes, asset?.mime),\n    type: 'asset',\n  }));\n\n  const breadcrumbs = !isCurrentFolderLoading\n    ? getBreadcrumbDataCM(currentFolder as BreadcrumbDataFolder)\n    : undefined;\n\n  const allAllowedAsset = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\n  const areAllAssetSelected =\n    allAllowedAsset.length > 0 &&\n    selectedAssets.length > 0 &&\n    allAllowedAsset.every(\n      (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\n    );\n  const hasSomeAssetSelected = allAllowedAsset.some(\n    (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\n  );\n  const isSearching = !!queryObject?._q;\n  const isFiltering = !!queryObject?.filters?.$and?.length && queryObject.filters.$and.length > 0;\n  const isSearchingOrFiltering = isSearching || isFiltering;\n  const assetCount = assets.length;\n  const folderCount = folders.length;\n  const handleClickFolderCard = (...args: Parameters<typeof onChangeFolder>) => {\n    // Search query will always fetch the same results\n    // we remove it here to allow navigating in a folder and see the result of this navigation\n    onChangeSearch('');\n    onChangeFolder(...args);\n  };\n\n  return (\n    <Box>\n      {onSelectAllAsset && (\n        <Box paddingBottom={4}>\n          <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\n            {(assetCount > 0 || folderCount > 0 || isFiltering) && (\n              <Flex gap={2} wrap=\"wrap\">\n                {multiple && isGridView && (\n                  <Flex\n                    paddingLeft={2}\n                    paddingRight={2}\n                    background=\"neutral0\"\n                    hasRadius\n                    borderColor=\"neutral200\"\n                    height=\"3.2rem\"\n                  >\n                    <Checkbox\n                      aria-label={formatMessage({\n                        id: getTrad('bulk.select.label'),\n                        defaultMessage: 'Select all assets',\n                      })}\n                      checked={\n                        !areAllAssetSelected && hasSomeAssetSelected\n                          ? 'indeterminate'\n                          : areAllAssetSelected\n                      }\n                      onCheckedChange={onSelectAllAsset}\n                    />\n                  </Flex>\n                )}\n                {isGridView && <SortPicker onChangeSort={onChangeSort} value={queryObject?.sort} />}\n                <Filters\n                  appliedFilters={queryObject?.filters?.$and as ImportedFilterStructure[]}\n                  onChangeFilters={onChangeFilters}\n                />\n              </Flex>\n            )}\n\n            {(assetCount > 0 || folderCount > 0 || isSearching) && (\n              <Flex marginLeft=\"auto\" shrink={0} gap={2}>\n                <ActionContainer paddingTop={1} paddingBottom={1}>\n                  <IconButton\n                    label={\n                      isGridView\n                        ? formatMessage({\n                            id: 'view-switch.list',\n                            defaultMessage: 'List View',\n                          })\n                        : formatMessage({\n                            id: 'view-switch.grid',\n                            defaultMessage: 'Grid View',\n                          })\n                    }\n                    onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\n                  >\n                    {isGridView ? <List /> : <GridIcon />}\n                  </IconButton>\n                </ActionContainer>\n                <SearchAsset onChangeSearch={onChangeSearch} queryValue={queryObject._q || ''} />\n              </Flex>\n            )}\n          </Flex>\n        </Box>\n      )}\n\n      {canRead && breadcrumbs?.length && breadcrumbs.length > 0 && currentFolder && (\n        <Box paddingTop={3}>\n          <Breadcrumbs\n            onChangeFolder={onChangeFolder}\n            label={formatMessage({\n              id: getTrad('header.breadcrumbs.nav.label'),\n              defaultMessage: 'Folders navigation',\n            })}\n            breadcrumbs={breadcrumbs as BreadcrumbDataFolder[]}\n            currentFolderId={queryObject?.folder as number | undefined}\n          />\n        </Box>\n      )}\n\n      {assetCount === 0 && folderCount === 0 && (\n        <Box paddingBottom={6}>\n          <EmptyAssets\n            size=\"S\"\n            count={6}\n            action={\n              canCreate &&\n              !isFiltering &&\n              !isSearching && (\n                <Button variant=\"secondary\" startIcon={<Plus />} onClick={onAddAsset}>\n                  {formatMessage({\n                    id: getTrad('header.actions.add-assets'),\n                    defaultMessage: 'Add new assets',\n                  })}\n                </Button>\n              )\n            }\n            content={\n              // eslint-disable-next-line no-nested-ternary\n              isSearchingOrFiltering\n                ? formatMessage({\n                    id: getTrad('list.assets-empty.title-withSearch'),\n                    defaultMessage: 'There are no assets with the applied filters',\n                  })\n                : canCreate && !isSearching\n                  ? formatMessage({\n                      id: getTrad('list.assets.empty'),\n                      defaultMessage: 'Upload your first assets...',\n                    })\n                  : formatMessage({\n                      id: getTrad('list.assets.empty.no-permissions'),\n                      defaultMessage: 'The asset list is empty',\n                    })\n            }\n          />\n        </Box>\n      )}\n\n      {!isGridView && (folderCount > 0 || assetCount > 0) && (\n        <TableList\n          allowedTypes={allowedTypes}\n          assetCount={assetCount}\n          folderCount={folderCount}\n          indeterminate={!areAllAssetSelected && hasSomeAssetSelected}\n          isFolderSelectionAllowed={false}\n          onChangeSort={onChangeSort}\n          onChangeFolder={handleClickFolderCard}\n          onEditAsset={onEditAsset}\n          onEditFolder={onEditFolder}\n          onSelectOne={onSelectAsset}\n          onSelectAll={onSelectAllAsset!}\n          rows={\n            [...folders.map((folder) => ({ ...folder, type: 'folder' })), ...assets] as\n              | FolderRow[]\n              | FileRow[]\n          }\n          selected={selectedAssets}\n          shouldDisableBulkSelect={!multiple}\n          sortQuery={queryObject?.sort ?? ''}\n        />\n      )}\n\n      {isGridView && (\n        <>\n          {folderCount > 0 && (\n            <FolderGridList\n              title={\n                (((isSearchingOrFiltering && assetCount > 0) || !isSearchingOrFiltering) &&\n                  formatMessage(\n                    {\n                      id: getTrad('list.folders.title'),\n                      defaultMessage: 'Folders ({count})',\n                    },\n                    { count: folderCount }\n                  )) ||\n                ''\n              }\n            >\n              {folders.map((folder) => {\n                return (\n                  <Grid.Item\n                    col={3}\n                    key={`folder-${folder.id}`}\n                    direction=\"column\"\n                    alignItems=\"stretch\"\n                  >\n                    <FolderCard\n                      ariaLabel={folder.name}\n                      id={`folder-${folder.id}`}\n                      onClick={() => handleClickFolderCard(folder.id, folder.path)}\n                      cardActions={\n                        onEditFolder && (\n                          <IconButton\n                            withTooltip={false}\n                            label={formatMessage({\n                              id: getTrad('list.folder.edit'),\n                              defaultMessage: 'Edit folder',\n                            })}\n                            onClick={() => onEditFolder(folder)}\n                          >\n                            <Pencil />\n                          </IconButton>\n                        )\n                      }\n                    >\n                      <FolderCardBody>\n                        <FolderCardBodyAction\n                          onClick={() => handleClickFolderCard(folder.id, folder.path)}\n                        >\n                          <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\n                            <TypographyMaxWidth\n                              fontWeight=\"semiBold\"\n                              ellipsis\n                              textColor=\"neutral800\"\n                            >\n                              {folder.name}\n                              {/* VisuallyHidden dash here allows to separate folder title and count informations\n                              for voice reading structure purpose */}\n                              <VisuallyHidden>-</VisuallyHidden>\n                            </TypographyMaxWidth>\n                            <TypographyMaxWidth\n                              tag=\"span\"\n                              textColor=\"neutral600\"\n                              variant=\"pi\"\n                              ellipsis\n                            >\n                              {formatMessage(\n                                {\n                                  id: getTrad('list.folder.subtitle'),\n                                  defaultMessage:\n                                    '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\n                                },\n                                {\n                                  folderCount: folder.children?.count,\n                                  filesCount: folder.files?.count,\n                                }\n                              )}\n                            </TypographyMaxWidth>\n                          </Flex>\n                        </FolderCardBodyAction>\n                      </FolderCardBody>\n                    </FolderCard>\n                  </Grid.Item>\n                );\n              })}\n            </FolderGridList>\n          )}\n\n          {assetCount > 0 && folderCount > 0 && (\n            <Box paddingTop={6}>\n              <Divider />\n            </Box>\n          )}\n\n          {assetCount > 0 && (\n            <Box paddingTop={6}>\n              <AssetGridList\n                allowedTypes={allowedTypes}\n                size=\"S\"\n                assets={assets}\n                onSelectAsset={onSelectAsset}\n                selectedAssets={selectedAssets as FileWithType[]}\n                onEditAsset={onEditAsset!}\n                title={\n                  ((!isSearchingOrFiltering || (isSearchingOrFiltering && folderCount > 0)) &&\n                    queryObject.page === 1 &&\n                    formatMessage(\n                      {\n                        id: getTrad('list.assets.title'),\n                        defaultMessage: 'Assets ({count})',\n                      },\n                      { count: assetCount }\n                    )) ||\n                  ''\n                }\n              />\n            </Box>\n          )}\n        </>\n      )}\n\n      {pagination.pageCount > 0 && (\n        <Flex justifyContent=\"space-between\" paddingTop={4} position=\"relative\" zIndex={1}>\n          <PageSize\n            pageSize={queryObject.pageSize! as number}\n            onChangePageSize={onChangePageSize}\n          />\n          <PaginationFooter\n            activePage={queryObject.page as number}\n            onChangePage={onChangePage}\n            pagination={pagination}\n          />\n        </Flex>\n      )}\n    </Box>\n  );\n};\n", "import { Button, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface DialogFooterProps {\n  onClose: () => void;\n  onValidate?: () => void;\n}\n\nexport const DialogFooter = ({ onClose, onValidate }: DialogFooterProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Footer>\n      <Button onClick={onClose} variant=\"tertiary\">\n        {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n      </Button>\n      {onValidate && (\n        <Button onClick={onValidate}>\n          {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n        </Button>\n      )}\n    </Modal.Footer>\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\n\nimport type { File } from '../../../../../shared/contracts/files';\n\ninterface SelectedStepProps {\n  onSelectAsset: (asset: File) => void;\n  selectedAssets: File[];\n  onReorderAsset?: (fromIndex: number, toIndex: number) => void;\n}\n\nexport const SelectedStep = ({\n  selectedAssets,\n  onSelectAsset,\n  onReorderAsset,\n}: SelectedStepProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n      <Flex gap={0} direction=\"column\" alignItems=\"start\">\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\n          {formatMessage(\n            {\n              id: getTrad('list.assets.to-upload'),\n              defaultMessage:\n                '{number, plural, =0 {No asset} one {1 asset} other {# assets}} ready to upload',\n            },\n            { number: selectedAssets.length }\n          )}\n        </Typography>\n        <Typography variant=\"pi\" textColor=\"neutral600\">\n          {formatMessage({\n            id: getTrad('modal.upload-list.sub-header-subtitle'),\n            defaultMessage: 'Manage the assets before adding them to the Media Library',\n          })}\n        </Typography>\n      </Flex>\n\n      <AssetGridList\n        size=\"S\"\n        assets={selectedAssets}\n        onSelectAsset={onSelectAsset}\n        selectedAssets={selectedAssets}\n        onReorderAsset={onReorderAsset}\n      />\n    </Flex>\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { useField, useNotification } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad, getAllowedFiles, AllowedFiles } from '../../utils';\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\nimport { UploadAssetDialog, Asset } from '../UploadAssetDialog/UploadAssetDialog';\n\nimport { CarouselAssets, CarouselAssetsProps, FileWithoutIdHash } from './Carousel/CarouselAssets';\n\nimport type { File } from '../../../../shared/contracts/files';\ntype AllowedTypes = 'files' | 'images' | 'videos' | 'audios';\n\nconst STEPS = {\n  AssetSelect: 'SelectAsset',\n  AssetUpload: 'UploadAsset',\n  FolderCreate: 'FolderCreate',\n};\n\nexport interface MediaLibraryInputProps {\n  required?: boolean;\n  name: string;\n  labelAction?: React.ReactNode;\n  label?: string;\n  hint?: string;\n  disabled?: boolean;\n  attribute?: {\n    allowedTypes?: AllowedTypes[];\n    multiple?: boolean;\n  };\n}\n\nexport const MediaLibraryInput = React.forwardRef<CarouselAssetsProps, MediaLibraryInputProps>(\n  (\n    {\n      attribute: { allowedTypes = null, multiple = false } = {},\n      label,\n      hint,\n      disabled = false,\n      labelAction = undefined,\n      name,\n      required = false,\n    },\n    forwardedRef\n  ) => {\n    const { formatMessage } = useIntl();\n    const { onChange, value, error } = useField(name);\n    const [uploadedFiles, setUploadedFiles] = React.useState<Asset[] | File[]>([]);\n    const [step, setStep] = React.useState<string | undefined>(undefined);\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n    const [droppedAssets, setDroppedAssets] = React.useState<AllowedFiles[]>();\n    const [folderId, setFolderId] = React.useState<number | null>(null);\n    const { toggleNotification } = useNotification();\n\n    React.useEffect(() => {\n      // Clear the uploaded files on close\n      if (step === undefined) {\n        setUploadedFiles([]);\n      }\n    }, [step]);\n\n    let selectedAssets: File[] = [];\n\n    if (Array.isArray(value)) {\n      selectedAssets = value;\n    } else if (value) {\n      selectedAssets = [value];\n    }\n\n    const handleValidation = (nextSelectedAssets: File[]) => {\n      const value = multiple ? nextSelectedAssets : nextSelectedAssets[0];\n      onChange(name, value);\n      setStep(undefined);\n    };\n\n    const handleDeleteAssetFromMediaLibrary = () => {\n      let nextValue;\n\n      if (multiple) {\n        const nextSelectedAssets = selectedAssets.filter(\n          (_, assetIndex) => assetIndex !== selectedIndex\n        );\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\n      } else {\n        nextValue = null;\n      }\n\n      const value = nextValue;\n      onChange(name, value);\n\n      setSelectedIndex(0);\n    };\n\n    const handleDeleteAsset = (asset: File) => {\n      let nextValue;\n\n      if (multiple) {\n        const nextSelectedAssets = selectedAssets.filter((prevAsset) => prevAsset.id !== asset.id);\n\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\n      } else {\n        nextValue = null;\n      }\n\n      onChange(name, nextValue);\n\n      setSelectedIndex(0);\n    };\n\n    const handleAssetEdit = (asset: File) => {\n      const nextSelectedAssets = selectedAssets.map((prevAsset) =>\n        prevAsset.id === asset.id ? asset : prevAsset\n      );\n\n      onChange(name, multiple ? nextSelectedAssets : nextSelectedAssets[0]);\n    };\n\n    const validateAssetsTypes = (\n      assets: FileWithoutIdHash[] | Asset[],\n      callback: (assets?: AllowedFiles[], error?: string) => void\n    ) => {\n      const allowedAssets = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\n\n      if (allowedAssets.length > 0) {\n        callback(allowedAssets);\n      } else {\n        toggleNotification({\n          type: 'danger',\n          timeout: 4000,\n          message: formatMessage(\n            {\n              id: getTrad('input.notification.not-supported'),\n              defaultMessage: `You can't upload this type of file.`,\n            },\n            {\n              fileTypes: (allowedTypes ?? []).join(','),\n            }\n          ),\n        });\n      }\n    };\n\n    const handleAssetDrop = (assets: FileWithoutIdHash[]) => {\n      validateAssetsTypes(assets, (allowedAssets?: AllowedFiles[]) => {\n        setDroppedAssets(allowedAssets);\n        setStep(STEPS.AssetUpload);\n      });\n    };\n\n    if (multiple && selectedAssets.length > 0) {\n      label = `${label} (${selectedIndex + 1} / ${selectedAssets.length})`;\n    }\n\n    const handleNext = () => {\n      setSelectedIndex((current) => (current < selectedAssets.length - 1 ? current + 1 : 0));\n    };\n\n    const handlePrevious = () => {\n      setSelectedIndex((current) => (current > 0 ? current - 1 : selectedAssets.length - 1));\n    };\n\n    const handleFilesUploadSucceeded = (uploadedFiles: Asset[] | File[]) => {\n      setUploadedFiles((prev) => [...prev, ...uploadedFiles]);\n    };\n\n    let initiallySelectedAssets = selectedAssets;\n\n    if (uploadedFiles.length > 0) {\n      const allowedUploadedFiles = getAllowedFiles(allowedTypes, uploadedFiles as AllowedFiles[]);\n\n      initiallySelectedAssets = multiple\n        ? [...allowedUploadedFiles, ...selectedAssets]\n        : [allowedUploadedFiles[0]];\n    }\n\n    return (\n      <>\n        <CarouselAssets\n          ref={forwardedRef}\n          assets={selectedAssets}\n          disabled={disabled}\n          label={label!}\n          labelAction={labelAction}\n          onDeleteAsset={handleDeleteAsset}\n          onDeleteAssetFromMediaLibrary={handleDeleteAssetFromMediaLibrary}\n          onAddAsset={() => setStep(STEPS.AssetSelect)}\n          onDropAsset={handleAssetDrop}\n          onEditAsset={handleAssetEdit}\n          onNext={handleNext}\n          onPrevious={handlePrevious}\n          error={error}\n          hint={hint}\n          required={required}\n          selectedAssetIndex={selectedIndex}\n          trackedLocation=\"content-manager\"\n        />\n\n        {step === STEPS.AssetSelect && (\n          <AssetDialog\n            allowedTypes={allowedTypes as AllowedTypes[]}\n            initiallySelectedAssets={initiallySelectedAssets}\n            folderId={folderId}\n            onClose={() => {\n              setStep(undefined);\n              setFolderId(null);\n            }}\n            open={step === STEPS.AssetSelect}\n            onValidate={handleValidation}\n            multiple={multiple}\n            onAddAsset={() => setStep(STEPS.AssetUpload)}\n            onAddFolder={() => setStep(STEPS.FolderCreate)}\n            onChangeFolder={(folder) => setFolderId(folder)}\n            trackedLocation=\"content-manager\"\n          />\n        )}\n\n        {step === STEPS.AssetUpload && (\n          <UploadAssetDialog\n            open={step === STEPS.AssetUpload}\n            onClose={() => setStep(STEPS.AssetSelect)}\n            initialAssetsToAdd={droppedAssets as Asset[]}\n            addUploadedFiles={handleFilesUploadSucceeded}\n            trackedLocation=\"content-manager\"\n            folderId={folderId}\n            validateAssetsTypes={validateAssetsTypes}\n          />\n        )}\n\n        {step === STEPS.FolderCreate && (\n          <EditFolderDialog\n            open={step === STEPS.FolderCreate}\n            onClose={() => setStep(STEPS.AssetSelect)}\n            parentFolderId={folderId}\n          />\n        )}\n      </>\n    );\n  }\n);\n", "import * as React from 'react';\n\nimport { CarouselInput, CarouselSlide } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils/getTrad';\nimport { EditAssetDialog } from '../../EditAssetDialog/EditAssetContent';\n\nimport { CarouselAsset } from './CarouselAsset';\nimport { CarouselAssetActions } from './CarouselAssetActions';\nimport { EmptyStateAsset } from './EmptyStateAsset';\n\nimport type { File as FileAsset, RawFile } from '../../../../../shared/contracts/files';\n\nexport type FileWithoutIdHash = Omit<FileAsset, 'id' | 'hash'>;\n\ninterface Asset extends Omit<FileAsset, 'folder'> {\n  isLocal?: boolean;\n  rawFile?: RawFile;\n  folder?: FileAsset['folder'] & { id: number };\n}\n\nexport interface CarouselAssetsProps {\n  assets: FileAsset[];\n  disabled?: boolean;\n  error?: string;\n  hint?: string;\n  label: string;\n  labelAction?: React.ReactNode;\n  onAddAsset: (asset?: FileAsset, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\n  onDeleteAsset: (asset: FileAsset) => void;\n  onDeleteAssetFromMediaLibrary: () => void;\n  onDropAsset?: (assets: FileWithoutIdHash[]) => void;\n  onEditAsset?: (asset: FileAsset) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n  required?: boolean;\n  selectedAssetIndex: number;\n  trackedLocation?: string;\n}\n\nexport const CarouselAssets = React.forwardRef(\n  (\n    {\n      assets,\n      disabled = false,\n      error,\n      hint,\n      label,\n      labelAction,\n      onAddAsset,\n      onDeleteAsset,\n      onDeleteAssetFromMediaLibrary,\n      onDropAsset,\n      onEditAsset,\n      onNext,\n      onPrevious,\n      required = false,\n      selectedAssetIndex,\n      trackedLocation,\n    }: CarouselAssetsProps,\n    forwardedRef\n  ) => {\n    const { formatMessage } = useIntl();\n    const [isEditingAsset, setIsEditingAsset] = React.useState(false);\n\n    const currentAsset = assets[selectedAssetIndex];\n\n    return (\n      <>\n        <CarouselInput\n          ref={forwardedRef as React.Ref<HTMLDivElement>}\n          label={label}\n          labelAction={labelAction}\n          secondaryLabel={currentAsset?.name}\n          selectedSlide={selectedAssetIndex}\n          previousLabel={formatMessage({\n            id: getTrad('mediaLibraryInput.actions.previousSlide'),\n            defaultMessage: 'Previous slide',\n          })}\n          nextLabel={formatMessage({\n            id: getTrad('mediaLibraryInput.actions.nextSlide'),\n            defaultMessage: 'Next slide',\n          })}\n          onNext={onNext}\n          onPrevious={onPrevious}\n          hint={hint}\n          error={error}\n          required={required}\n          actions={\n            currentAsset ? (\n              <CarouselAssetActions\n                asset={currentAsset}\n                onDeleteAsset={disabled ? undefined : onDeleteAsset}\n                onAddAsset={disabled ? undefined : onAddAsset}\n                onEditAsset={onEditAsset ? () => setIsEditingAsset(true) : undefined}\n              />\n            ) : undefined\n          }\n        >\n          {assets.length === 0 ? (\n            <CarouselSlide\n              label={formatMessage(\n                {\n                  id: getTrad('mediaLibraryInput.slideCount'),\n                  defaultMessage: '{n} of {m} slides',\n                },\n                { n: 1, m: 1 }\n              )}\n            >\n              <EmptyStateAsset\n                disabled={disabled}\n                onClick={onAddAsset}\n                onDropAsset={onDropAsset!}\n              />\n            </CarouselSlide>\n          ) : (\n            assets.map((asset, index) => (\n              <CarouselSlide\n                key={asset.id}\n                label={formatMessage(\n                  {\n                    id: getTrad('mediaLibraryInput.slideCount'),\n                    defaultMessage: '{n} of {m} slides',\n                  },\n                  { n: index + 1, m: assets.length }\n                )}\n              >\n                <CarouselAsset asset={asset} />\n              </CarouselSlide>\n            ))\n          )}\n        </CarouselInput>\n        <EditAssetDialog\n          open={isEditingAsset}\n          onClose={(editedAsset) => {\n            setIsEditingAsset(false);\n\n            // The asset has been deleted\n            if (editedAsset === null) {\n              onDeleteAssetFromMediaLibrary();\n            }\n            if (editedAsset && typeof editedAsset !== 'boolean') {\n              onEditAsset?.(editedAsset);\n            }\n          }}\n          asset={currentAsset as Asset}\n          canUpdate\n          canCopyLink\n          canDownload\n          trackedLocation={trackedLocation}\n        />\n      </>\n    );\n  }\n);\n", "import { Box, Flex } from '@strapi/design-system';\nimport { File, FilePdf } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nimport { AssetType } from '../../../constants';\nimport { createAssetUrl } from '../../../utils';\nimport { AudioPreview } from '../../AssetCard/AudioPreview';\nimport { VideoPreview } from '../../AssetCard/VideoPreview';\n\nimport type { File as FileAsset } from '../../../../../shared/contracts/files';\n\nconst DocAsset = styled(Flex)`\n  background: linear-gradient(180deg, #ffffff 0%, #f6f6f9 121.48%);\n`;\n\nconst VideoPreviewWrapper = styled(Box)`\n  canvas,\n  video {\n    max-width: 100%;\n    height: 124px;\n  }\n`;\n\nconst AudioPreviewWrapper = styled(Box)`\n  canvas,\n  audio {\n    max-width: 100%;\n  }\n`;\n\nexport const CarouselAsset = ({ asset }: { asset: FileAsset }) => {\n  if (asset.mime?.includes(AssetType.Video)) {\n    return (\n      <VideoPreviewWrapper height=\"100%\">\n        <VideoPreview\n          url={createAssetUrl(asset, true)!}\n          mime={asset.mime}\n          alt={asset.alternativeText || asset.name}\n        />\n      </VideoPreviewWrapper>\n    );\n  }\n\n  if (asset.mime?.includes(AssetType.Audio)) {\n    return (\n      <AudioPreviewWrapper>\n        <AudioPreview\n          url={createAssetUrl(asset, true)!}\n          alt={asset.alternativeText || asset.name}\n        />\n      </AudioPreviewWrapper>\n    );\n  }\n\n  if (asset.mime?.includes(AssetType.Image)) {\n    const assetUrl = createAssetUrl(asset, true);\n    if (!assetUrl) return null;\n\n    // Adding a param to the url to bust the cache and force the refresh of the image when replaced\n    // Only add updatedAt parameter if the URL is not signed to prevent signature invalidation\n    const cacheBustedUrl = asset.isUrlSigned\n      ? assetUrl\n      : `${assetUrl}${assetUrl.includes('?') ? '&' : '?'}updatedAt=${asset.updatedAt}`;\n\n    return (\n      <Box\n        tag=\"img\"\n        maxHeight=\"100%\"\n        maxWidth=\"100%\"\n        src={cacheBustedUrl}\n        alt={asset.alternativeText || asset.name}\n      />\n    );\n  }\n\n  return (\n    <DocAsset width=\"100%\" height=\"100%\" justifyContent=\"center\" hasRadius>\n      {asset.ext?.includes('pdf') ? (\n        <FilePdf aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\n      ) : (\n        <File aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\n      )}\n    </DocAsset>\n  );\n};\n", "import { CarouselActions, IconButton } from '@strapi/design-system';\nimport { Pencil, Plus, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad, prefixFileUrlWithBackendUrl } from '../../../utils';\nimport { CopyLinkButton } from '../../CopyLinkButton/CopyLinkButton';\n\nimport type { File } from '../../../../../shared/contracts/files';\n\ninterface CarouselAssetActionsProps {\n  asset: File;\n  onDeleteAsset?: (asset: File) => void;\n  onAddAsset?: (asset: File) => void;\n  onEditAsset?: () => void;\n}\n\nexport const CarouselAssetActions = ({\n  asset,\n  onDeleteAsset,\n  onAddAsset,\n  onEditAsset,\n}: CarouselAssetActionsProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <CarouselActions>\n      {onAddAsset && (\n        <IconButton\n          label={formatMessage({\n            id: getTrad('control-card.add'),\n            defaultMessage: 'Add',\n          })}\n          onClick={() => onAddAsset(asset)}\n        >\n          <Plus />\n        </IconButton>\n      )}\n\n      <CopyLinkButton url={prefixFileUrlWithBackendUrl(asset.url)!} />\n\n      {onDeleteAsset && (\n        <IconButton\n          label={formatMessage({\n            id: 'global.delete',\n            defaultMessage: 'Delete',\n          })}\n          onClick={() => onDeleteAsset(asset)}\n        >\n          <Trash />\n        </IconButton>\n      )}\n\n      {onEditAsset && (\n        <IconButton\n          label={formatMessage({\n            id: getTrad('control-card.edit'),\n            defaultMessage: 'edit',\n          })}\n          onClick={onEditAsset}\n        >\n          <Pencil />\n        </IconButton>\n      )}\n    </CarouselActions>\n  );\n};\n", "import * as React from 'react';\n\nimport { Flex, Typography } from '@strapi/design-system';\nimport { PlusCircle as PicturePlus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { AssetSource } from '../../../constants';\nimport { getTrad, rawFileToAsset } from '../../../utils';\n\nimport type { File } from '../../../../../shared/contracts/files';\n\nconst TextAlignTypography = styled(Typography)`\n  align-items: center;\n`;\n\ntype FileWithoutIdHash = Omit<File, 'id' | 'hash'>;\n\ninterface EmptyStateAssetProps {\n  disabled?: boolean;\n  onClick: (asset?: File, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\n  onDropAsset: (assets: FileWithoutIdHash[]) => void;\n}\n\nexport const EmptyStateAsset = ({\n  disabled = false,\n  onClick,\n  onDropAsset,\n}: EmptyStateAssetProps) => {\n  const { formatMessage } = useIntl();\n  const [dragOver, setDragOver] = React.useState(false);\n\n  const handleDragEnter = (e: React.DragEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLButtonElement>) => {\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n      setDragOver(false);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    if (e?.dataTransfer?.files) {\n      const files = e.dataTransfer.files;\n      const assets: FileWithoutIdHash[] = [];\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files.item(i);\n        if (file) {\n          const asset = rawFileToAsset(file, AssetSource.Computer);\n\n          assets.push(asset);\n        }\n      }\n\n      onDropAsset(assets);\n    }\n\n    setDragOver(false);\n  };\n\n  return (\n    <Flex\n      borderStyle={dragOver ? 'dashed' : undefined}\n      borderWidth={dragOver ? '1px' : undefined}\n      borderColor={dragOver ? 'primary600' : undefined}\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      height=\"100%\"\n      width=\"100%\"\n      tag=\"button\"\n      type=\"button\"\n      disabled={disabled}\n      onClick={onClick as unknown as React.MouseEventHandler<HTMLButtonElement>}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      gap={3}\n      style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\n    >\n      <PicturePlus\n        aria-hidden\n        width=\"3.2rem\"\n        height=\"3.2rem\"\n        fill={disabled ? 'neutral400' : 'primary600'}\n      />\n      <TextAlignTypography\n        variant=\"pi\"\n        fontWeight=\"bold\"\n        textColor=\"neutral600\"\n        style={{ textAlign: 'center' }}\n        tag=\"span\"\n      >\n        {formatMessage({\n          id: getTrad('mediaLibraryInput.placeholder'),\n          defaultMessage: 'Click to add an asset or drag and drop one in this area',\n        })}\n      </TextAlignTypography>\n    </Flex>\n  );\n};\n", "import { Images } from '@strapi/icons';\n\nimport pluginPkg from '../../package.json';\n\nimport { MediaLibraryDialog } from './components/MediaLibraryDialog/MediaLibraryDialog';\nimport { MediaLibraryInput } from './components/MediaLibraryInput/MediaLibraryInput';\nimport { PERMISSIONS } from './constants';\nimport { pluginId } from './pluginId';\nimport { getTrad, prefixPluginTranslations } from './utils';\n\nimport type { MediaLibraryDialogProps } from './components/MediaLibraryDialog/MediaLibraryDialog';\nimport type { MediaLibraryInputProps } from './components/MediaLibraryInput/MediaLibraryInput';\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst name = pluginPkg.strapi.name;\n\nconst admin: Plugin.Config.AdminInput = {\n  register(app: StrapiApp) {\n    app.addMenuLink({\n      to: `plugins/${pluginId}`,\n      icon: Images,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'Media Library',\n      },\n      permissions: PERMISSIONS.main,\n      Component: () => import('./pages/App/App').then((mod) => ({ default: mod.Upload })),\n      position: 4,\n    });\n\n    app.addSettingsLink('global', {\n      id: 'media-library-settings',\n      to: 'media-library',\n      intlLabel: {\n        id: getTrad('plugin.name'),\n        defaultMessage: 'Media Library',\n      },\n      async Component() {\n        const { ProtectedSettingsPage } = await import('./pages/SettingsPage/SettingsPage');\n        return { default: ProtectedSettingsPage };\n      },\n      permissions: PERMISSIONS.settings,\n    });\n\n    app.addFields({\n      type: 'media',\n      Component: MediaLibraryInput as React.FC<Partial<MediaLibraryInputProps>>,\n    });\n    app.addComponents([\n      {\n        name: 'media-library',\n        Component: MediaLibraryDialog as React.FC<Partial<MediaLibraryDialogProps>>,\n      },\n    ]);\n\n    app.registerPlugin({\n      id: pluginId,\n      name,\n    });\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n", "import get from 'lodash/get';\nimport * as yup from 'yup';\n\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\nimport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n} from './components/CMHeaderActions';\nimport {\n  DeleteModalAdditionalInfo,\n  PublishModalAdditionalInfo,\n  UnpublishModalAdditionalInfo,\n} from './components/CMListViewModalsAdditionalInformation';\nimport { LocalePicker } from './components/LocalePicker';\nimport { PERMISSIONS } from './constants';\nimport { mutateEditViewHook } from './contentManagerHooks/editView';\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\nimport { addLocaleToReleasesHook } from './contentReleasesHooks/releaseDetailsView';\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\nimport { localeMiddleware } from './middlewares/rbac-middleware';\nimport { pluginId } from './pluginId';\nimport { i18nApi } from './services/api';\nimport { LOCALIZED_FIELDS } from './utils/fields';\nimport { getTranslation } from './utils/getTranslation';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\n\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    app.addMiddlewares([extendCTBAttributeInitialDataMiddleware, extendCTBInitialDataMiddleware]);\n    app.addMiddlewares([() => i18nApi.middleware]);\n    app.addReducers({\n      [i18nApi.reducerPath]: i18nApi.reducer,\n    });\n    app.addRBACMiddleware([localeMiddleware]);\n    app.registerPlugin({\n      id: pluginId,\n      name: pluginId,\n    });\n  },\n  bootstrap(app: any) {\n    // // Hook that adds a column into the CM's LV table\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewHook);\n    // Hooks that checks if the locale is present in the release\n    app.registerHook(\n      'ContentReleases/pages/ReleaseDetails/add-locale-in-releases',\n      addLocaleToReleasesHook\n    );\n\n    // Add the settings link\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: getTranslation('plugin.name'),\n        defaultMessage: 'Internationalization',\n      },\n      id: 'internationalization',\n      to: 'internationalization',\n      Component: () =>\n        import('./pages/SettingsPage').then((mod) => ({ default: mod.ProtectedSettingsPage })),\n      permissions: PERMISSIONS.accessMain,\n    });\n\n    const contentManager = app.getPlugin('content-manager');\n\n    contentManager.apis.addDocumentHeaderAction([LocalePickerAction, FillFromAnotherLocaleAction]);\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, DeleteLocaleAction);\n      return actions;\n    });\n\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      // When enabled the bulk locale publish action should be the first action\n      // in 'More Document Actions' and therefore the third action in the array\n      actions.splice(2, 0, BulkLocalePublishAction);\n      actions.splice(5, 0, BulkLocaleUnpublishAction);\n      return actions;\n    });\n\n    contentManager.injectComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: LocalePicker,\n    });\n\n    contentManager.injectComponent('listView', 'publishModalAdditionalInfos', {\n      name: 'i18n-publish-bullets-in-modal',\n      Component: PublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'unpublishModalAdditionalInfos', {\n      name: 'i18n-unpublish-bullets-in-modal',\n      Component: UnpublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: DeleteModalAdditionalInfo,\n    });\n\n    const ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      const ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\n\n      ctbFormsAPI.extendContentType({\n        validator: () => ({\n          i18n: yup.object().shape({\n            localized: yup.bool(),\n          }),\n        }),\n        form: {\n          advanced() {\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\n                  defaultMessage: 'Allows translating an entry into different languages',\n                },\n                type: 'checkboxConfirmation',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\n                  defaultMessage: 'Localization',\n                },\n              },\n            ];\n          },\n        },\n      });\n\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\n        form: {\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            const hasI18nEnabled = get(\n              contentTypeSchema,\n              ['pluginOptions', 'i18n', 'localized'],\n              false\n            );\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\n                  defaultMessage: 'The field can have different values in each locale',\n                },\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\n                  defaultMessage: 'Enable localization for this field',\n                },\n              },\n            ];\n          },\n        },\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n", "import * as React from 'react';\n\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\ninterface IntlMessage extends MessageDescriptor {\n  values: object;\n}\n\ninterface CheckboxConfirmationProps {\n  description: IntlMessage;\n  intlLabel: IntlMessage;\n  isCreating?: boolean;\n  name: string;\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\n  value: boolean;\n}\n\nconst CheckboxConfirmation = ({\n  description,\n  isCreating = false,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: CheckboxConfirmationProps) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (value: boolean) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n  };\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Field.Root hint={hint} name={name}>\n        <Checkbox onCheckedChange={handleChange} checked={value}>\n          {label}\n        </Checkbox>\n        <Field.Hint />\n      </Field.Root>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\n            defaultMessage: 'Disable localization',\n          })}\n        </Dialog.Header>\n        <Dialog.Body icon={<WarningCircle />}>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <TextAlignTypography>\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\n                  defaultMessage:\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                })}\n              </TextAlignTypography>\n            </Flex>\n            <Flex justifyContent=\"center\">\n              <Typography fontWeight=\"semiBold\">\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\n                  defaultMessage: 'Do you want to disable it?',\n                })}\n              </Typography>\n            </Flex>\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\">\n              {formatMessage({\n                id: 'components.popUpWarning.button.cancel',\n                defaultMessage: 'No, cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Dialog.Action>\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\n              {formatMessage({\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\n                defaultMessage: 'Yes, disable',\n              })}\n            </Button>\n          </Dialog.Action>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\nexport { CheckboxConfirmation };\n", "import * as React from 'react';\n\nimport { skipToken } from '@reduxjs/toolkit/query';\nimport {\n  useNotification,\n  useQueryParams,\n  Table,\n  useAPIErrorHandler,\n  FormErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport {\n  type DocumentActionComponent,\n  type DocumentActionProps,\n  unstable_useDocument as useDocument,\n  unstable_useDocumentActions as useDocumentActions,\n  buildValidParams,\n  HeaderActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport {\n  Flex,\n  Status,\n  Typography,\n  Button,\n  Modal,\n  Field,\n  SingleSelect,\n  SingleSelectOption,\n  Dialog,\n  type StatusVariant,\n} from '@strapi/design-system';\nimport { WarningCircle, ListPlus, Trash, Earth, Cross, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\nimport { cleanData } from '../utils/clean';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\n\nimport type { Locale } from '../../../shared/contracts/locales';\nimport type { I18nBaseQuery } from '../types';\nimport type { Modules } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * LocalePickerAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LocaleOptionProps {\n  isDraftAndPublishEnabled: boolean;\n  locale: Locale;\n  status: 'draft' | 'published' | 'modified';\n  entryExists: boolean;\n}\n\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\n  draft: 'secondary',\n  published: 'success',\n  modified: 'alternative',\n};\n\nconst LocaleOption = ({\n  isDraftAndPublishEnabled,\n  locale,\n  status,\n  entryExists,\n}: LocaleOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!entryExists) {\n    return formatMessage(\n      {\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\n      },\n      {\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\n        locale: locale.name,\n      }\n    );\n  }\n\n  return (\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\n      <Typography>{locale.name}</Typography>\n      {isDraftAndPublishEnabled ? (\n        <Status\n          display=\"flex\"\n          paddingLeft=\"6px\"\n          paddingRight=\"6px\"\n          paddingTop=\"2px\"\n          paddingBottom=\"2px\"\n          size=\"S\"\n          variant={statusVariants[status]}\n        >\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n            {capitalize(status)}\n          </Typography>\n        </Status>\n      ) : null}\n    </Flex>\n  );\n};\n\nconst LocalePickerAction = ({\n  document,\n  meta,\n  model,\n  collectionType,\n  documentId,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n, canCreate, canRead } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const { schema } = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params: { locale: currentDesiredLocale },\n  });\n\n  const handleSelect = React.useCallback(\n    (value: string) => {\n      setQuery({\n        plugins: {\n          ...query.plugins,\n          i18n: {\n            locale: value,\n          },\n        },\n      });\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleSelect(defaultLocale.code);\n    }\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\n\n  const currentLocale = Array.isArray(locales)\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\n    : undefined;\n\n  const allCurrentLocales = [\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\n    ...(document?.localizations ?? []),\n  ];\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can read we allow you to see the locale exists\n     * otherwise the locale is hidden.\n     */\n    return canRead.includes(locale.code);\n  });\n\n  return {\n    label: formatMessage({\n      id: getTranslation('Settings.locales.modal.locales.label'),\n      defaultMessage: 'Locales',\n    }),\n    options: displayedLocales.map((locale) => {\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\n\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\n        'locale' in doc ? doc.locale === locale.code : false\n      );\n\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\n\n      return {\n        disabled: !permissionsToCheck.includes(locale.code),\n        value: locale.code,\n        label: (\n          <LocaleOption\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\n            locale={locale}\n            status={currentLocaleDoc?.status}\n            entryExists={entryWithLocaleExists}\n          />\n        ),\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\n      };\n    }),\n    customizeContent: () => currentLocale?.name,\n    onSelect: handleSelect,\n    value: currentLocale,\n  };\n};\n\ntype UseDocument = typeof useDocument;\n\nconst getDocumentStatus = (\n  document: ReturnType<UseDocument>['document'],\n  meta: ReturnType<UseDocument>['meta']\n): 'draft' | 'published' | 'modified' => {\n  const docStatus = document?.status;\n  const statuses = meta?.availableStatus ?? [];\n\n  /**\n   * Creating an entry\n   */\n  if (!docStatus) {\n    return 'draft';\n  }\n\n  /**\n   * We're viewing a draft, but the document could have a published version\n   */\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\n    return 'published';\n  }\n\n  return docStatus;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FillFromAnotherLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst FillFromAnotherLocaleAction = ({\n  documentId,\n  meta,\n  model,\n  collectionType,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n } = useI18n();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\n\n  const { getDocument } = useDocumentActions();\n  const { schema, components } = useDocument({\n    model,\n    documentId,\n    collectionType,\n    params: { locale: currentDesiredLocale },\n  });\n  const { data: locales = [] } = useGetLocalesQuery();\n\n  const availableLocales = Array.isArray(locales)\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\n    : [];\n\n  const fillFromLocale = (onClose: () => void) => async () => {\n    const response = await getDocument({\n      collectionType,\n      model,\n      documentId,\n      params: { locale: localeSelected },\n    });\n    if (!response || !schema) {\n      return;\n    }\n\n    const { data } = response;\n\n    const cleanedData = cleanData(data, schema, components);\n\n    setValues(cleanedData);\n\n    onClose();\n  };\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    type: 'icon',\n    icon: <Earth />,\n    disabled: availableLocales.length === 0,\n    label: formatMessage({\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\n      defaultMessage: 'Fill in from another locale',\n    }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: ({ onClose }: { onClose: () => void }) => (\n        <>\n          <Dialog.Body>\n            <Flex direction=\"column\" gap={3}>\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n              <Typography textAlign=\"center\">\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\n                  defaultMessage:\n                    'Your current content will be erased and filled by the content of the selected locale:',\n                })}\n              </Typography>\n              <Field.Root width=\"100%\">\n                <Field.Label>\n                  {formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\n                    defaultMessage: 'Locale',\n                  })}\n                </Field.Label>\n                <SingleSelect\n                  value={localeSelected}\n                  placeholder={formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\n                    defaultMessage: 'Select one locale...',\n                  })}\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n                  onChange={(value) => setLocaleSelected(value)}\n                >\n                  {availableLocales.map((locale) => (\n                    <SingleSelectOption key={locale.code} value={locale.code}>\n                      {locale.name}\n                    </SingleSelectOption>\n                  ))}\n                </SingleSelect>\n              </Field.Root>\n            </Flex>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Flex gap={2} width=\"100%\">\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            </Flex>\n          </Dialog.Footer>\n        </>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { delete: deleteAction, isLoading } = useDocumentActions();\n  const { hasI18n, canDelete } = useI18n();\n\n  // Get the current locale object, using the URL instead of document so it works while creating\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    disabled:\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\n    position: ['header', 'table-row'],\n    label: formatMessage(\n      {\n        id: getTranslation('actions.delete.label'),\n        defaultMessage: 'Delete entry ({locale})',\n      },\n      { locale: locale && locale.name }\n    ),\n    icon: <StyledTrash />,\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('actions.delete.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: getTranslation('actions.delete.dialog.body'),\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        const unableToDelete =\n          // We are unable to delete a collection type without a document ID\n          // & unable to delete generally if there is no document locale\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\n\n        if (unableToDelete) {\n          console.error(\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: getTranslation('actions.delete.error'),\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\n            }),\n            type: 'danger',\n          });\n\n          return;\n        }\n\n        const res = await deleteAction({\n          documentId,\n          model,\n          collectionType,\n          params: { locale: document.locale },\n        });\n\n        if (!('error' in res)) {\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n        }\n      },\n    },\n  };\n};\n\nexport type LocaleStatus = {\n  locale: string;\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n};\n\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\n  action?: 'bulk-publish' | 'bulk-unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleAction\n *\n * This component is used to handle bulk publish and unpublish actions on locales.\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n  action,\n}: ExtendedDocumentActionProps) => {\n  const locale = document?.locale ?? null;\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const isOnPublishedTab = query.status === 'published';\n\n  const { formatMessage } = useIntl();\n  const { hasI18n, canPublish } = useI18n();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\n    React.useState<boolean>(false);\n\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\n    useDocumentActions();\n\n  const { schema, validate } = useDocument(\n    {\n      model,\n      collectionType,\n      documentId,\n      params: {\n        locale,\n      },\n    },\n    {\n      // No need to fetch the document, the data is already available in the `document` prop\n      skip: true,\n    }\n  );\n\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\n\n  const headers = [\n    {\n      label: formatMessage({\n        id: 'global.name',\n        defaultMessage: 'Name',\n      }),\n      name: 'name',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.status'),\n        defaultMessage: 'Status',\n      }),\n      name: 'status',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\n        defaultMessage: 'Publication Status',\n      }),\n      name: 'publication-status',\n    },\n  ];\n\n  // Extract the rows for the bulk locale publish modal and any validation\n  // errors per locale\n  const [rows, validationErrors] = React.useMemo(() => {\n    if (!document) {\n      return [[], {}];\n    }\n\n    const localizations = document.localizations ?? [];\n\n    // Build the rows for the bulk locale publish modal by combining the current\n    // document with all the available locales from the document meta\n    const locales: LocaleStatus[] = localizations.map((doc: any) => {\n      const { locale, status } = doc;\n      return { locale, status };\n    });\n\n    // Add the current document locale\n    locales.unshift({\n      locale: document.locale,\n      status: document.status,\n    });\n\n    // Build the validation errors for each locale.\n    const allDocuments = [document, ...localizations];\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\n      if (!document) {\n        return errs;\n      }\n\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\n      const validation = validate(document as Modules.Documents.AnyDocument);\n      if (validation !== null) {\n        errs[document.locale] = validation;\n      }\n      return errs;\n    }, {});\n\n    return [locales, errors];\n  }, [document, validate]);\n\n  const isBulkPublish = action === 'bulk-publish';\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\n    const isValidLocale =\n      // Validation errors are irrelevant if we are trying to unpublish\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\n\n    const shouldAddLocale = isBulkPublish\n      ? selectedRow.status !== 'published' && isValidLocale\n      : selectedRow.status !== 'draft' && isValidLocale;\n\n    if (shouldAddLocale) {\n      acc.push(selectedRow.locale);\n    }\n\n    return acc;\n  }, []);\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\n  const enableDraftRelationsCount = false;\n  const {\n    data: draftRelationsCount = 0,\n    isLoading: isDraftRelationsLoading,\n    error: isDraftRelationsError,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: [documentId!],\n      locale: localesForAction,\n    },\n    {\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (isDraftRelationsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(isDraftRelationsError),\n      });\n    }\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  if (!documentId) {\n    return null;\n  }\n\n  // This document action can be enabled given that draft and publish and i18n are\n  // enabled and we can publish the current locale.\n\n  const publish = async () => {\n    await publishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const unpublish = async () => {\n    await unpublishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const handleAction = async () => {\n    if (draftRelationsCount > 0) {\n      setIsDraftRelationConfirmationOpen(true);\n    } else if (isBulkPublish) {\n      await publish();\n    } else {\n      await unpublish();\n    }\n  };\n\n  if (isDraftRelationConfirmationOpen) {\n    return {\n      label: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      variant: 'danger',\n      dialog: {\n        onCancel: () => {\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        onConfirm: async () => {\n          await publish();\n\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        type: 'dialog',\n        title: formatMessage({\n          id: getTranslation('actions.publish.dialog.title'),\n          defaultMessage: 'Confirmation',\n        }),\n        content: (\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\n                defaultMessage:\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\n              })}\n            </Typography>\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\n                defaultMessage: 'Are you sure you want to continue?',\n              })}\n            </Typography>\n          </Flex>\n        ),\n      },\n    };\n  }\n\n  const hasPermission = selectedRows\n    .map(({ locale }) => locale)\n    .every((locale) => canPublish.includes(locale));\n\n  return {\n    label: formatMessage({\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n    }),\n    variant: isBulkPublish ? 'secondary' : 'danger',\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\n    disabled: isOnPublishedTab || canPublish.length === 0,\n    position: ['panel'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n      }),\n      content: () => {\n        return (\n          <Table.Root\n            headers={headers}\n            rows={rows.map((row) => ({\n              ...row,\n              id: row.locale,\n            }))}\n            selectedRows={selectedRows}\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\n          >\n            <BulkLocaleActionModal\n              validationErrors={validationErrors}\n              headers={headers}\n              rows={rows}\n              localesMetadata={localesMetadata as Locale[]}\n              action={action ?? 'bulk-publish'}\n            />\n          </Table.Root>\n        );\n      },\n      footer: () => (\n        <Modal.Footer justifyContent=\"flex-end\">\n          <Button\n            loading={isDraftRelationsLoading}\n            disabled={!hasPermission || localesForAction.length === 0}\n            variant=\"default\"\n            onClick={handleAction}\n          >\n            {formatMessage({\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocalePublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleUnpublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\n};\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledTrash = styled(Trash)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nexport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n};\n", "import * as React from 'react';\n\nimport { useAuth } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { capitalize } from '../utils/strings';\n\ntype UseI18n = () => {\n  hasI18n: boolean;\n  canCreate: string[];\n  canRead: string[];\n  canUpdate: string[];\n  canDelete: string[];\n  canPublish: string[];\n};\n\n/**\n * @alpha\n * @description This hook is used to get the i18n status of a content type.\n * Also returns the CRUDP permission locale properties for the content type\n * so we know which locales the user can perform actions on.\n */\nconst useI18n: UseI18n = () => {\n  // Extract the params from the URL to pass to our useDocument hook\n  const params = useParams<{ collectionType: string; slug: string; model: string }>();\n\n  const userPermissions = useAuth('useI18n', (state) => state.permissions);\n  const actions = React.useMemo(() => {\n    const permissions = userPermissions.filter((permission) => permission.subject === params.slug);\n\n    return permissions.reduce<Omit<ReturnType<UseI18n>, 'hasI18n'>>(\n      (acc, permission) => {\n        const [actionShorthand] = permission.action.split('.').slice(-1);\n\n        return {\n          ...acc,\n          [`can${capitalize(actionShorthand)}`]: permission.properties?.locales ?? [],\n        };\n      },\n      { canCreate: [], canRead: [], canUpdate: [], canDelete: [], canPublish: [] }\n    );\n  }, [params.slug, userPermissions]);\n\n  // TODO: use specific hook to get schema only\n  const { schema } = useDocument(\n    {\n      // We can non-null assert these because below we skip the query if they are not present\n      collectionType: params.collectionType!,\n      model: params.slug!,\n    },\n    {\n      skip: true,\n    }\n  );\n\n  if (doesPluginOptionsHaveI18nLocalized(schema?.pluginOptions)) {\n    return {\n      hasI18n: schema.pluginOptions.i18n.localized,\n      ...actions,\n    };\n  }\n\n  return {\n    hasI18n: false,\n    ...actions,\n  };\n};\n\nexport { useI18n };\n", "import has from 'lodash/has';\n\nconst LOCALIZED_FIELDS = [\n  'biginteger',\n  'boolean',\n  'component',\n  'date',\n  'datetime',\n  'decimal',\n  'dynamiczone',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'media',\n  'number',\n  'password',\n  'richtext',\n  'blocks',\n  'string',\n  'text',\n  'time',\n];\n\nconst doesPluginOptionsHaveI18nLocalized = (\n  opts?: object\n): opts is { i18n: { localized: boolean } } => has(opts, ['i18n', 'localized']);\n\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\n", "const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalize };\n", "import { i18nApi } from './api';\n\nimport type { CountManyEntriesDraftRelations } from '../../../shared/contracts/content-manager';\n\nconst relationsApi = i18nApi.injectEndpoints({\n  overrideExisting: true,\n  endpoints: (builder) => ({\n    getManyDraftRelationCount: builder.query<\n      CountManyEntriesDraftRelations.Response['data'],\n      CountManyEntriesDraftRelations.Request['query'] & {\n        model: string;\n      }\n    >({\n      query: ({ model, ...params }) => ({\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\n    }),\n  }),\n});\n\nconst { useGetManyDraftRelationCountQuery } = relationsApi;\n\nexport { useGetManyDraftRelationCountQuery };\n", "import type { Schema } from '@strapi/types';\n\ntype Data = Record<keyof Schema.ContentType['attributes'], any>;\n\nconst cleanData = (\n  data: Data,\n  schema: Schema.ContentType,\n  components: Record<string, Schema.Component>\n) => {\n  const cleanedData = removeFields(data, [\n    'createdAt',\n    'createdBy',\n    'updatedAt',\n    'updatedBy',\n    'id',\n    'documentId',\n    'publishedAt',\n    'strapi_stage',\n    'strapi_assignee',\n    'locale',\n    'status',\n  ]);\n\n  const cleanedDataWithoutPasswordAndRelation = recursiveRemoveFieldTypes(\n    cleanedData,\n    schema,\n    components,\n    ['relation', 'password']\n  );\n\n  return cleanedDataWithoutPasswordAndRelation;\n};\n\nconst removeFields = (data: Data, fields: Array<keyof Schema.ContentType['attributes']>) => {\n  return Object.keys(data).reduce((acc, current) => {\n    if (fields.includes(current)) {\n      return acc;\n    }\n    acc[current] = data[current];\n    return acc;\n  }, {} as Data);\n};\n\nconst recursiveRemoveFieldTypes = (\n  data: Data,\n  schema: Schema.Schema,\n  components: Record<string, Schema.Component>,\n  fields: Array<keyof Schema.ContentType['attributes']>\n) => {\n  return Object.keys(data).reduce((acc, current) => {\n    const attribute = schema.attributes[current] ?? { type: undefined };\n\n    if (fields.includes(attribute.type)) {\n      return acc;\n    }\n\n    if (attribute.type === 'dynamiczone') {\n      acc[current] = data[current].map((componentValue: any, index: number) => {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          componentValue,\n          components[componentValue.__component],\n          components,\n          fields\n        );\n\n        return {\n          ...rest,\n          __temp_key__: index + 1,\n        };\n      });\n    } else if (attribute.type === 'component') {\n      const { repeatable, component } = attribute;\n\n      if (repeatable) {\n        acc[current] = (data[current] ?? []).map((compoData: any, index: number) => {\n          const { id: _, ...rest } = recursiveRemoveFieldTypes(\n            compoData,\n            components[component],\n            components,\n            fields\n          );\n\n          return {\n            ...rest,\n            __temp_key__: index + 1,\n          };\n        });\n      } else {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          data[current] ?? {},\n          components[component],\n          components,\n          fields\n        );\n\n        acc[current] = rest;\n      }\n    } else {\n      acc[current] = data[current];\n    }\n\n    return acc;\n  }, {} as any);\n};\n\nexport { cleanData };\n", "import * as React from 'react';\n\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { LocaleStatus } from './CMHeaderActions';\n\nimport type { Modules } from '@strapi/types';\n\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EntryValidationTextProps {\n  status: Status;\n  validationErrors: FormErrors[string] | null;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\n  return (\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\n  );\n};\n\nconst EntryValidationText = ({\n  status = 'draft',\n  validationErrors,\n  action,\n}: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * TODO: Should this be extracted an made into a factory to recursively get\n   * error messages??\n   */\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\n    if (typeof value === 'string') {\n      return `${key}: ${value}`;\n    } else if (isErrorMessageDescriptor(value)) {\n      return `${key}: ${formatMessage(value)}`;\n    } else if (Array.isArray(value)) {\n      return value.map((v) => getErrorStr(key, v)).join(' ');\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      return Object.entries(value)\n        .map(([k, v]) => getErrorStr(k, v))\n        .join(' ');\n    } else {\n      /**\n       * unlikely to happen, but we need to return something\n       */\n      return '';\n    }\n  };\n\n  if (validationErrors) {\n    const validationErrorsMessages = Object.entries(validationErrors)\n      .map(([key, value]) => {\n        return getErrorStr(key, value);\n      })\n      .join(' ');\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip label={validationErrorsMessages}>\n          <Typography\n            maxWidth={'30rem'}\n            textColor=\"danger600\"\n            variant=\"omega\"\n            fontWeight=\"semiBold\"\n            ellipsis\n          >\n            {validationErrorsMessages}\n          </Typography>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  const getStatusMessage = () => {\n    if (action === 'bulk-publish') {\n      if (status === 'published') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else if (status === 'modified') {\n        return {\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish-changes',\n            defaultMessage: 'Ready to publish changes',\n          }),\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          }),\n        };\n      }\n    } else {\n      if (status === 'draft') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-unpublish.already-unpublished',\n            defaultMessage: 'Already Unpublished',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-unpublish-changes',\n            defaultMessage: 'Ready to unpublish',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      }\n    }\n  };\n\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\n\n  return (\n    <Flex gap={2}>\n      {icon}\n      <Typography textColor={textColor} fontWeight={fontWeight}>\n        {text}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BulkLocaleActionModalProps {\n  rows: LocaleStatus[];\n  headers: {\n    label: string;\n    name: string;\n  }[];\n  localesMetadata: Locale[];\n  validationErrors?: FormErrors;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\nconst BulkLocaleActionModal = ({\n  headers,\n  rows,\n  localesMetadata,\n  validationErrors = {},\n  action,\n}: BulkLocaleActionModalProps) => {\n  const { formatMessage } = useIntl();\n\n  const selectedRows = useTable<LocaleStatus[]>(\n    'BulkLocaleActionModal',\n    (state) => state.selectedRows\n  );\n\n  const getFormattedCountMessage = () => {\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\n      acc[locale] = status;\n      return acc;\n    }, {});\n    const localesWithErrors = Object.keys(validationErrors);\n\n    const publishedCount = selectedRows.filter(\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\n    ).length;\n\n    const draftCount = selectedRows.filter(\n      ({ locale }) =>\n        (currentStatusByLocale[locale] === 'draft' ||\n          currentStatusByLocale[locale] === 'modified') &&\n        !localesWithErrors.includes(locale)\n    ).length;\n\n    const withErrorsCount = localesWithErrors.length;\n    const messageId =\n      action === 'bulk-publish'\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\n\n    const defaultMessage =\n      action === 'bulk-publish'\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\n\n    return formatMessage(\n      {\n        id: messageId,\n        defaultMessage,\n      },\n      {\n        withErrorsCount,\n        draftCount,\n        publishedCount,\n        b: BoldChunk,\n      }\n    );\n  };\n\n  return (\n    <Modal.Body>\n      <Typography>{getFormattedCountMessage()}</Typography>\n      <Box marginTop={5}>\n        <Table.Content>\n          <Table.Head>\n            <Table.HeaderCheckboxCell />\n            {headers.map((head) => (\n              <Table.HeaderCell key={head.name} {...head} />\n            ))}\n          </Table.Head>\n          <Table.Body>\n            {rows.map(({ locale, status }, index) => {\n              const error = validationErrors?.[locale] ?? null;\n\n              const statusVariant =\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\n\n              return (\n                <Table.Row key={index}>\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\n                  <Table.Cell>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {Array.isArray(localesMetadata)\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\n                        : locale}\n                    </Typography>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Box display=\"flex\">\n                      <Status\n                        display=\"flex\"\n                        paddingLeft=\"6px\"\n                        paddingRight=\"6px\"\n                        paddingTop=\"2px\"\n                        paddingBottom=\"2px\"\n                        size={'S'}\n                        variant={statusVariant}\n                      >\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n                          {capitalize(status)}\n                        </Typography>\n                      </Status>\n                    </Box>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\n                  </Table.Cell>\n                  <Table.Cell>\n                    <IconButton\n                      tag={Link}\n                      to={{\n                        search: stringify({ plugins: { i18n: { locale } } }),\n                      }}\n                      label={formatMessage(\n                        {\n                          id: getTranslation('Settings.list.actions.edit'),\n                          defaultMessage: 'Edit {name} locale',\n                        },\n                        {\n                          name: locale,\n                        }\n                      )}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table.Content>\n      </Box>\n    </Modal.Body>\n  );\n};\n\nexport { BulkLocaleActionModal };\nexport type { BulkLocaleActionModalProps };\n", "import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst Emphasis = (chunks: React.ReactNode) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst DeleteModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n          defaultMessage:\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst PublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n          defaultMessage:\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst UnpublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n          defaultMessage:\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\n", "import * as React from 'react';\n\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { I18nBaseQuery } from '../types';\n\ninterface Query extends I18nBaseQuery {\n  page?: number;\n}\n\nconst LocalePicker = () => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n\n  const { hasI18n, canRead, canCreate } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery(undefined, {\n    skip: !hasI18n,\n  });\n\n  const handleChange = React.useCallback(\n    (code: string, replace = false) => {\n      setQuery(\n        {\n          page: 1,\n          plugins: { ...query.plugins, i18n: { locale: code } },\n        },\n        'push',\n        replace\n      );\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const currentDesiredLocale = query.plugins?.i18n?.locale;\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleChange(defaultLocale.code, true);\n    }\n  }, [hasI18n, handleChange, locales, query.plugins?.i18n?.locale]);\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can create or read we allow you to see the locale exists\n     * this is because in the ListView, you may be able to create a new entry\n     * in a locale you can't read.\n     */\n    return canCreate.includes(locale.code) || canRead.includes(locale.code);\n  });\n\n  return (\n    <SingleSelect\n      size=\"S\"\n      aria-label={formatMessage({\n        id: getTranslation('actions.select-locale'),\n        defaultMessage: 'Select locale',\n      })}\n      value={query.plugins?.i18n?.locale || locales.find((locale) => locale.isDefault)?.code}\n      // @ts-expect-error – This can be removed in V2 of the DS.\n      onChange={handleChange}\n    >\n      {displayedLocales.map((locale) => (\n        <SingleSelectOption key={locale.id} value={locale.code}>\n          {locale.name}\n        </SingleSelectOption>\n      ))}\n    </SingleSelect>\n  );\n};\n\nexport { LocalePicker };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Flex, VisuallyHidden } from '@strapi/design-system';\nimport { Earth, EarthStriked } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { EditFieldLayout, EditLayout } from '@strapi/content-manager/strapi-admin';\n\ninterface MutateEditViewArgs {\n  layout: EditLayout;\n}\n\nconst mutateEditViewHook = ({ layout }: MutateEditViewArgs): MutateEditViewArgs => {\n  // If i18n isn't explicitly enabled on the content type, then no field can be localized\n  if (\n    !('i18n' in layout.options) ||\n    (typeof layout.options.i18n === 'object' &&\n      layout.options.i18n !== null &&\n      'localized' in layout.options.i18n &&\n      !layout.options.i18n.localized)\n  ) {\n    return { layout };\n  }\n\n  const components = Object.entries(layout.components).reduce<EditLayout['components']>(\n    (acc, [key, componentLayout]) => {\n      return {\n        ...acc,\n        [key]: {\n          ...componentLayout,\n          layout: componentLayout.layout.map((row) => row.map(addLabelActionToField)),\n        },\n      };\n    },\n    {}\n  );\n\n  return {\n    layout: {\n      ...layout,\n      components,\n      layout: layout.layout.map((panel) => panel.map((row) => row.map(addLabelActionToField))),\n    },\n  } satisfies Pick<MutateEditViewArgs, 'layout'>;\n};\n\nconst addLabelActionToField = (field: EditFieldLayout) => {\n  const isFieldLocalized = doesFieldHaveI18nPluginOpt(field.attribute.pluginOptions)\n    ? field.attribute.pluginOptions.i18n.localized\n    : true || ['uid', 'relation'].includes(field.attribute.type);\n\n  const labelActionProps = {\n    title: {\n      id: isFieldLocalized\n        ? getTranslation('Field.localized')\n        : getTranslation('Field.not-localized'),\n      defaultMessage: isFieldLocalized\n        ? 'This value is unique for the selected locale'\n        : 'This value is the same across all locales',\n    },\n    icon: isFieldLocalized ? <Earth /> : null,\n  };\n\n  return {\n    ...field,\n    labelAction: isFieldLocalized ? <LabelAction {...labelActionProps} /> : null,\n  };\n};\n\nconst doesFieldHaveI18nPluginOpt = (\n  pluginOpts?: object\n): pluginOpts is { i18n: { localized: boolean } } => {\n  if (!pluginOpts) {\n    return false;\n  }\n\n  return (\n    'i18n' in pluginOpts &&\n    typeof pluginOpts.i18n === 'object' &&\n    pluginOpts.i18n !== null &&\n    'localized' in pluginOpts.i18n\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LabelAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LabelActionProps {\n  title: MessageDescriptor;\n  icon: React.ReactNode;\n}\n\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Span tag=\"span\">\n      <VisuallyHidden tag=\"span\">{formatMessage(title)}</VisuallyHidden>\n      {React.cloneElement(icon as React.ReactElement, {\n        'aria-hidden': true,\n        focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\n      })}\n    </Span>\n  );\n};\n\nconst Span = styled(Flex)`\n  svg {\n    width: 12px;\n    height: 12px;\n\n    fill: ${({ theme }) => theme.colors.neutral500};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport { mutateEditViewHook };\n", "import { Box, Flex, Popover, Typography, useCollator, Button } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { useGetLocalesQuery } from '../services/locales';\n\ninterface LocaleListCellProps {\n  localizations: { locale: string }[];\n  locale: string;\n}\n\nconst LocaleListCell = ({ locale: currentLocale, localizations }: LocaleListCellProps) => {\n  const { locale: language } = useIntl();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const formatter = useCollator(language, {\n    sensitivity: 'base',\n  });\n\n  if (!Array.isArray(locales) || !localizations) {\n    return null;\n  }\n\n  const availableLocales = localizations.map((loc) => loc.locale);\n\n  const localesForDocument = locales\n    .reduce<Locale[]>((acc, locale) => {\n      const createdLocale = [currentLocale, ...availableLocales].find((loc) => {\n        return loc === locale.code;\n      });\n\n      if (createdLocale) {\n        acc.push(locale);\n      }\n\n      return acc;\n    }, [])\n    .map((locale) => {\n      if (locale.isDefault) {\n        return `${locale.name} (default)`;\n      }\n\n      return locale.name;\n    })\n    .toSorted((a, b) => formatter.compare(a, b));\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button variant=\"ghost\" type=\"button\" onClick={(e) => e.stopPropagation()}>\n          <Flex minWidth=\"100%\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"regular\">\n            <Typography textColor=\"neutral800\" ellipsis marginRight={2}>\n              {localesForDocument.join(', ')}\n            </Typography>\n            <Flex>\n              <CaretDown width=\"1.2rem\" height=\"1.2rem\" />\n            </Flex>\n          </Flex>\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content sideOffset={16}>\n        <ul>\n          {localesForDocument.map((name) => (\n            <Box key={name} padding={3} tag=\"li\">\n              <Typography>{name}</Typography>\n            </Box>\n          ))}\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport { LocaleListCell };\nexport type { LocaleListCellProps };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { LocaleListCell } from '../components/LocaleListCell';\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddColumnToTableHookArgs {\n  layout: ListLayout;\n  displayedHeaders: ListFieldLayout[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { options } = layout;\n\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(options)\n    ? options.i18n.localized\n    : false;\n\n  if (!isFieldLocalized) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        attribute: { type: 'string' },\n        label: {\n          id: getTranslation('list-view.table.header.label'),\n          defaultMessage: 'Available in',\n        },\n        searchable: false,\n        sortable: false,\n        name: 'locales',\n        // @ts-expect-error – ID is seen as number | string; this will change when we move the type over.\n        cellFormatter: (props, _header, meta) => <LocaleListCell {...props} {...meta} />,\n      },\n    ],\n    layout,\n  };\n};\n\nexport { addColumnToTableHook };\n", "import type { Schema } from '@strapi/types';\n/* -------------------------------------------------------------------------------------------------\n * addLocaleToReleasesHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddLocaleToReleasesHookArgs {\n  displayedHeaders: {\n    key: string;\n    fieldSchema: Schema.Attribute.Kind | 'custom';\n    metadatas: {\n      label: { id: string; defaultMessage: string };\n      searchable: boolean;\n      sortable: boolean;\n    };\n    name: string;\n  }[];\n  hasI18nEnabled: boolean;\n}\n\nconst addLocaleToReleasesHook = ({ displayedHeaders = [] }: AddLocaleToReleasesHookArgs) => {\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        label: {\n          id: 'content-releases.page.ReleaseDetails.table.header.label.locale',\n          defaultMessage: 'locale',\n        },\n        name: 'locale',\n      },\n    ],\n    hasI18nEnabled: true,\n  };\n};\n\nexport { addLocaleToReleasesHook };\n", "import get from 'lodash/get';\n\nimport type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return ({ getState }) =>\n    (next) =>\n    (action) => {\n      const enhanceAction = ({ uid }: { uid: string }) => {\n        // the block here is to catch the error when trying to access the state\n        // of the ctb when the plugin is not mounted\n        try {\n          const store = getState();\n\n          const type = get(store, [\n            'content-type-builder_dataManagerProvider',\n            'current',\n            'contentTypes',\n            uid,\n          ]);\n\n          if (!type || type.modelType !== 'contentType') {\n            return next(action);\n          }\n\n          const hasi18nEnabled = get(type, ['pluginOptions', 'i18n', 'localized'], false);\n\n          if (hasi18nEnabled) {\n            return next({\n              ...action,\n              payload: {\n                ...action.payload,\n                options: {\n                  pluginOptions: {\n                    ...(action?.payload?.options?.pluginOptions ?? {}),\n                    i18n: {\n                      localized: true,\n                    },\n                  },\n                },\n              },\n            });\n          }\n\n          return next(action);\n        } catch (err) {\n          return next(action);\n        }\n      };\n\n      const { payload = {}, type } = action ?? {};\n\n      if (\n        type === 'formModal/setAttributeDataSchema' &&\n        !['relation', 'component'].includes(payload.attributeType) &&\n        !payload.isEditing\n      ) {\n        return enhanceAction({\n          uid: payload.uid,\n        });\n      }\n\n      if (type === 'formModal/setCustomFieldDataSchema' && !payload.isEditing) {\n        return enhanceAction({\n          uid: payload.uid,\n        });\n      }\n\n      if (\n        type === 'formModal/resetPropsAndSetFormForAddingAnExistingCompo' ||\n        type === 'formModal/resetPropsAndSaveCurrentData'\n      ) {\n        return enhanceAction({\n          uid: payload.uid,\n        });\n      }\n\n      return next(action);\n    };\n};\n\nexport { extendCTBAttributeInitialDataMiddleware };\n", "import type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return () => (next) => (action) => {\n    if (\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\n      action.modalType === 'contentType'\n    ) {\n      const i18n = { localized: false };\n\n      const pluginOptions = action.data.pluginOptions\n        ? { ...action.data.pluginOptions, i18n }\n        : { i18n };\n\n      const data = { ...action.data, pluginOptions };\n\n      if (action.actionType === 'create') {\n        return next({ ...action, data });\n      }\n\n      // Override the action if the pluginOption config does not contain i18n\n      // In this case we need to set the proper initialData shape\n      if (!action.data.pluginOptions?.i18n?.localized) {\n        return next({ ...action, data });\n      }\n    }\n\n    // action is not the one we want to override\n    return next(action);\n  };\n};\n\nexport { extendCTBInitialDataMiddleware };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as qs from 'qs';\nimport { matchPath } from 'react-router-dom';\n\nimport type { RBACMiddleware } from '@strapi/admin/strapi-admin';\n\nconst localeMiddleware: RBACMiddleware = (ctx) => (next) => (permissions) => {\n  const match = matchPath('/content-manager/:collectionType/:model?/:id', ctx.pathname);\n\n  if (!match) {\n    return next(permissions);\n  }\n\n  const search = qs.parse(ctx.search);\n\n  if (typeof search !== 'object') {\n    return next(permissions);\n  }\n\n  if (!('plugins' in search && typeof search.plugins === 'object')) {\n    return next(permissions);\n  }\n\n  if (\n    !(\n      'i18n' in search.plugins &&\n      typeof search.plugins.i18n === 'object' &&\n      !Array.isArray(search.plugins.i18n)\n    )\n  ) {\n    return next(permissions);\n  }\n\n  const { locale } = search.plugins.i18n;\n\n  if (typeof locale !== 'string') {\n    return next(permissions);\n  }\n\n  const revisedPermissions = permissions.filter(\n    (permission) =>\n      !permission.properties?.locales || permission.properties.locales.includes(locale)\n  );\n\n  return next(revisedPermissions);\n};\n\nexport { localeMiddleware };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import omit from 'lodash/omit';\n\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * mutateCTBContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\n\n// TODO: refactor for CTB refactors\nconst mutateCTBContentTypeSchema = (\n  nextSchema: {\n    pluginOptions: Schema.ContentType['pluginOptions'];\n    attributes: Schema.Attribute.AnyAttribute[];\n    uid?: string;\n  },\n  prevSchema?: {\n    pluginOptions: Schema.ContentType['pluginOptions'];\n    attributes: Schema.Attribute.AnyAttribute[];\n    uid?: string;\n  }\n) => {\n  if (!prevSchema) {\n    return nextSchema;\n  }\n\n  // Don't perform mutations components\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(prevSchema?.pluginOptions)\n    ? prevSchema?.pluginOptions.i18n.localized\n    : false;\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return {\n      ...nextSchema,\n      attributes,\n    };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return {\n      ...nextSchema,\n      pluginOptions,\n      attributes,\n    };\n  }\n\n  return nextSchema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * addLocalisationToFields\n * -----------------------------------------------------------------------------------------------*/\n\nconst addLocalisationToFields = (attributes: Schema.Attribute.AnyAttribute[]) => {\n  return attributes.map((currentAttribute) => {\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      return { ...currentAttribute, pluginOptions };\n    }\n\n    return currentAttribute;\n  });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * disableAttributesLocalisation\n * -----------------------------------------------------------------------------------------------*/\n\nconst disableAttributesLocalisation = (attributes: Schema.Attribute.AnyAttribute[]) => {\n  return attributes.map((currentAttribute) => {\n    return omit(currentAttribute, 'pluginOptions.i18n');\n  });\n};\n\nexport { mutateCTBContentTypeSchema };\n", "import * as React from 'react';\n\nimport {\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n} from '@strapi/admin/strapi-admin';\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport {\n  Box,\n  Button,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Field,\n  Modal,\n} from '@strapi/design-system';\nimport { PaperPlane } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useFormik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { CreateReleaseAction } from '../../../shared/contracts/release-actions';\nimport { PERMISSIONS } from '../constants';\nimport { useCreateReleaseActionMutation, useGetReleasesForEntryQuery } from '../services/release';\n\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\n\nimport type {\n  DocumentActionComponent,\n  DocumentActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * AddActionToReleaseModal\n * -----------------------------------------------------------------------------------------------*/\nexport const RELEASE_ACTION_FORM_SCHEMA = yup.object().shape({\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n  releaseId: yup.string().required(),\n});\n\nexport interface FormValues {\n  type: CreateReleaseAction.Request['body']['type'];\n  releaseId: CreateReleaseAction.Request['params']['releaseId'];\n}\n\nexport const INITIAL_VALUES = {\n  type: 'publish',\n  releaseId: '',\n} satisfies FormValues;\n\ninterface AddActionToReleaseModalProps {\n  contentType: string;\n  documentId?: string;\n  onInputChange: (field: keyof FormValues, value: string | number) => void;\n  values: FormValues;\n}\n\nexport const NoReleases = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <EmptyStateLayout\n      icon={<EmptyDocuments width=\"16rem\" />}\n      content={formatMessage({\n        id: 'content-releases.content-manager-edit-view.add-to-release.no-releases-message',\n        defaultMessage:\n          'No available releases. Open the list of releases and create a new one from there.',\n      })}\n      action={\n        <LinkButton\n          to={{\n            pathname: '/plugins/content-releases',\n          }}\n          tag={ReactRouterLink}\n          variant=\"secondary\"\n        >\n          {formatMessage({\n            id: 'content-releases.content-manager-edit-view.add-to-release.redirect-button',\n            defaultMessage: 'Open the list of releases',\n          })}\n        </LinkButton>\n      }\n      shadow=\"none\"\n    />\n  );\n};\n\nconst AddActionToReleaseModal = ({\n  contentType,\n  documentId,\n  onInputChange,\n  values,\n}: AddActionToReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  // Get all 'pending' releases that do not have the entry attached\n  const response = useGetReleasesForEntryQuery({\n    contentType,\n    entryDocumentId: documentId,\n    hasEntryAttached: false,\n    locale,\n  });\n\n  const releases = response.data?.data;\n\n  if (releases?.length === 0) {\n    return <NoReleases />;\n  }\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <Box paddingBottom={6}>\n        <Field.Root required>\n          <Field.Label>\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-label',\n              defaultMessage: 'Select a release',\n            })}\n          </Field.Label>\n          <SingleSelect\n            required\n            placeholder={formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-placeholder',\n              defaultMessage: 'Select',\n            })}\n            name=\"releaseId\"\n            onChange={(value) => onInputChange('releaseId', value)}\n            value={values.releaseId}\n          >\n            {releases?.map((release) => (\n              <SingleSelectOption key={release.id} value={release.id}>\n                {release.name}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Field.Root>\n      </Box>\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.content-manager-edit-view.add-to-release.action-type-label',\n          defaultMessage: 'What do you want to do with this entry?',\n        })}\n      </Field.Label>\n      <ReleaseActionOptions\n        selected={values.type}\n        handleChange={(e) => onInputChange('type', e.target.value)}\n        name=\"type\"\n      />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseActionModalForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst ReleaseActionModalForm: DocumentActionComponent = ({\n  documentId,\n  document,\n  model,\n  collectionType,\n}: DocumentActionProps) => {\n  const { formatMessage } = useIntl();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canCreateAction } = allowedActions;\n  const [createReleaseAction, { isLoading }] = useCreateReleaseActionMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>, onClose: () => void) => {\n    try {\n      await formik.handleSubmit(e);\n      onClose();\n    } catch (error) {\n      if (isFetchError(error)) {\n        // Handle axios error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      } else {\n        // Handle generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'An error occurred',\n          }),\n        });\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: INITIAL_VALUES,\n    validationSchema: RELEASE_ACTION_FORM_SCHEMA,\n    onSubmit: async (values: FormValues) => {\n      if (collectionType === 'collection-types' && !documentId) {\n        throw new Error('Document id is required');\n      }\n\n      const response = await createReleaseAction({\n        body: {\n          type: values.type,\n          contentType: model as UID.ContentType,\n          entryDocumentId: documentId,\n          locale,\n        },\n        params: { releaseId: values.releaseId },\n      });\n\n      if ('data' in response) {\n        // Handle success\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-releases.content-manager-edit-view.add-to-release.notification.success',\n            defaultMessage: 'Entry added to release',\n          }),\n        });\n\n        return;\n      }\n\n      if ('error' in response) {\n        throw response.error;\n      }\n    },\n  });\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(model);\n\n  // Project is not EE or contentType does not have draftAndPublish enabled\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canCreateAction) {\n    return null;\n  }\n\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\n    return null;\n  }\n\n  return {\n    label: formatMessage({\n      id: 'content-releases.content-manager-edit-view.add-to-release',\n      defaultMessage: 'Add to release',\n    }),\n    icon: <PaperPlane />,\n    // Entry is creating so we don't want to allow adding it to a release\n    disabled: !document,\n    position: ['panel', 'table-row'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-releases.content-manager-edit-view.add-to-release',\n        defaultMessage: 'Add to release',\n      }),\n      content: (\n        <AddActionToReleaseModal\n          contentType={model}\n          documentId={documentId}\n          onInputChange={formik.setFieldValue}\n          values={formik.values}\n        />\n      ),\n      footer: ({ onClose }) => (\n        <Modal.Footer>\n          <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.cancel-button',\n              defaultMessage: 'Cancel',\n            })}\n          </Button>\n          <Button\n            type=\"submit\"\n            // @ts-expect-error - formik ReactEvent types don't match button onClick types as they expect a MouseEvent\n            onClick={(e) => handleSubmit(e, onClose)}\n            disabled={!formik.values.releaseId}\n            loading={isLoading}\n          >\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.continue-button',\n              defaultMessage: 'Continue',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\nexport { ReleaseActionModalForm };\n", "import * as React from 'react';\n\nimport {\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n} from '@strapi/admin/strapi-admin';\nimport { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/content-manager/strapi-admin';\nimport {\n  Box,\n  Button,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Modal,\n  Field,\n} from '@strapi/design-system';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { CreateManyReleaseActions } from '../../../shared/contracts/release-actions';\nimport { PERMISSIONS as releasePermissions } from '../constants';\nimport { useCreateManyReleaseActionsMutation, useGetReleasesQuery } from '../services/release';\n\nimport {\n  type FormValues,\n  INITIAL_VALUES,\n  RELEASE_ACTION_FORM_SCHEMA,\n  NoReleases,\n} from './ReleaseActionModal';\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\n\nimport type { BulkActionComponent } from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\nconst getContentPermissions = (subject: string) => {\n  const permissions = {\n    publish: [\n      {\n        action: 'plugin::content-manager.explorer.publish',\n        subject,\n        id: '',\n        actionParameters: {},\n        properties: {},\n        conditions: [],\n      },\n    ],\n  };\n\n  return permissions;\n};\n\nconst ReleaseAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const contentPermissions = getContentPermissions(model);\n  const {\n    allowedActions: { canPublish },\n  } = useRBAC(contentPermissions);\n  const {\n    allowedActions: { canCreate },\n  } = useRBAC(releasePermissions);\n  const { hasDraftAndPublish } = useContentManagerContext();\n\n  // Get all the releases not published\n  const response = useGetReleasesQuery();\n  const releases = response.data?.data;\n  const [createManyReleaseActions, { isLoading }] = useCreateManyReleaseActionsMutation();\n  const documentIds = documents.map((doc) => doc.documentId);\n\n  const handleSubmit = async (values: FormValues) => {\n    const locale = query.plugins?.i18n?.locale;\n\n    const releaseActionEntries: CreateManyReleaseActions.Request['body'] = documentIds.map(\n      (entryDocumentId) => ({\n        type: values.type,\n        contentType: model as UID.ContentType,\n        entryDocumentId,\n        locale,\n      })\n    );\n\n    const response = await createManyReleaseActions({\n      body: releaseActionEntries,\n      params: { releaseId: values.releaseId },\n    });\n\n    if ('data' in response) {\n      // Handle success\n\n      const notificationMessage = formatMessage(\n        {\n          id: 'content-releases.content-manager-list-view.add-to-release.notification.success.message',\n          defaultMessage:\n            '{entriesAlreadyInRelease} out of {totalEntries} entries were already in the release.',\n        },\n        {\n          entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\n          totalEntries: response.data.meta.totalEntries,\n        }\n      );\n\n      const notification = {\n        type: 'success' as const,\n        title: formatMessage(\n          {\n            id: 'content-releases.content-manager-list-view.add-to-release.notification.success.title',\n            defaultMessage: 'Successfully added to release.',\n          },\n          {\n            entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\n            totalEntries: response.data.meta.totalEntries,\n          }\n        ),\n        message: response.data.meta.entriesAlreadyInRelease ? notificationMessage : '',\n      };\n\n      toggleNotification(notification);\n\n      return true;\n    }\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // Handle fetch error\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Handle generic error\n        toggleNotification({\n          type: 'warning',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (!hasDraftAndPublish || !canCreate || !canPublish) return null;\n\n  return {\n    actionType: 'release',\n    variant: 'tertiary',\n    label: formatMessage({\n      id: 'content-manager-list-view.add-to-release',\n      defaultMessage: 'Add to Release',\n    }),\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-manager-list-view.add-to-release',\n        defaultMessage: 'Add to Release',\n      }),\n      content: ({ onClose }) => {\n        return (\n          <Formik\n            onSubmit={async (values) => {\n              const data = await handleSubmit(values);\n              if (data) {\n                return onClose();\n              }\n            }}\n            validationSchema={RELEASE_ACTION_FORM_SCHEMA}\n            initialValues={INITIAL_VALUES}\n          >\n            {({ values, setFieldValue }) => (\n              <Form>\n                {releases?.length === 0 ? (\n                  <NoReleases />\n                ) : (\n                  <Modal.Body>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n                      <Box paddingBottom={6}>\n                        <Field.Root required>\n                          <Field.Label>\n                            {formatMessage({\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-label',\n                              defaultMessage: 'Select a release',\n                            })}\n                          </Field.Label>\n                          <SingleSelect\n                            placeholder={formatMessage({\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-placeholder',\n                              defaultMessage: 'Select',\n                            })}\n                            onChange={(value) => setFieldValue('releaseId', value)}\n                            value={values.releaseId}\n                          >\n                            {releases?.map((release) => (\n                              <SingleSelectOption key={release.id} value={release.id}>\n                                {release.name}\n                              </SingleSelectOption>\n                            ))}\n                          </SingleSelect>\n                        </Field.Root>\n                      </Box>\n                      <Field.Label>\n                        {formatMessage({\n                          id: 'content-releases.content-manager-list-view.add-to-release.action-type-label',\n                          defaultMessage: 'What do you want to do with these entries?',\n                        })}\n                      </Field.Label>\n                      <ReleaseActionOptions\n                        selected={values.type}\n                        handleChange={(e) => setFieldValue('type', e.target.value)}\n                        name=\"type\"\n                      />\n                    </Flex>\n                  </Modal.Body>\n                )}\n                <Modal.Footer>\n                  <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\n                    {formatMessage({\n                      id: 'content-releases.content-manager-list-view.add-to-release.cancel-button',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  {/** * TODO: Ideally we would use isValid from Formik to disable the button,\n                  however currently it always returns true * for yup.string().required(), even when\n                  the value is falsy (including empty string) */}\n                  <Button type=\"submit\" disabled={!values.releaseId} loading={isLoading}>\n                    {formatMessage({\n                      id: 'content-releases.content-manager-list-view.add-to-release.continue-button',\n                      defaultMessage: 'Continue',\n                    })}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        );\n      },\n    },\n  };\n};\n\nexport { ReleaseAction };\n", "import * as React from 'react';\n\nimport { useTable, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\nimport { Box, Popover, Typography, Button, Link } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useGetMappedEntriesInReleasesQuery } from '../services/release';\n\nimport type { Modules, UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * useReleasesList\n * -----------------------------------------------------------------------------------------------*/\ninterface QueryParams {\n  plugins?: {\n    i18n?: {\n      locale: string;\n    };\n  };\n}\n\nconst useReleasesList = (contentTypeUid: UID.ContentType, documentId: Modules.Documents.ID) => {\n  const listViewData = useTable('ListView', (state) => state.rows);\n  const documentIds = listViewData.map((entry) => entry.documentId);\n  const [{ query }] = useQueryParams();\n  const locale = (query as QueryParams)?.plugins?.i18n?.locale || undefined;\n\n  const response = useGetMappedEntriesInReleasesQuery(\n    { contentTypeUid, documentIds, locale },\n    { skip: !documentIds || !contentTypeUid || documentIds.length === 0 }\n  );\n\n  const mappedEntriesInReleases = response.data || {};\n\n  return mappedEntriesInReleases?.[documentId] || [];\n};\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\n\ninterface AddColumnToTableHookArgs {\n  layout: ListLayout;\n  displayedHeaders: ListFieldLayout[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { options } = layout;\n\n  if (!options?.draftAndPublish) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        searchable: false,\n        sortable: false,\n        name: 'releases',\n        label: {\n          id: 'content-releases.content-manager.list-view.releases.header',\n          defaultMessage: 'To be released in',\n        },\n        cellFormatter: (\n          props: Modules.Documents.AnyDocument,\n          _: any,\n          { model }: { model: UID.ContentType }\n        ) => <ReleaseListCell {...props} model={model} />,\n      },\n    ],\n    layout,\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseListCell\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ReleaseListCellProps extends Modules.Documents.AnyDocument {\n  documentId: Modules.Documents.ID;\n  model: UID.ContentType;\n}\n\nconst ReleaseListCell = ({ documentId, model }: ReleaseListCellProps) => {\n  const releases = useReleasesList(model, documentId);\n  const { formatMessage } = useIntl();\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button\n          variant=\"ghost\"\n          onClick={(e: React.MouseEvent<HTMLElement>) => e.stopPropagation()}\n          // TODO: find a way in the DS to define the widht and height of the icon\n          endIcon={releases.length > 0 ? <CaretDown width=\"1.2rem\" height=\"1.2rem\" /> : null}\n        >\n          <Typography\n            style={{ maxWidth: '252px', cursor: 'pointer' }}\n            textColor=\"neutral800\"\n            fontWeight=\"regular\"\n          >\n            {releases.length > 0\n              ? formatMessage(\n                  {\n                    id: 'content-releases.content-manager.list-view.releases-number',\n                    defaultMessage: '{number} {number, plural, one {release} other {releases}}',\n                  },\n                  {\n                    number: releases.length,\n                  }\n                )\n              : '-'}\n          </Typography>\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content>\n        <ul>\n          {releases.map(({ id, name }) => (\n            <Box key={id} padding={3} tag=\"li\">\n              <Link href={`/admin/plugins/content-releases/${id}`} isExternal={false}>\n                {name}\n              </Link>\n            </Box>\n          ))}\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport { ReleaseListCell, addColumnToTableHook };\nexport type { ReleaseListCellProps };\n", "import { useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PERMISSIONS } from '../constants';\nimport { useGetReleasesForEntryQuery } from '../services/release';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { ReleaseActionMenu } from './ReleaseActionMenu';\n\nimport type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';\n\nconst Panel: PanelComponent = ({\n  model,\n  document,\n  documentId,\n  collectionType,\n}: PanelComponentProps) => {\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(model);\n  const { formatMessage, formatDate, formatTime } = useIntl();\n\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canRead, canDeleteAction } = allowedActions;\n\n  const response = useGetReleasesForEntryQuery(\n    {\n      contentType: model,\n      entryDocumentId: documentId,\n      locale,\n      hasEntryAttached: true,\n    },\n    {\n      skip: !document,\n    }\n  );\n  const releases = response.data?.data;\n\n  const getReleaseColorVariant = (\n    actionType: 'publish' | 'unpublish',\n    shade: '100' | '200' | '600'\n  ) => {\n    if (actionType === 'unpublish') {\n      return `secondary${shade}`;\n    }\n\n    return `success${shade}`;\n  };\n\n  // Project is not EE or contentType does not have draftAndPublish enabled\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canRead) {\n    return null;\n  }\n\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\n    return null;\n  }\n\n  if (!releases || releases.length === 0) {\n    return null;\n  }\n\n  return {\n    title: formatMessage({\n      id: 'content-releases.plugin.name',\n      defaultMessage: 'Releases',\n    }),\n    content: (\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3} width=\"100%\">\n        {releases?.map((release) => (\n          <Flex\n            key={release.id}\n            direction=\"column\"\n            alignItems=\"start\"\n            borderWidth=\"1px\"\n            borderStyle=\"solid\"\n            borderColor={getReleaseColorVariant(release.actions[0].type, '200')}\n            overflow=\"hidden\"\n            hasRadius\n          >\n            <Box\n              paddingTop={3}\n              paddingBottom={3}\n              paddingLeft={4}\n              paddingRight={4}\n              background={getReleaseColorVariant(release.actions[0].type, '100')}\n              width=\"100%\"\n            >\n              <Typography\n                fontSize={1}\n                variant=\"pi\"\n                textColor={getReleaseColorVariant(release.actions[0].type, '600')}\n              >\n                {formatMessage(\n                  {\n                    id: 'content-releases.content-manager-edit-view.list-releases.title',\n                    defaultMessage:\n                      '{isPublish, select, true {Will be published in} other {Will be unpublished in}}',\n                  },\n                  { isPublish: release.actions[0].type === 'publish' }\n                )}\n              </Typography>\n            </Box>\n            <Flex padding={4} direction=\"column\" gap={2} width=\"100%\" alignItems=\"flex-start\">\n              <Typography fontSize={2} fontWeight=\"bold\" variant=\"omega\" textColor=\"neutral700\">\n                {release.name}\n              </Typography>\n              {release.scheduledAt && release.timezone && (\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.content-manager-edit-view.scheduled.date',\n                      defaultMessage: '{date} at {time} ({offset})',\n                    },\n                    {\n                      date: formatDate(new Date(release.scheduledAt), {\n                        day: '2-digit',\n                        month: '2-digit',\n                        year: 'numeric',\n                        timeZone: release.timezone,\n                      }),\n                      time: formatTime(new Date(release.scheduledAt), {\n                        hourCycle: 'h23',\n                        timeZone: release.timezone,\n                      }),\n                      offset: getTimezoneOffset(release.timezone, new Date(release.scheduledAt)),\n                    }\n                  )}\n                </Typography>\n              )}\n              {canDeleteAction ? (\n                <ReleaseActionMenu.Root hasTriggerBorder>\n                  <ReleaseActionMenu.EditReleaseItem releaseId={release.id} />\n                  <ReleaseActionMenu.DeleteReleaseActionItem\n                    releaseId={release.id}\n                    actionId={release.actions[0].id}\n                  />\n                </ReleaseActionMenu.Root>\n              ) : null}\n            </Flex>\n          </Flex>\n        ))}\n      </Flex>\n    ),\n  };\n};\n\nexport { Panel };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { PaperPlane } from '@strapi/icons';\n\nimport { ReleaseAction } from './components/ReleaseAction';\nimport { ReleaseActionModalForm } from './components/ReleaseActionModal';\nimport { addColumnToTableHook } from './components/ReleaseListCell';\nimport { Panel as ReleasesPanel } from './components/ReleasesPanel';\nimport { PERMISSIONS, PLUGIN_ID } from './constants';\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type {\n  DocumentActionComponent,\n  BulkActionComponent,\n} from '@strapi/content-manager/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\n// eslint-disable-next-line import/no-default-export\nconst admin: Plugin.Config.AdminInput = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: StrapiApp) {\n    /**\n     * Hook that adds the locale column in the Release Details table\n     * @constant\n     * @type {string}\n     */\n    app.createHook('ContentReleases/pages/ReleaseDetails/add-locale-in-releases');\n\n    if (window.strapi.features.isEnabled('cms-content-releases')) {\n      app.addMenuLink({\n        to: `plugins/${pluginId}`,\n        icon: PaperPlane,\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        Component: () => import('./pages/App').then((mod) => ({ default: mod.App })),\n        permissions: PERMISSIONS.main,\n        position: 2,\n      });\n\n      // Insert the releases container into the CM's sidebar on the Edit View\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\n      if (\n        'addEditViewSidePanel' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\n      ) {\n        contentManagerPluginApis.addEditViewSidePanel([ReleasesPanel]);\n      }\n\n      // Insert the \"add to release\" action into the CM's Edit View\n      if (\n        'addDocumentAction' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addDocumentAction === 'function'\n      ) {\n        contentManagerPluginApis.addDocumentAction((actions: DocumentActionComponent[]) => {\n          const indexOfDeleteAction = actions.findIndex((action) => action.type === 'unpublish');\n          actions.splice(indexOfDeleteAction, 0, ReleaseActionModalForm);\n          return actions;\n        });\n      }\n\n      app.addSettingsLink('global', {\n        id: pluginId,\n        to: 'releases',\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        licenseOnly: true,\n        permissions: [],\n        async Component() {\n          const { ProtectedReleasesSettingsPage } = await import('./pages/ReleasesSettingsPage');\n          return { default: ProtectedReleasesSettingsPage };\n        },\n      });\n\n      if (\n        'addBulkAction' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addBulkAction === 'function'\n      ) {\n        contentManagerPluginApis.addBulkAction((actions: BulkActionComponent[]) => {\n          // We want to add this action to just before the delete action all the time\n          const deleteActionIndex = actions.findIndex((action) => action.type === 'delete');\n\n          actions.splice(deleteActionIndex, 0, ReleaseAction);\n          return actions;\n        });\n      }\n\n      // Hook that adds a column into the CM's LV table\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n\n      app.widgets.register([\n        {\n          icon: PaperPlane,\n          title: {\n            id: `${PLUGIN_ID}.widget.upcoming-releases.title`,\n            defaultMessage: 'Upcoming releases',\n          },\n          component: async () => {\n            const { UpcomingReleasesWidget } = await import('./components/Widgets');\n            return UpcomingReleasesWidget;\n          },\n          pluginId: PLUGIN_ID,\n          id: 'upcoming-releases',\n          link: {\n            label: {\n              id: `${PLUGIN_ID}.widget.upcoming-releases.link`,\n              defaultMessage: 'Open Releases',\n            },\n            href: '/plugins/content-releases',\n          },\n        },\n      ]);\n    } else if (\n      !window.strapi.features.isEnabled('cms-content-releases') &&\n      window.strapi?.flags?.promoteEE\n    ) {\n      app.addSettingsLink('global', {\n        id: pluginId,\n        to: '/plugins/purchase-content-releases',\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        permissions: [],\n        async Component() {\n          const { PurchaseContentReleases } = await import('./pages/PurchaseContentReleases');\n          return { default: PurchaseContentReleases };\n        },\n        licenseOnly: true,\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, 'content-releases'),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n", "import * as React from 'react';\n\nimport {\n  useNotification,\n  useAPIErrorHandler,\n  useRBAC,\n  useAdminUsers,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Combobox, ComboboxOption, Field, VisuallyHidden } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { useTypedSelector } from '../../../../../modules/hooks';\nimport { useUpdateAssigneeMutation } from '../../../../../services/content-manager';\nimport { buildValidParams } from '../../../../../utils/api';\nimport { getDisplayName } from '../../../../../utils/users';\n\nimport { ASSIGNEE_ATTRIBUTE_NAME } from './constants';\n\nconst AssigneeSelect = ({ isCompact }: { isCompact?: boolean }) => {\n  const {\n    collectionType = '',\n    id,\n    slug: model = '',\n  } = useParams<{ collectionType: string; slug: string; id: string }>();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const {\n    allowedActions: { canRead },\n    isLoading: isLoadingPermissions,\n  } = useRBAC(permissions.settings?.users);\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const {\n    data,\n    isLoading: isLoadingUsers,\n    isError,\n  } = useAdminUsers(undefined, {\n    skip: isLoadingPermissions || !canRead,\n  });\n  const { document } = unstable_useDocument(\n    {\n      collectionType,\n      model,\n      documentId: id,\n    },\n    {\n      skip: !id && collectionType !== 'single-types',\n    }\n  );\n\n  const users = data?.users || [];\n\n  const currentAssignee = document ? document[ASSIGNEE_ATTRIBUTE_NAME] : null;\n\n  const [updateAssignee, { error, isLoading: isMutating }] = useUpdateAssigneeMutation();\n\n  if (!collectionType || !model || !document?.documentId) {\n    return null;\n  }\n\n  const handleChange = async (assigneeId: string | null) => {\n    // a simple way to avoid erroneous updates\n    if (currentAssignee?.id === assigneeId) {\n      return;\n    }\n\n    const res = await updateAssignee({\n      slug: collectionType,\n      model,\n      id: document.documentId,\n      params,\n      data: {\n        id: assigneeId ? parseInt(assigneeId, 10) : null,\n      },\n    });\n\n    if ('data' in res) {\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-manager.reviewWorkflows.assignee.notification.saved',\n          defaultMessage: 'Assignee updated',\n        }),\n      });\n    }\n\n    if (isCompact && 'error' in res) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n    }\n  };\n\n  const isDisabled =\n    (!isLoadingPermissions && !isLoadingUsers && users.length === 0) || !document.documentId;\n  const isLoading = isLoadingUsers || isLoadingPermissions || isMutating;\n\n  const assigneeLabel = formatMessage({\n    id: 'content-manager.reviewWorkflows.assignee.label',\n    defaultMessage: 'Assignee',\n  });\n  const assigneeClearLabel = formatMessage({\n    id: 'content-manager.reviewWorkflows.assignee.clear',\n    defaultMessage: 'Clear assignee',\n  });\n  const assigneePlaceholder = formatMessage({\n    id: 'content-manager.reviewWorkflows.assignee.placeholder',\n    defaultMessage: 'Select…',\n  });\n\n  if (isCompact) {\n    return (\n      <Field.Root name={ASSIGNEE_ATTRIBUTE_NAME} id={ASSIGNEE_ATTRIBUTE_NAME}>\n        <VisuallyHidden>\n          <Field.Label>{assigneeLabel}</Field.Label>\n        </VisuallyHidden>\n        <Combobox\n          clearLabel={assigneeClearLabel}\n          disabled={isDisabled}\n          value={currentAssignee ? currentAssignee.id.toString() : null}\n          onChange={handleChange}\n          onClear={() => handleChange(null)}\n          placeholder={assigneePlaceholder}\n          loading={isLoading || isLoadingPermissions || isMutating}\n          size=\"S\"\n        >\n          {users.map((user) => {\n            return (\n              <ComboboxOption\n                key={user.id}\n                value={user.id.toString()}\n                textValue={getDisplayName(user)}\n              >\n                {getDisplayName(user)}\n              </ComboboxOption>\n            );\n          })}\n        </Combobox>\n      </Field.Root>\n    );\n  }\n\n  return (\n    <Field.Root\n      name={ASSIGNEE_ATTRIBUTE_NAME}\n      id={ASSIGNEE_ATTRIBUTE_NAME}\n      error={\n        ((isError &&\n          canRead &&\n          formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.error',\n            defaultMessage: 'An error occurred while fetching users',\n          })) ||\n          (error && formatAPIError(error))) ??\n        undefined\n      }\n    >\n      <Field.Label>{assigneeLabel}</Field.Label>\n      <Combobox\n        clearLabel={assigneeClearLabel}\n        disabled={\n          (!isLoadingPermissions && !isLoading && users.length === 0) || !document.documentId\n        }\n        value={currentAssignee ? currentAssignee.id.toString() : null}\n        onChange={handleChange}\n        onClear={() => handleChange(null)}\n        placeholder={assigneePlaceholder}\n        loading={isLoading || isLoadingPermissions || isMutating}\n      >\n        {users.map((user) => {\n          return (\n            <ComboboxOption\n              key={user.id}\n              value={user.id.toString()}\n              textValue={getDisplayName(user)}\n            >\n              {getDisplayName(user)}\n            </ComboboxOption>\n          );\n        })}\n      </Combobox>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\nexport { AssigneeSelect };\n", "export const STAGE_ATTRIBUTE_NAME = 'strapi_stage';\nexport const ASSIGNEE_ATTRIBUTE_NAME = 'strapi_assignee';\n", "import * as React from 'react';\n\nimport { useNotification, useAPIErrorHandler, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport {\n  SingleSelect,\n  type SingleSelectProps,\n  SingleSelectOption,\n  Field,\n  Flex,\n  Loader,\n  Typography,\n  VisuallyHidden,\n  Tooltip,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { Stage } from '../../../../../../../shared/contracts/review-workflows';\nimport { LimitsModal, LimitsModalProps } from '../../../../../components/LimitsModal';\nimport {\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../../../../constants';\nimport { useGetStagesQuery, useUpdateStageMutation } from '../../../../../services/content-manager';\nimport { buildValidParams } from '../../../../../utils/api';\nimport { getStageColorByHex } from '../../../../../utils/colors';\n\nimport { STAGE_ATTRIBUTE_NAME } from './constants';\n\nimport type { Data } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * LimitModals\n * -----------------------------------------------------------------------------------------------*/\n\nconst WorkflowLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\n      <LimitsModal.Title>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.workflows.limit.title',\n          defaultMessage: 'You’ve reached the limit of workflows in your plan',\n        })}\n      </LimitsModal.Title>\n\n      <LimitsModal.Body>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.workflows.limit.body',\n          defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n        })}\n      </LimitsModal.Body>\n    </LimitsModal.Root>\n  );\n};\n\nconst StageLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\n      <LimitsModal.Title>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.stages.limit.title',\n          defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n        })}\n      </LimitsModal.Title>\n\n      <LimitsModal.Body>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.stages.limit.body',\n          defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n        })}\n      </LimitsModal.Body>\n    </LimitsModal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * StageSelect\n * -----------------------------------------------------------------------------------------------*/\n\nconst Select = ({\n  stages,\n  activeWorkflowStage,\n  isLoading,\n  ...props\n}: SingleSelectProps & { stages: Stage[]; activeWorkflowStage: Stage; isLoading: boolean }) => {\n  const { formatMessage } = useIntl();\n  const { themeColorName } = getStageColorByHex(activeWorkflowStage?.color) ?? {};\n\n  return (\n    <SingleSelect\n      disabled={stages.length === 0}\n      placeholder={formatMessage({\n        id: 'content-manager.reviewWorkflows.assignee.placeholder',\n        defaultMessage: 'Select…',\n      })}\n      startIcon={\n        activeWorkflowStage && (\n          <Flex\n            tag=\"span\"\n            height={2}\n            background={activeWorkflowStage?.color}\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n            hasRadius\n            shrink={0}\n            width={2}\n            marginRight=\"-3px\"\n          />\n        )\n      }\n      // @ts-expect-error – `customizeContent` is not correctly typed in the DS.\n      customizeContent={() => {\n        return (\n          <Flex tag=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n            <Typography textColor=\"neutral800\" ellipsis lineHeight=\"inherit\">\n              {activeWorkflowStage?.name ?? ''}\n            </Typography>\n            {isLoading ? <Loader small style={{ display: 'flex' }} data-testid=\"loader\" /> : null}\n          </Flex>\n        );\n      }}\n      {...props}\n    >\n      {stages.map(({ id, color, name }) => {\n        const { themeColorName } = getStageColorByHex(color) ?? {};\n\n        return (\n          <SingleSelectOption\n            key={id}\n            startIcon={\n              <Flex\n                height={2}\n                background={color}\n                borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n                hasRadius\n                shrink={0}\n                width={2}\n              />\n            }\n            value={id}\n            textValue={name}\n          >\n            {name}\n          </SingleSelectOption>\n        );\n      })}\n    </SingleSelect>\n  );\n};\n\nexport const StageSelect = ({ isCompact }: { isCompact?: boolean }) => {\n  const {\n    collectionType = '',\n    slug: model = '',\n    id = '',\n  } = useParams<{\n    collectionType: string;\n    slug: string;\n    id: string;\n  }>();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { document, isLoading: isLoadingDocument } = unstable_useDocument(\n    {\n      collectionType,\n      model,\n      documentId: id,\n    },\n    {\n      skip: !id && collectionType !== 'single-types',\n    }\n  );\n\n  const { data, isLoading: isLoadingStages } = useGetStagesQuery(\n    {\n      slug: collectionType,\n      model: model,\n      // @ts-expect-error – `id` is not correctly typed in the DS.\n      id: document?.documentId,\n      params,\n    },\n    {\n      skip: !document?.documentId,\n    }\n  );\n\n  const { meta, stages = [] } = data ?? {};\n\n  const { getFeature } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState<'stage' | 'workflow' | null>(null);\n\n  const limits = getFeature<string>('review-workflows') ?? {};\n\n  const activeWorkflowStage = document ? document[STAGE_ATTRIBUTE_NAME] : null;\n\n  const [updateStage, { error }] = useUpdateStageMutation();\n\n  const handleChange = async (stageId: Data.ID) => {\n    try {\n      /**\n       * If the current license has a limit:\n       * check if the total count of workflows exceeds that limit and display\n       * the limits modal.\n       *\n       * If the current license does not have a limit (e.g. offline license):\n       * do nothing (for now).\n       *\n       */\n\n      if (\n        limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME], 10) < (meta?.workflowCount ?? 0)\n      ) {\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit:\n         * check if the total count of stages exceeds that limit and display\n         * the limits modal.\n         *\n         * If the current license does not have a limit (e.g. offline license):\n         * do nothing (for now).\n         *\n         */\n      } else if (\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME], 10) < stages.length\n      ) {\n        setShowLimitModal('stage');\n      } else {\n        if (document?.documentId) {\n          const res = await updateStage({\n            model,\n            id: document.documentId,\n            slug: collectionType,\n            params,\n            data: { id: stageId },\n          });\n\n          if ('data' in res) {\n            toggleNotification({\n              type: 'success',\n              message: formatMessage({\n                id: 'content-manager.reviewWorkflows.stage.notification.saved',\n                defaultMessage: 'Review stage updated',\n              }),\n            });\n          }\n\n          if (isCompact && 'error' in res) {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n        }\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'content-manager.reviewWorkflows.stage.notification.error',\n          defaultMessage: 'An error occurred while updating the review stage',\n        }),\n      });\n    }\n  };\n\n  const isLoading = isLoadingStages || isLoadingDocument;\n\n  const reviewStageLabel = formatMessage({\n    id: 'content-manager.reviewWorkflows.stage.label',\n    defaultMessage: 'Review stage',\n  });\n  const reviewStageHint =\n    !isLoading &&\n    stages.length === 0 &&\n    // TODO: Handle errors and hints\n    formatMessage({\n      id: 'content-manager.reviewWorkflows.stages.no-transition',\n      defaultMessage: 'You don’t have the permission to update this stage.',\n    });\n\n  if (isCompact) {\n    return (\n      <>\n        <Tooltip label={reviewStageHint}>\n          <Field.Root name={STAGE_ATTRIBUTE_NAME} id={STAGE_ATTRIBUTE_NAME}>\n            <>\n              <VisuallyHidden>\n                <Field.Label>{reviewStageLabel}</Field.Label>\n              </VisuallyHidden>\n              <Select\n                stages={stages}\n                activeWorkflowStage={activeWorkflowStage}\n                isLoading={isLoading}\n                size=\"S\"\n                disabled={stages.length === 0}\n                value={activeWorkflowStage?.id}\n                onChange={handleChange}\n                placeholder={formatMessage({\n                  id: 'content-manager.reviewWorkflows.assignee.placeholder',\n                  defaultMessage: 'Select…',\n                })}\n              />\n            </>\n          </Field.Root>\n        </Tooltip>\n        <WorkflowLimitModal\n          open={showLimitModal === 'workflow'}\n          onOpenChange={() => setShowLimitModal(null)}\n        />\n        <StageLimitModal\n          open={showLimitModal === 'stage'}\n          onOpenChange={() => setShowLimitModal(null)}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Field.Root\n        hint={reviewStageHint}\n        error={(error && formatAPIError(error)) || undefined}\n        name={STAGE_ATTRIBUTE_NAME}\n        id={STAGE_ATTRIBUTE_NAME}\n      >\n        <Field.Label>{reviewStageLabel}</Field.Label>\n        <Select\n          stages={stages}\n          activeWorkflowStage={activeWorkflowStage}\n          isLoading={isLoading}\n          disabled={stages.length === 0}\n          value={activeWorkflowStage?.id}\n          onChange={handleChange}\n          placeholder={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.placeholder',\n            defaultMessage: 'Select…',\n          })}\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n      <WorkflowLimitModal\n        open={showLimitModal === 'workflow'}\n        onOpenChange={() => setShowLimitModal(null)}\n      />\n      <StageLimitModal\n        open={showLimitModal === 'stage'}\n        onOpenChange={() => setShowLimitModal(null)}\n      />\n    </>\n  );\n};\n", "import { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport { Flex } from '@strapi/design-system';\nimport { useParams } from 'react-router-dom';\n\nimport { AssigneeSelect } from './AssigneeSelect';\nimport { StageSelect } from './StageSelect';\n\nconst Header = () => {\n  const {\n    slug = '',\n    id,\n    collectionType,\n  } = useParams<{\n    collectionType: string;\n    slug: string;\n    id: string;\n  }>();\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(slug);\n\n  if (\n    !window.strapi.isEE ||\n    !options?.reviewWorkflows ||\n    (collectionType !== 'single-types' && !id) ||\n    id === 'create'\n  ) {\n    return null;\n  }\n\n  return (\n    <Flex gap={2}>\n      <AssigneeSelect isCompact />\n      <StageSelect isCompact />\n    </Flex>\n  );\n};\n\nHeader.type = 'preview';\n\nexport { Header };\n", "import { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport { Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { AssigneeSelect } from './AssigneeSelect';\nimport { StageSelect } from './StageSelect';\n\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\n\nconst Panel: PanelComponent = () => {\n  const {\n    slug = '',\n    id,\n    collectionType,\n  } = useParams<{\n    collectionType: string;\n    slug: string;\n    id: string;\n  }>();\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(slug);\n  const { formatMessage } = useIntl();\n\n  if (\n    !window.strapi.isEE ||\n    !options?.reviewWorkflows ||\n    (collectionType !== 'single-types' && !id) ||\n    id === 'create'\n  ) {\n    return null;\n  }\n\n  return {\n    title: formatMessage({\n      id: 'content-manager.containers.edit.panels.review-workflows.title',\n      defaultMessage: 'Review Workflows',\n    }),\n    content: (\n      <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\n        <AssigneeSelect />\n        <StageSelect />\n      </Flex>\n    ),\n  };\n};\n\n// @ts-expect-error – this is fine, we like to label the core panels / actions.\nPanel.type = 'review-workflows';\n\nexport { Panel };\n", "import * as React from 'react';\n\nimport { type Filters, useAdminUsers, useField } from '@strapi/admin/strapi-admin';\nimport { Combobox, ComboboxOption, ComboboxProps } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getDisplayName } from '../../../../utils/users';\n\ninterface AssigneeFilterProps extends Pick<ComboboxProps, 'value' | 'onChange'> {}\n\nconst AssigneeFilter = ({ name }: Filters.ValueInputProps) => {\n  const [page, setPage] = React.useState(1);\n  const { formatMessage } = useIntl();\n  const { data, isLoading } = useAdminUsers({\n    page,\n  });\n  const users = data?.users || [];\n\n  const field = useField(name);\n\n  const handleChange = (value?: string) => {\n    setPage(1);\n    field.onChange(name, value);\n  };\n\n  return (\n    <Combobox\n      value={field.value}\n      aria-label={formatMessage({\n        id: 'content-manager.components.Filters.usersSelect.label',\n        defaultMessage: 'Search and select an user to filter',\n      })}\n      onChange={handleChange}\n      loading={isLoading}\n      onLoadMore={() => setPage((prev) => prev + 1)}\n    >\n      {users.map((user) => {\n        return (\n          <ComboboxOption key={user.id} value={user.id.toString()}>\n            {getDisplayName(user)}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n\nexport { AssigneeFilter };\nexport type { AssigneeFilterProps };\n", "import { type Filters, useField } from '@strapi/admin/strapi-admin';\nimport {\n  Flex,\n  Loader,\n  SingleSelect,\n  SingleSelectOption,\n  SingleSelectProps,\n  Typography,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { getStageColorByHex } from '../../../../utils/colors';\nimport { useReviewWorkflows } from '../../../settings/hooks/useReviewWorkflows';\n\ninterface StageFilterProps extends Pick<SingleSelectProps, 'value' | 'onChange'> {\n  uid?: string;\n}\n\nconst StageFilter = (props: Filters.ValueInputProps) => {\n  const { slug: model } = useParams<{ slug: string }>();\n  const { formatMessage } = useIntl();\n  const { workflows, isLoading } = useReviewWorkflows({ filters: { contentTypes: model } });\n\n  const field = useField(props.name);\n\n  const [workflow] = workflows ?? [];\n\n  return (\n    <SingleSelect\n      aria-label={formatMessage({\n        id: 'content-manager.components.Filters.reviewWorkflows.label',\n        defaultMessage: 'Search and select an workflow stage to filter',\n      })}\n      value={field.value}\n      onChange={(value) => {\n        field.onChange(props.name, value);\n      }}\n      loading={isLoading}\n      // @ts-expect-error – DS type error with SingleSelect['customizeContent']\n      customizeContent={() => (\n        <Flex tag=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n          <Typography textColor=\"neutral800\" ellipsis>\n            {field.value}\n          </Typography>\n          {isLoading ? <Loader small style={{ display: 'flex' }} /> : null}\n        </Flex>\n      )}\n    >\n      {(workflow?.stages ?? []).map(({ id, color, name }) => {\n        const { themeColorName } = getStageColorByHex(color) ?? {};\n\n        return (\n          <SingleSelectOption\n            key={id}\n            startIcon={\n              <Flex\n                height={2}\n                background={color}\n                borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n                hasRadius\n                shrink={0}\n                width={2}\n              />\n            }\n            value={name}\n          >\n            {name}\n          </SingleSelectOption>\n        );\n      })}\n    </SingleSelect>\n  );\n};\n\nexport { StageFilter };\nexport type { StageFilterProps };\n", "import { AssigneeFilter } from './components/AssigneeFilter';\nimport { StageFilter } from './components/StageFilter';\nimport { AssigneeColumn, StageColumn } from './components/TableColumns';\nimport { ASSIGNEE_ATTRIBUTE_NAME, STAGE_ATTRIBUTE_NAME } from './id/components/constants';\n\nimport type { Filters } from '@strapi/admin/strapi-admin';\nimport type { ListFieldLayout } from '@strapi/content-manager/strapi-admin';\nimport type { MessageDescriptor } from 'react-intl';\n\nexport const REVIEW_WORKFLOW_COLUMNS = [\n  {\n    name: STAGE_ATTRIBUTE_NAME,\n    attribute: {\n      type: 'relation',\n      relation: 'oneToMany',\n      target: 'admin::review-workflow-stage',\n    },\n    label: {\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.stage',\n      defaultMessage: 'Review stage',\n    },\n    searchable: false,\n    sortable: true,\n    mainField: {\n      name: 'name',\n      type: 'string',\n    },\n    cellFormatter: (props) => <StageColumn {...props} />,\n  },\n  {\n    name: ASSIGNEE_ATTRIBUTE_NAME,\n    attribute: {\n      type: 'relation',\n      target: 'admin::user',\n      relation: 'oneToMany',\n    },\n    label: {\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.assignee',\n      defaultMessage: 'Assignee',\n    },\n    searchable: false,\n    sortable: true,\n    mainField: {\n      name: 'firstname',\n      type: 'string',\n    },\n    cellFormatter: (props) => <AssigneeColumn {...props} />,\n  },\n] satisfies Array<Omit<ListFieldLayout, 'label'> & { label: MessageDescriptor }>;\n\nexport const REVIEW_WORKFLOW_FILTERS = [\n  {\n    mainField: {\n      name: 'name',\n      type: 'string',\n    },\n    input: StageFilter,\n    label: {\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.stage',\n      defaultMessage: 'Review stage',\n    },\n    name: 'strapi_stage',\n    type: 'relation',\n  },\n\n  {\n    type: 'relation',\n    mainField: {\n      name: 'id',\n      type: 'integer',\n    },\n    input: AssigneeFilter,\n    operators: [\n      {\n        label: {\n          id: 'components.FilterOptions.FILTER_TYPES.$eq',\n          defaultMessage: 'is',\n        },\n        value: '$eq',\n      },\n      {\n        label: {\n          id: 'components.FilterOptions.FILTER_TYPES.$ne',\n          defaultMessage: 'is not',\n        },\n        value: '$ne',\n      },\n    ],\n    label: {\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.assignee.label',\n      defaultMessage: 'Assignee',\n    },\n    name: 'strapi_assignee',\n  },\n] satisfies Array<\n  Omit<Filters.Filter, 'label' | 'operators'> & {\n    label: MessageDescriptor;\n    operators?: Array<{ value: string; label: MessageDescriptor }>;\n  }\n>;\n", "import { REVIEW_WORKFLOW_COLUMNS } from '../routes/content-manager/model/constants';\n\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddColumnToTableHookArgs {\n  layout: ListLayout;\n  displayedHeaders: ListFieldLayout[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { options } = layout;\n\n  if (!options.reviewWorkflows) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [...displayedHeaders, ...REVIEW_WORKFLOW_COLUMNS],\n    layout,\n  };\n};\n\nexport { addColumnToTableHook };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { SealCheck } from '@strapi/icons';\n\nimport { PLUGIN_ID, FEATURE_ID } from './constants';\nimport { Header } from './routes/content-manager/model/id/components/Header';\nimport { Panel } from './routes/content-manager/model/id/components/Panel';\nimport { addColumnToTableHook } from './utils/cm-hooks';\nimport { prefixPluginTranslations } from './utils/translations';\n\nimport type { StrapiApp, WidgetArgs } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst admin: Plugin.Config.AdminInput = {\n  register(app: StrapiApp) {\n    if (window.strapi.features.isEnabled(FEATURE_ID)) {\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\n\n      if (\n        'addEditViewSidePanel' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\n      ) {\n        contentManagerPluginApis.addEditViewSidePanel([Panel]);\n      }\n\n      app.addSettingsLink('global', {\n        id: PLUGIN_ID,\n        to: `review-workflows`,\n        intlLabel: {\n          id: `${PLUGIN_ID}.plugin.name`,\n          defaultMessage: 'Review Workflows',\n        },\n        licenseOnly: true,\n        permissions: [],\n        async Component() {\n          const { Router } = await import('./router');\n          return { default: Router };\n        },\n      });\n\n      // Always put the assigned to me widget last in the list of widgets\n      app.widgets.register((widgets: WidgetArgs[]) => [\n        ...widgets,\n        {\n          icon: SealCheck,\n          title: {\n            id: `${PLUGIN_ID}.widget.assigned.title`,\n            defaultMessage: 'Assigned to me',\n          },\n          component: async () => {\n            const { AssignedWidget } = await import('./components/Widgets');\n            return AssignedWidget;\n          },\n          pluginId: PLUGIN_ID,\n          id: 'assigned',\n          permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n        },\n      ]);\n    } else if (!window.strapi.features.isEnabled(FEATURE_ID) && window.strapi?.flags?.promoteEE) {\n      app.addSettingsLink('global', {\n        id: PLUGIN_ID,\n        to: `purchase-review-workflows`,\n        intlLabel: {\n          id: `${PLUGIN_ID}.plugin.name`,\n          defaultMessage: 'Review Workflows',\n        },\n        licenseOnly: true,\n        permissions: [],\n        async Component() {\n          const { PurchaseReviewWorkflows } = await import('./routes/purchase-review-workflows');\n          return { default: PurchaseReviewWorkflows };\n        },\n      });\n    }\n  },\n  bootstrap(app: StrapiApp) {\n    if (window.strapi.features.isEnabled(FEATURE_ID)) {\n      app.getPlugin('content-manager').injectComponent('preview', 'actions', {\n        name: 'review-workflows-assignee',\n        Component: Header,\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n", "import { RenderAdminArgs, renderAdmin } from '@strapi/admin/strapi-admin';\nimport contentTypeBuilder from '@strapi/content-type-builder/strapi-admin';\nimport contentManager from '@strapi/content-manager/strapi-admin';\nimport email from '@strapi/email/strapi-admin';\nimport upload from '@strapi/upload/strapi-admin';\nimport i18n from '@strapi/i18n/strapi-admin';\nimport contentReleases from '@strapi/content-releases/strapi-admin';\nimport reviewWorkflows from '@strapi/review-workflows/strapi-admin';\n\nconst render = (mountNode: HTMLElement | null, { plugins, ...restArgs }: RenderAdminArgs) => {\n  return renderAdmin(mountNode, {\n    ...restArgs,\n    plugins: {\n      'content-manager': contentManager,\n      'content-type-builder': contentTypeBuilder,\n      email,\n      upload,\n      contentReleases,\n      i18n,\n      reviewWorkflows,\n      ...plugins,\n    },\n  });\n};\n\nexport { render as renderAdmin };\nexport type { RenderAdminArgs };\n\nexport * from '@strapi/admin/strapi-admin';\n\nexport {\n  unstable_useDocumentLayout,\n  unstable_useDocumentActions,\n  unstable_useDocument,\n  unstable_useContentManagerContext,\n  useDocumentRBAC,\n} from '@strapi/content-manager/strapi-admin';\n\nexport {\n  private_useAutoReloadOverlayBlocker,\n  private_AutoReloadOverlayBlockerProvider,\n} from '@strapi/content-type-builder/strapi-admin';\n"],
  "mappings": "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",
  "names": ["reducer", "get", "create", "cloneDeep", "prefixPluginTranslations", "pluginId", "src_default", "prefixPluginTranslations", "prefixPluginTranslations", "pluginId", "PERMISSIONS", "globImport_translations_json", "prefixPluginTranslations", "src_default", "React", "React", "React", "Filters", "import_jsx_runtime", "React", "import_jsx_runtime", "Pagination", "import_jsx_runtime", "Pagination", "React", "import_jsx_runtime", "import_jsx_runtime", "Filters", "_a", "_b", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "folderId", "import_jsx_runtime", "folderId", "React", "React", "import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "STEPS", "name", "value", "uploadedFiles", "admin", "pluginId", "PERMISSIONS", "globImport_translations_json", "src_default", "import_get", "React", "import_jsx_runtime", "TextAlignTypography", "name", "value", "React", "React", "has", "import_qs", "import_jsx_runtime", "import_jsx_runtime", "locale", "_a", "document", "import_jsx_runtime", "React", "import_jsx_runtime", "_a", "_b", "React", "import_jsx_runtime", "import_jsx_runtime", "name", "import_jsx_runtime", "import_get", "type", "get", "prefixPluginTranslations", "pluginId", "omit", "src_default", "pluginId", "PERMISSIONS", "create", "get", "globImport_translations_json", "prefixPluginTranslations", "import_jsx_runtime", "create", "PERMISSIONS", "import_jsx_runtime", "PERMISSIONS", "_a", "response", "Form", "import_jsx_runtime", "addColumnToTableHook", "name", "Link", "import_jsx_runtime", "PERMISSIONS", "prefixPluginTranslations", "pluginId", "admin", "pluginId", "PERMISSIONS", "addColumnToTableHook", "globImport_translations_json", "prefixPluginTranslations", "src_default", "React", "import_jsx_runtime", "buildValidParams", "React", "import_jsx_runtime", "name", "themeColorName", "buildValidParams", "error", "import_jsx_runtime", "import_jsx_runtime", "Panel", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "addColumnToTableHook", "prefixPluginTranslations", "pluginId", "admin", "addColumnToTableHook", "Panel", "PLUGIN_ID", "globImport_translations_json", "prefixPluginTranslations", "src_default", "render", "mountNode", "plugins", "restArgs", "renderAdmin", "contentManager", "contentTypeBuilder", "email", "upload", "contentReleases", "i18n", "reviewWorkflows"]
}
