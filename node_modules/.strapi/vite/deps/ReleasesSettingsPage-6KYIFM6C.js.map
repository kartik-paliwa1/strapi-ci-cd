{
  "version": 3,
  "sources": ["../../../../../packages/core/content-releases/admin/src/pages/ReleasesSettingsPage.tsx"],
  "sourcesContent": ["import {\n  Form,\n  Layouts,\n  Page,\n  useAPIErrorHandler,\n  isFetchError,\n  GradientBadge,\n  useNotification,\n  useField,\n  useRBAC,\n  FormHelpers,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Combobox,\n  ComboboxOption,\n  Field,\n  Flex,\n  Grid,\n  Typography,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useTypedSelector } from '../modules/hooks';\nimport { useGetReleaseSettingsQuery, useUpdateReleaseSettingsMutation } from '../services/release';\nimport { getTimezones } from '../utils/time';\nimport { SETTINGS_SCHEMA } from '../validation/schemas';\n\nimport type { UpdateSettings } from '../../../shared/contracts/settings';\n\ninterface UpdateDefaultTimezone {\n  defaultTimezone: string;\n}\n\nconst ReleasesSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [updateReleaseSettings, { isLoading: isSubmittingForm }] =\n    useUpdateReleaseSettingsMutation();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n\n  const { timezoneList } = getTimezones(new Date());\n\n  const handleSubmit = async (\n    body: UpdateSettings.Request['body'],\n    { setErrors }: FormHelpers<UpdateDefaultTimezone>\n  ) => {\n    const { defaultTimezone } = body;\n    const formattedDefaultTimezone = defaultTimezone;\n    const isBodyTimezoneValid = timezoneList.some(\n      (timezone) => timezone.value === formattedDefaultTimezone\n    );\n\n    if (!isBodyTimezoneValid && defaultTimezone) {\n      const errorMessage = formatMessage({\n        id: 'components.Input.error.validation.combobox.invalid',\n        defaultMessage: 'The value provided is not valid',\n      });\n      setErrors({\n        defaultTimezone: errorMessage,\n      });\n      toggleNotification({\n        type: 'danger',\n        message: errorMessage,\n      });\n      return;\n    }\n\n    const newBody =\n      !defaultTimezone || !isBodyTimezoneValid\n        ? { defaultTimezone: null }\n        : { defaultTimezone: formattedDefaultTimezone };\n\n    try {\n      const response = await updateReleaseSettings(newBody);\n\n      if ('data' in response) {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-releases.pages.Settings.releases.setting.default-timezone-notification-success',\n            defaultMessage: 'Default timezone updated.',\n          }),\n        });\n      } else if (isFetchError(response.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'An error occurred',\n          }),\n        });\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  if (isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  const releasePageTitle = formatMessage({\n    id: 'content-releases.pages.Releases.title',\n    defaultMessage: 'Releases',\n  });\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: releasePageTitle,\n          }\n        )}\n      </Page.Title>\n      <Page.Main aria-busy={isLoadingSettings} tabIndex={-1}>\n        <Form\n          method=\"PUT\"\n          initialValues={{\n            defaultTimezone: data?.data.defaultTimezone,\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={SETTINGS_SCHEMA}\n        >\n          {({ modified, isSubmitting }: { modified: boolean; isSubmitting: boolean }) => {\n            return (\n              <>\n                <Layouts.Header\n                  primaryAction={\n                    canUpdate ? (\n                      <Button\n                        disabled={!modified || isSubmittingForm}\n                        loading={isSubmitting}\n                        startIcon={<Check />}\n                        type=\"submit\"\n                      >\n                        {formatMessage({\n                          id: 'global.save',\n                          defaultMessage: 'Save',\n                        })}\n                      </Button>\n                    ) : null\n                  }\n                  secondaryAction={\n                    <GradientBadge\n                      label={formatMessage({\n                        id: 'components.premiumFeature.title',\n                        defaultMessage: 'Premium feature',\n                      })}\n                    />\n                  }\n                  title={releasePageTitle}\n                  subtitle={formatMessage({\n                    id: 'content-releases.pages.Settings.releases.description',\n                    defaultMessage: 'Create and manage content updates',\n                  })}\n                />\n                <Layouts.Content>\n                  <Flex\n                    direction=\"column\"\n                    background=\"neutral0\"\n                    alignItems=\"stretch\"\n                    padding={6}\n                    gap={6}\n                    shadow=\"filterShadow\"\n                    hasRadius\n                  >\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'content-releases.pages.Settings.releases.preferences.title',\n                        defaultMessage: 'Preferences',\n                      })}\n                    </Typography>\n                    <Grid.Root>\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <TimezoneDropdown />\n                      </Grid.Item>\n                    </Grid.Root>\n                  </Flex>\n                </Layouts.Content>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nconst TimezoneDropdown = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n  const { formatMessage } = useIntl();\n  const { timezoneList } = getTimezones(new Date());\n  const field = useField('defaultTimezone');\n  return (\n    <Field.Root\n      name=\"defaultTimezone\"\n      hint={formatMessage({\n        id: 'content-releases.pages.Settings.releases.timezone.hint',\n        defaultMessage: 'The timezone of every release can still be changed individually.',\n      })}\n      error={field.error}\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.pages.Settings.releases.timezone.label',\n          defaultMessage: 'Default timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        onTextValueChange={(value) => field.onChange('defaultTimezone', value)}\n        onChange={(value) => {\n          if ((field.value && value) || !field.value) {\n            field.onChange('defaultTimezone', value);\n          }\n        }}\n        onClear={() => field.onChange('defaultTimezone', '')}\n        value={field.value}\n        disabled={!canUpdate}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Hint />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedSettingsPage\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ProtectedReleasesSettingsPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']?.read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ReleasesSettingsPage />\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": []
}
