{
  "version": 3,
  "sources": ["../../../../../packages/core/content-releases/admin/src/services/homepage.ts", "../../../../../packages/core/content-releases/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import { adminApi } from '@strapi/admin/strapi-admin';\n\nimport * as Homepage from '../../../shared/contracts/homepage';\n\nimport type { Contracts } from '@strapi/content-manager/_internal/shared';\n\ntype ContentType = Contracts.ContentTypes.ContentType;\ninterface ContentTypes {\n  collectionType: ContentType[];\n  singleType: ContentType[];\n}\n\nconst contentManagerApi = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['UpcomingReleasesList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getUpcomingReleases: builder.query<Homepage.GetUpcomingReleases.Response['data'], void>({\n        query: () => '/content-releases/homepage/upcoming-releases',\n        transformResponse: (response: Homepage.GetUpcomingReleases.Response) => response.data,\n        providesTags: (_, _err) => ['UpcomingReleasesList'],\n      }),\n    }),\n    overrideExisting: true,\n  });\n\nconst { useGetUpcomingReleasesQuery } = contentManagerApi;\n\nexport { useGetUpcomingReleasesQuery };\nexport type { ContentTypes, ContentType };\n", "import { useTracking, Widget } from '@strapi/admin/strapi-admin';\nimport { Badge, Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Release } from '../../../shared/contracts/releases';\nimport { getBadgeProps } from '../pages/ReleasesPage';\nimport { useGetUpcomingReleasesQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ReleasesTable = ({ items }: { items: Release[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (item: Release): string => {\n    return `/plugins/content-releases/${item.id}`;\n  };\n\n  const handleRowClick = (item: Release) => () => {\n    trackUsage('willEditReleaseFromHome');\n    const link = getEditViewLink(item);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={4} rowCount={items?.length ?? 0}>\n      <Tbody>\n        {items?.map((item) => (\n          <Tr onClick={handleRowClick(item)} cursor=\"pointer\" key={item.documentId}>\n            <Td>\n              <CellTypography title={item.name} variant=\"omega\" textColor=\"neutral800\">\n                {item.name}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {item.status ? (\n                  <Badge {...getBadgeProps(item.status)}>{item.status}</Badge>\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography variant=\"omega\" textTransform=\"capitalize\" textColor=\"neutral600\">\n                {item.scheduledAt ? (\n                  <RelativeTime timestamp={new Date(item.scheduledAt)} />\n                ) : (\n                  formatMessage({\n                    id: 'content-releases.pages.Releases.not-scheduled',\n                    defaultMessage: 'Not scheduled',\n                  })\n                )}\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(item)}\n                  onClick={() => trackUsage('willEditReleaseFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Upcoming Releases\n * -----------------------------------------------------------------------------------------------*/\n\nconst UpcomingReleasesWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetUpcomingReleasesQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-releases.widget.upcoming-releases.no-data',\n          defaultMessage: 'No releases',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <ReleasesTable items={data} />;\n};\n\nexport { UpcomingReleasesWidget };\n"],
  "mappings": "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",
  "names": []
}
