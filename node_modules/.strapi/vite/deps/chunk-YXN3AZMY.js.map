{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/EditPage.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/components/WebhookForm.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/components/EventsTable.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/components/HeadersInput.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/components/TriggerContainer.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useMatch } from 'react-router-dom';\n\nimport { CreateWebhook, TriggerWebhook } from '../../../../../../shared/contracts/webhooks';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\n\nimport { WebhookForm, WebhookFormProps, WebhookFormValues } from './components/WebhookForm';\nimport { useWebhooks } from './hooks/useWebhooks';\n\nimport type { Modules } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst cleanData = (\n  data: WebhookFormValues\n): Omit<CreateWebhook.Request['body'], 'id' | 'isEnabled'> => ({\n  ...data,\n  headers: data.headers.reduce<Modules.WebhookStore.Webhook['headers']>((acc, { key, value }) => {\n    if (key !== '') {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {}),\n});\n\nconst EditPage = () => {\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/webhooks/:id');\n  const id = match?.params.id;\n  const isCreating = id === 'create';\n\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  /**\n   * Prevents the notifications from showing up twice because the function identity\n   * coming from the helper plugin is not stable\n   */\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableFormatAPIError = React.useCallback(formatAPIError, []);\n  const [isTriggering, setIsTriggering] = React.useState(false);\n  const [triggerResponse, setTriggerResponse] = React.useState<TriggerWebhook.Response['data']>();\n\n  const { isLoading, webhooks, error, createWebhook, updateWebhook, triggerWebhook } = useWebhooks(\n    { id: id! },\n    {\n      skip: isCreating,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: stableFormatAPIError(error),\n      });\n    }\n  }, [error, toggleNotification, stableFormatAPIError]);\n\n  const handleTriggerWebhook = async () => {\n    try {\n      setIsTriggering(true);\n\n      const res = await triggerWebhook(id!);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setTriggerResponse(res.data);\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    } finally {\n      setIsTriggering(false);\n    }\n  };\n\n  const handleSubmit: WebhookFormProps['handleSubmit'] = async (data, helpers) => {\n    try {\n      if (isCreating) {\n        const res = await createWebhook(cleanData(data));\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.webhooks.created' }),\n        });\n\n        navigate(`../webhooks/${res.data.id}`, { replace: true });\n      } else {\n        const res = await updateWebhook({ id: id!, ...cleanData(data) });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const [webhook] = webhooks ?? [];\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Webhooks',\n          }\n        )}\n      </Page.Title>\n      <WebhookForm\n        data={webhook}\n        handleSubmit={handleSubmit}\n        triggerWebhook={handleTriggerWebhook}\n        isCreating={isCreating}\n        isTriggering={isTriggering}\n        triggerResponse={triggerResponse}\n      />\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  return (\n    <Page.Protect permissions={permissions.settings?.webhooks.update}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditPage, EditPage };\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, TextInput } from '@strapi/design-system';\nimport { Check, Play as Publish } from '@strapi/icons';\nimport { IntlShape, useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { TriggerWebhook } from '../../../../../../../shared/contracts/webhooks';\nimport { Form, FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { Layouts } from '../../../../../components/Layouts/Layout';\nimport { BackButton } from '../../../../../features/BackButton';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\n\nimport { EventTableCE } from './EventsTable';\nimport { HeadersInput } from './HeadersInput';\nimport { TriggerContainer } from './TriggerContainer';\n\nimport type { Modules } from '@strapi/types';\n\ninterface WebhookFormValues {\n  name: Modules.WebhookStore.Webhook['name'];\n  url: Modules.WebhookStore.Webhook['url'];\n  headers: Array<{ key: string; value: string }>;\n  events: Modules.WebhookStore.Webhook['events'];\n}\n\ninterface WebhookFormProps {\n  data?: Modules.WebhookStore.Webhook;\n  handleSubmit: (\n    values: WebhookFormValues,\n    helpers: FormHelpers<WebhookFormValues>\n  ) => Promise<void>;\n  isCreating: boolean;\n  isTriggering: boolean;\n  triggerWebhook: () => void;\n  triggerResponse?: TriggerWebhook.Response['data'];\n}\n\nconst WebhookForm = ({\n  handleSubmit,\n  triggerWebhook,\n  isCreating,\n  isTriggering,\n  triggerResponse,\n  data,\n}: WebhookFormProps) => {\n  const { formatMessage } = useIntl();\n  const [showTriggerResponse, setShowTriggerResponse] = React.useState(false);\n  const EventTable = useEnterprise(\n    EventTableCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/components/EventsTable'\n        )\n      ).EventsTableEE\n  );\n\n  /**\n   * Map the headers into a form that can be used within the formik form\n   */\n  const mapHeaders = (headers: Modules.WebhookStore.Webhook['headers']) => {\n    if (!Object.keys(headers).length) {\n      return [{ key: '', value: '' }];\n    }\n\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!EventTable) {\n    return null;\n  }\n\n  return (\n    <Form\n      initialValues={{\n        name: data?.name || '',\n        url: data?.url || '',\n        headers: mapHeaders(data?.headers || {}),\n        events: data?.events || [],\n      }}\n      method={isCreating ? 'POST' : 'PUT'}\n      onSubmit={handleSubmit}\n      validationSchema={makeWebhookValidationSchema({ formatMessage })}\n    >\n      {({ isSubmitting, modified }) => (\n        <>\n          <Layouts.Header\n            primaryAction={\n              <Flex gap={2}>\n                <Button\n                  onClick={() => {\n                    triggerWebhook();\n                    setShowTriggerResponse(true);\n                  }}\n                  variant=\"tertiary\"\n                  startIcon={<Publish />}\n                  disabled={isCreating || isTriggering}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.trigger',\n                    defaultMessage: 'Trigger',\n                  })}\n                </Button>\n                <Button\n                  startIcon={<Check />}\n                  type=\"submit\"\n                  disabled={!modified}\n                  loading={isSubmitting}\n                >\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              </Flex>\n            }\n            title={\n              isCreating\n                ? formatMessage({\n                    id: 'Settings.webhooks.create',\n                    defaultMessage: 'Create a webhook',\n                  })\n                : data?.name\n            }\n            navigationAction={<BackButton fallback=\"../webhooks\" />}\n          />\n          <Layouts.Content>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n              {showTriggerResponse && (\n                <TriggerContainer\n                  isPending={isTriggering}\n                  response={triggerResponse}\n                  onCancel={() => setShowTriggerResponse(false)}\n                />\n              )}\n              <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Grid.Root gap={6}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: 'global.name',\n                          defaultMessage: 'Name',\n                        }),\n                        name: 'name',\n                        required: true,\n                        size: 6,\n                        type: 'string' as const,\n                      },\n                      {\n                        label: formatMessage({\n                          id: 'Settings.roles.form.input.url',\n                          defaultMessage: 'Url',\n                        }),\n                        name: 'url',\n                        required: true,\n                        size: 12,\n                        type: 'string' as const,\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                  <HeadersInput />\n                  <EventTable />\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Content>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\n\nconst makeWebhookValidationSchema = ({ formatMessage }: Pick<IntlShape, 'formatMessage'>) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.required',\n          defaultMessage: 'Name is required',\n        })\n      )\n      .matches(\n        NAME_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.regex',\n          defaultMessage:\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\n        })\n      ),\n    url: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.required',\n          defaultMessage: 'Url is required',\n        })\n      )\n      .matches(\n        URL_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.regex',\n          defaultMessage: 'The value must be a valid Url',\n        })\n      ),\n    headers: yup.lazy((array) => {\n      const baseSchema = yup.array();\n\n      if (array.length === 1) {\n        const { key, value } = array[0];\n\n        if (!key && !value) {\n          return baseSchema;\n        }\n      }\n\n      return baseSchema.of(\n        yup.object().shape({\n          key: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.key',\n                defaultMessage: 'Key is required',\n              })\n            )\n            .nullable(),\n          value: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.value',\n                defaultMessage: 'Value is required',\n              })\n            )\n            .nullable(),\n        })\n      );\n    }),\n    events: yup.array(),\n  });\n\nexport { WebhookForm };\nexport type { WebhookFormValues, WebhookFormProps };\n", "import { Events } from './Events';\n\nconst EventTableCE = () => {\n  return (\n    <Events.Root>\n      <Events.Headers />\n      <Events.Body />\n    </Events.Root>\n  );\n};\n\nexport { EventTableCE };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  TextButton,\n  ComboboxOption,\n  Combobox,\n  ComboboxProps,\n  IconButton,\n  Field as DSField,\n} from '@strapi/design-system';\nimport { Minus, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField, useForm } from '../../../../../components/Form';\nimport { StringInput } from '../../../../../components/FormInputs/String';\n\nconst AddHeaderButton = styled(TextButton)`\n  cursor: pointer;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * HeadersInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Header {\n  key: HTTPHeaders;\n  value: string;\n}\n\nconst HeadersInput = () => {\n  const { formatMessage } = useIntl();\n\n  const addFieldRow = useForm('HeadersInput', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('HeadersInput', (state) => state.removeFieldRow);\n  const setFieldValue = useForm('HeadersInput', (state) => state.onChange);\n  const { value = [] } = useField<Header[]>('headers');\n\n  const removeRow = (index: number) => {\n    // if we are removing the last row, simply clear it\n    if (value.length === 1) {\n      setFieldValue('headers', [{ key: '', value: '' }]);\n    } else {\n      removeFieldRow('headers', index);\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <DSField.Label>\n        {formatMessage({\n          id: 'Settings.webhooks.form.headers',\n          defaultMessage: 'Headers',\n        })}\n      </DSField.Label>\n      <Box padding={8} background=\"neutral100\" hasRadius>\n        {value.map((val, index) => {\n          return (\n            <Grid.Root key={`${index}-${JSON.stringify(val.key)}`} gap={4} padding={2}>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <HeaderCombobox\n                  name={`headers.${index}.key`}\n                  aria-label={`row ${index + 1} key`}\n                  label={formatMessage({\n                    id: 'Settings.webhooks.key',\n                    defaultMessage: 'Key',\n                  })}\n                />\n              </Grid.Item>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <Flex alignItems=\"flex-end\" gap={2}>\n                  <Box style={{ flex: 1 }}>\n                    <StringInput\n                      name={`headers.${index}.value`}\n                      aria-label={`row ${index + 1} value`}\n                      label={formatMessage({\n                        id: 'Settings.webhooks.value',\n                        defaultMessage: 'Value',\n                      })}\n                      type=\"string\"\n                    />\n                  </Box>\n                  <IconButton\n                    width=\"4rem\"\n                    height=\"4rem\"\n                    onClick={() => removeRow(index)}\n                    color=\"primary600\"\n                    label={formatMessage(\n                      {\n                        id: 'Settings.webhooks.headers.remove',\n                        defaultMessage: 'Remove header row {number}',\n                      },\n                      { number: index + 1 }\n                    )}\n                    type=\"button\"\n                  >\n                    <Minus width=\"0.8rem\" />\n                  </IconButton>\n                </Flex>\n              </Grid.Item>\n            </Grid.Root>\n          );\n        })}\n        <Box paddingTop={4}>\n          <AddHeaderButton\n            type=\"button\"\n            onClick={() => {\n              addFieldRow('headers', { key: '', value: '' });\n            }}\n            startIcon={<Plus />}\n          >\n            {formatMessage({\n              id: 'Settings.webhooks.create.header',\n              defaultMessage: 'Create new header',\n            })}\n          </AddHeaderButton>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCombobox\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderComboboxProps extends Omit<ComboboxProps, 'children' | 'name'> {\n  name: string;\n  label: string;\n}\n\nconst HeaderCombobox = ({ name, label, ...restProps }: HeaderComboboxProps) => {\n  const [options, setOptions] = React.useState<HTTPHeaders[]>([...HTTP_HEADERS]);\n  const { value: headers } = useField<Header[]>('headers');\n  const field = useField(name);\n\n  React.useEffect(() => {\n    const headerOptions = HTTP_HEADERS.filter(\n      (key) => !headers?.some((header) => header.key !== field.value && header.key === key)\n    );\n\n    setOptions(headerOptions);\n  }, [headers, field.value]);\n\n  const handleChange: ComboboxProps['onChange'] = (value) => {\n    field.onChange(name, value);\n  };\n\n  const handleCreateOption = (value?: string) => {\n    setOptions((prev) => [...prev, value as HTTPHeaders]);\n\n    if (value) {\n      handleChange(value);\n    }\n  };\n\n  return (\n    <DSField.Root name={name} error={field.error}>\n      <DSField.Label>{label}</DSField.Label>\n      <Combobox\n        {...restProps}\n        onClear={() => handleChange('')}\n        onChange={handleChange}\n        onCreateOption={handleCreateOption}\n        placeholder=\"\"\n        creatable\n        value={field.value}\n      >\n        {options.map((key) => (\n          <ComboboxOption value={key} key={key}>\n            {key}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <DSField.Error />\n    </DSField.Root>\n  );\n};\n\nconst HTTP_HEADERS = [\n  'A-IM',\n  'Accept',\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Datetime',\n  'Access-Control-Request-Method',\n  'Access-Control-Request-Headers',\n  'Authorization',\n  'Cache-Control',\n  'Connection',\n  'Content-Length',\n  'Content-Type',\n  'Cookie',\n  'Date',\n  'Expect',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Max-Forwards',\n  'Origin',\n  'Pragma',\n  'Proxy-Authorization',\n  'Range',\n  'Referer',\n  'TE',\n  'User-Agent',\n  'Upgrade',\n  'Via',\n  'Warning',\n] as const;\n\ntype HTTPHeaders = (typeof HTTP_HEADERS)[number];\n\nexport { HeadersInput };\n", "import { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Check, Cross, Loader } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * TriggerContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TriggerContainerProps extends Pick<StatusProps, 'isPending'> {\n  onCancel: () => void;\n  response?: {\n    statusCode: number;\n    message?: string;\n  };\n}\n\nconst TriggerContainer = ({ isPending, onCancel, response }: TriggerContainerProps) => {\n  const { statusCode, message } = response ?? {};\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\n      <Grid.Root gap={4} style={{ alignItems: 'center' }}>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Typography>\n            {formatMessage({\n              id: 'Settings.webhooks.trigger.test',\n              defaultMessage: 'Test-trigger',\n            })}\n          </Typography>\n        </Grid.Item>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Status isPending={isPending} statusCode={statusCode} />\n        </Grid.Item>\n        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n          {!isPending ? (\n            <Message statusCode={statusCode} message={message} />\n          ) : (\n            <Flex justifyContent=\"flex-end\">\n              <button onClick={onCancel} type=\"button\">\n                <Flex gap={2} alignItems=\"center\">\n                  <Typography textColor=\"neutral400\">\n                    {formatMessage({\n                      id: 'Settings.webhooks.trigger.cancel',\n                      defaultMessage: 'cancel',\n                    })}\n                  </Typography>\n                  <Cross fill=\"neutral400\" height=\"1.2rem\" width=\"1.2rem\" />\n                </Flex>\n              </button>\n            </Flex>\n          )}\n        </Grid.Item>\n      </Grid.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\ninterface StatusProps {\n  isPending: boolean;\n  statusCode?: number;\n}\n\nconst Status = ({ isPending, statusCode }: StatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isPending || !statusCode) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Loader height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Check fill=\"success700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Cross fill=\"danger700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Message\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MessageProps {\n  statusCode?: number;\n  message?: string;\n}\n\nconst Message = ({ statusCode, message }: MessageProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!statusCode) {\n    return null;\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Typography textColor=\"neutral600\" ellipsis>\n          {formatMessage({\n            id: 'Settings.webhooks.trigger.success.label',\n            defaultMessage: 'Trigger succeeded',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Flex maxWidth={`25rem`} justifyContent=\"flex-end\" title={message}>\n          <Typography ellipsis textColor=\"neutral600\">\n            {message}\n          </Typography>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\nexport { TriggerContainer };\n"],
  "mappings": "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",
  "names": ["React", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "create", "import_jsx_runtime"]
}
