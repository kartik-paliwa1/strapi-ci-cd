{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/Pagination.tsx"],
  "sourcesContent": ["/* eslint-disable import/export */\nimport * as React from 'react';\n\nimport {\n  Flex,\n  SingleSelectOption,\n  SingleSelect,\n  Typography,\n  Dots,\n  NextLink,\n  PageLink,\n  Pagination as PaginationImpl,\n  PreviousLink,\n} from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { useQueryParams } from '../hooks/useQueryParams';\n\nimport { createContext } from './Context';\n\nimport type { Pagination as PaginationApi } from '../../../shared/contracts/shared';\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\ninterface PaginationContextValue {\n  /**\n   * @description the complete query object, this could include query params\n   * injected by other plugins, if you're navigating to a different page you\n   * should ensure these are still passed.\n   */\n  currentQuery?: object;\n  pageCount: string;\n  pageSize: string;\n  page: string;\n  setPageSize: (pageSize: string) => void;\n  total: NonNullable<RootProps['total']>;\n}\n\nconst [PaginationProvider, usePagination] = createContext<PaginationContextValue>('Pagination');\n\ninterface RootProps {\n  children: React.ReactNode;\n  /**\n   * @default 0\n   * @description the total number of pages\n   * that exist in the dataset.\n   */\n  pageCount?: PaginationApi['pageCount'];\n  /**\n   * @default 1\n   * @description the initial page number.\n   */\n  defaultPage?: PaginationApi['page'];\n  /**\n   * @default 10\n   * @description the initial number of items to display\n   */\n  defaultPageSize?: PaginationApi['pageSize'];\n  /**\n   * @description a callback that is called when the page size changes.\n   */\n  onPageSizeChange?: (pageSize: string) => void;\n  /**\n   * @default 0\n   * @description the total number of items in the dataset.\n   */\n  total?: PaginationApi['total'];\n}\n\n/**\n * @description The root component for the composable pagination component.\n * It's advised to spread the entire pagination option object into this component.\n *\n * @example\n * ```tsx\n * const MyComponent = () => {\n *  return (\n *    <Pagination.Root {...response.pagination}>\n *      <Pagination.PageSize />\n *      <Pagination.Links />\n *    </Pagination.Root>\n *  );\n * };\n * ```\n */\nconst Root = React.forwardRef<HTMLDivElement, RootProps>(\n  (\n    { children, defaultPageSize = 10, pageCount = 0, defaultPage = 1, onPageSizeChange, total = 0 },\n    forwardedRef\n  ) => {\n    const [{ query }, setQuery] = useQueryParams<Pick<PaginationContextValue, 'page' | 'pageSize'>>(\n      {\n        pageSize: defaultPageSize.toString(),\n        page: defaultPage.toString(),\n      }\n    );\n\n    const setPageSize = (pageSize: string) => {\n      setQuery({ pageSize, page: '1' });\n\n      if (onPageSizeChange) {\n        onPageSizeChange(pageSize);\n      }\n    };\n\n    return (\n      <Flex\n        ref={forwardedRef}\n        paddingTop={4}\n        paddingBottom={4}\n        alignItems=\"flex-end\"\n        justifyContent=\"space-between\"\n      >\n        <PaginationProvider\n          currentQuery={query}\n          page={query.page}\n          pageSize={query.pageSize}\n          pageCount={pageCount.toString()}\n          setPageSize={setPageSize}\n          total={total}\n        >\n          {children}\n        </PaginationProvider>\n      </Flex>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PageSize\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @description The page size component is responsible for rendering the select input that allows\n * the user to change the number of items displayed per page.\n * If the total number of items is less than the minimum option, this component will not render.\n */\nconst PageSize = ({ options = ['10', '20', '50', '100'] }: Pagination.PageSizeProps) => {\n  const { formatMessage } = useIntl();\n\n  const pageSize = usePagination('PageSize', (state) => state.pageSize);\n  const totalCount = usePagination('PageSize', (state) => state.total);\n  const setPageSize = usePagination('PageSize', (state) => state.setPageSize);\n\n  const handleChange = (value: string) => {\n    setPageSize(value);\n  };\n\n  const minimumOption = parseInt(options[0], 10);\n\n  if (minimumOption >= totalCount) {\n    return null;\n  }\n\n  return (\n    <Flex gap={2}>\n      <SingleSelect\n        size=\"S\"\n        aria-label={formatMessage({\n          id: 'components.PageFooter.select',\n          defaultMessage: 'Entries per page',\n        })}\n        // @ts-expect-error from the DS V2 this won't be needed because we're only returning strings.\n        onChange={handleChange}\n        value={pageSize}\n      >\n        {options.map((option) => (\n          <SingleSelectOption key={option} value={option}>\n            {option}\n          </SingleSelectOption>\n        ))}\n      </SingleSelect>\n      <Typography textColor=\"neutral600\" tag=\"span\">\n        {formatMessage({\n          id: 'components.PageFooter.select',\n          defaultMessage: 'Entries per page',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Links\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * The component works as follows\n * `1` , 2, 3, ... 10\n * 1, `2`, 3, ... 10\n * 1, 2, `3`, 4, ... 10\n * 1, 2, 3, `4`, 5, ... 10\n * 1, ..,4, `5`, 6, ... 10\n *\n * 1, ...., 8, 9, `10`\n * 1, ...., 8, `9`, 10\n * 1, ...., 7, `8`, 9, 10\n * 1, ... 6, `7`, 8, 9, 10\n */\n\n/**\n * @description The links component is responsible for rendering the pagination links.\n * If the total number of pages is less than or equal to 1, this component will not render.\n */\nconst Links = ({ boundaryCount = 1, siblingCount = 1 }: Pagination.LinksProps) => {\n  const { formatMessage } = useIntl();\n\n  const query = usePagination('Links', (state) => state.currentQuery);\n  const currentPage = usePagination('Links', (state) => state.page);\n  const totalPages = usePagination('Links', (state) => state.pageCount);\n\n  const pageCount = parseInt(totalPages, 10);\n  const activePage = parseInt(currentPage, 10);\n\n  const range = (start: number, end: number) => {\n    const length = end - start + 1;\n\n    return Array.from({ length }, (_, i) => start + i);\n  };\n\n  const startPages = range(1, Math.min(boundaryCount, pageCount));\n  const endPages = range(Math.max(pageCount - boundaryCount + 1, boundaryCount + 1), pageCount);\n\n  const siblingsStart = Math.max(\n    Math.min(\n      // Natural start\n      activePage - siblingCount,\n      // Lower boundary when page is high\n      pageCount - boundaryCount - siblingCount * 2 - 1\n    ),\n    // Greater than startPages\n    boundaryCount + 2\n  );\n\n  const siblingsEnd = Math.min(\n    Math.max(\n      // Natural end\n      activePage + siblingCount,\n      // Upper boundary when page is low\n      boundaryCount + siblingCount * 2 + 2\n    ),\n    // Less than endPages\n    endPages.length > 0 ? endPages[0] - 2 : pageCount - 1\n  );\n\n  const items = [\n    ...startPages,\n\n    // Start ellipsis\n    // eslint-disable-next-line no-nested-ternary\n    ...(siblingsStart > boundaryCount + 2\n      ? ['start-ellipsis']\n      : boundaryCount + 1 < pageCount - boundaryCount\n        ? [boundaryCount + 1]\n        : []),\n\n    // Sibling pages\n    ...range(siblingsStart, siblingsEnd),\n\n    // End ellipsis\n    // eslint-disable-next-line no-nested-ternary\n    ...(siblingsEnd < pageCount - boundaryCount - 1\n      ? ['end-ellipsis']\n      : pageCount - boundaryCount > boundaryCount\n        ? [pageCount - boundaryCount]\n        : []),\n\n    ...endPages,\n  ];\n\n  if (pageCount <= 1) {\n    return null;\n  }\n\n  return (\n    <PaginationImpl activePage={activePage} pageCount={pageCount}>\n      <PreviousLink tag={Link} to={{ search: stringify({ ...query, page: activePage - 1 }) }}>\n        {formatMessage({\n          id: 'components.pagination.go-to-previous',\n          defaultMessage: 'Go to previous page',\n        })}\n      </PreviousLink>\n      {items.map((item) => {\n        if (typeof item === 'number') {\n          return (\n            <PageLink\n              tag={Link}\n              key={item}\n              number={item}\n              to={{ search: stringify({ ...query, page: item }) }}\n            >\n              {formatMessage(\n                { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n                { page: item }\n              )}\n            </PageLink>\n          );\n        }\n\n        return <Dots key={item} />;\n      })}\n\n      <NextLink tag={Link} to={{ search: stringify({ ...query, page: activePage + 1 }) }}>\n        {formatMessage({\n          id: 'components.pagination.go-to-next',\n          defaultMessage: 'Go to next page',\n        })}\n      </NextLink>\n    </PaginationImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EXPORTS\n * -----------------------------------------------------------------------------------------------*/\n\nconst Pagination = {\n  Root,\n  Links,\n  PageSize,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Pagination {\n  export interface Props extends RootProps {}\n\n  export interface PageSizeProps {\n    options?: string[];\n  }\n\n  export interface LinksProps {\n    /**\n     * @default 1\n     * @description Number of always visible pages at the beginning and end.\n     */\n    boundaryCount?: number;\n    /**\n     * @default 1\n     * @description Number of always visible pages before and after the current page.\n     */\n    siblingCount?: number;\n  }\n}\n\nexport { Pagination };\n"],
  "mappings": "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",
  "names": ["Pagination"]
}
