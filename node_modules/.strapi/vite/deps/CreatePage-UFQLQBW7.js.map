{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/CreatePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Main,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { format } from 'date-fns';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport {\n  useCreateRoleMutation,\n  useGetRolePermissionLayoutQuery,\n  useGetRolePermissionsQuery,\n  useUpdateRolePermissionsMutation,\n} from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\n\n/* -------------------------------------------------------------------------------------------------\n * CreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst CREATE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().required(translatedErrors.required.id),\n});\n\n/**\n * TODO: be nice if we could just infer this from the schema\n */\ninterface CreateRoleFormValues {\n  name: string;\n  description: string;\n}\n\n/**\n * TODO: this whole section of the app needs refactoring. Using a ref to\n * manage the state of the child is nonsensical.\n */\nconst CreatePage = () => {\n  const { id } = useParams();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, currentData: permissionsLayout } =\n    useGetRolePermissionLayoutQuery({\n      /**\n       * Role here is a query param so if there's no role we pass an empty string\n       * which returns us a default layout.\n       */\n      role: id ?? '',\n    });\n\n  /**\n   * We need this so if we're cloning a role, we can fetch\n   * the current permissions that role has.\n   */\n  const { currentData: rolePermissions, isLoading: isLoadingRole } = useGetRolePermissionsQuery(\n    {\n      id: id!,\n    },\n    {\n      skip: !id,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [createRole] = useCreateRoleMutation();\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\n\n  const handleCreateRoleSubmit = async (\n    data: CreateRoleFormValues,\n    formik: FormikHelpers<CreateRoleFormValues>\n  ) => {\n    try {\n      if (id) {\n        trackUsage('willDuplicateRole');\n      } else {\n        trackUsage('willCreateNewRole');\n      }\n\n      const res = await createRole(data);\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          formik.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      const { permissionsToSend } = permissionsRef.current?.getPermissions() ?? {};\n\n      if (res.data.id && Array.isArray(permissionsToSend) && permissionsToSend.length > 0) {\n        const updateRes = await updateRolePermissions({\n          id: res.data.id,\n          permissions: permissionsToSend,\n        });\n\n        if ('error' in updateRes) {\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(updateRes.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(updateRes.error),\n            });\n          }\n\n          return;\n        }\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'Settings.roles.created', defaultMessage: 'created' }),\n      });\n\n      navigate(`../roles/${res.data.id.toString()}`, { replace: true });\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if ((isLoadingPermissionsLayout && isLoadingRole) || !permissionsLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        initialValues={\n          {\n            name: '',\n            description: `${formatMessage({\n              id: 'Settings.roles.form.created',\n              defaultMessage: 'Created',\n            })} ${format(new Date(), 'PPP')}`,\n          } satisfies CreateRoleFormValues\n        }\n        onSubmit={handleCreateRoleSubmit}\n        validationSchema={CREATE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ values, errors, handleReset, handleChange, isSubmitting }) => (\n          <Form>\n            <>\n              <Layouts.Header\n                primaryAction={\n                  <Flex gap={2}>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        handleReset();\n                        permissionsRef.current?.resetForm();\n                      }}\n                    >\n                      {formatMessage({\n                        id: 'app.components.Button.reset',\n                        defaultMessage: 'Reset',\n                      })}\n                    </Button>\n                    <Button type=\"submit\" loading={isSubmitting} startIcon={<Check />}>\n                      {formatMessage({\n                        id: 'global.save',\n                        defaultMessage: 'Save',\n                      })}\n                    </Button>\n                  </Flex>\n                }\n                title={formatMessage({\n                  id: 'Settings.roles.create.title',\n                  defaultMessage: 'Create a role',\n                })}\n                subtitle={formatMessage({\n                  id: 'Settings.roles.create.description',\n                  defaultMessage: 'Define the rights given to the role',\n                })}\n                navigationAction={<BackButton fallback=\"../roles\" />}\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Flex justifyContent=\"space-between\">\n                        <Box>\n                          <Box>\n                            <Typography fontWeight=\"bold\">\n                              {formatMessage({\n                                id: 'global.details',\n                                defaultMessage: 'Details',\n                              })}\n                            </Typography>\n                          </Box>\n                          <Box>\n                            <Typography variant=\"pi\" textColor=\"neutral600\">\n                              {formatMessage({\n                                id: 'Settings.roles.form.description',\n                                defaultMessage: 'Name and description of the role',\n                              })}\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <UsersRoleNumber>\n                          {formatMessage(\n                            {\n                              id: 'Settings.roles.form.button.users-with-role',\n                              defaultMessage:\n                                '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n                            },\n                            { number: 0 }\n                          )}\n                        </UsersRoleNumber>\n                      </Flex>\n                      <Grid.Root gap={4}>\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                          <Field.Root\n                            name=\"name\"\n                            error={errors.name && formatMessage({ id: errors.name })}\n                            required\n                          >\n                            <Field.Label>\n                              {formatMessage({\n                                id: 'global.name',\n                                defaultMessage: 'Name',\n                              })}\n                            </Field.Label>\n                            <TextInput onChange={handleChange} value={values.name} />\n                            <Field.Error />\n                          </Field.Root>\n                        </Grid.Item>\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                          <Field.Root\n                            name=\"description\"\n                            error={errors.description && formatMessage({ id: errors.description })}\n                          >\n                            <Field.Label>\n                              {formatMessage({\n                                id: 'global.description',\n                                defaultMessage: 'Description',\n                              })}\n                            </Field.Label>\n                            <Textarea onChange={handleChange} value={values.description} />\n                          </Field.Root>\n                        </Grid.Item>\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                  <Box shadow=\"filterShadow\" hasRadius>\n                    <Permissions\n                      isFormDisabled={false}\n                      ref={permissionsRef}\n                      permissions={rolePermissions}\n                      layout={permissionsLayout}\n                    />\n                  </Box>\n                </Flex>\n              </Layouts.Content>\n            </>\n          </Form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst UsersRoleNumber = styled.div`\n  border: 1px solid ${({ theme }) => theme.colors.primary200};\n  background: ${({ theme }) => theme.colors.primary100};\n  padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[4]}`};\n  color: ${({ theme }) => theme.colors.primary600};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  font-size: 1.2rem;\n  font-weight: bold;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedCreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedCreatePage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.roles.create\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <CreatePage />\n    </Page.Protect>\n  );\n};\n\nexport { CreatePage, ProtectedCreatePage };\n"],
  "mappings": "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",
  "names": ["create"]
}
