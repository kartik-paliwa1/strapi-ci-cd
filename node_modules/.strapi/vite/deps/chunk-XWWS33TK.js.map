{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/Table.tsx", "../../../../../packages/core/admin/admin/src/hooks/useControllableState.ts"],
  "sourcesContent": ["/**\n * TODO: honestly, half of this stuff should come straight from\n * the design-system and then we can just wrap round the bits for\n * the i18n & router interactions.\n *\n * So we'll do that in v2 of the DS.\n */\n\nimport * as React from 'react';\n\nimport {\n  Flex,\n  Typography,\n  Th,\n  Tbody,\n  Td,\n  Tooltip,\n  IconButton,\n  Thead,\n  Tr,\n  RawTrProps,\n  Checkbox,\n  Loader,\n  Table as DSTable,\n  EmptyStateLayout,\n  EmptyStateLayoutProps,\n  TableProps,\n  RawTdProps,\n} from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useControllableState } from '../hooks/useControllableState';\nimport { useQueryParams } from '../hooks/useQueryParams';\n\nimport { createContext } from './Context';\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseRow {\n  id: string | number;\n  [key: string]: any;\n}\n\ninterface TableHeader<TData = object, THeader = object> {\n  /**\n   * Typically used by plugins to render a custom cell\n   */\n  cellFormatter?: (data: TData, header: Omit<THeader, 'cellFormatter'>) => React.ReactNode;\n  label: string;\n  name: string;\n  searchable?: boolean;\n  sortable?: boolean;\n}\n\ninterface TableContextValue<TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>\n  extends Pick<TableProps, 'footer'> {\n  colCount: number;\n  hasHeaderCheckbox: boolean;\n  headers: THeader[];\n  isLoading: boolean;\n  rowCount: number;\n  rows: TRow[];\n  setHasHeaderCheckbox: (value: boolean) => void;\n  selectedRows: TRow[];\n  selectRow: (row: TRow | TRow[]) => void;\n}\n\nconst [TableProvider, useTable] = createContext<TableContextValue<any, any>>('Table');\n\ninterface RootProps<TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>\n  extends Partial<\n    Pick<\n      TableContextValue<TRow, THeader>,\n      'footer' | 'headers' | 'isLoading' | 'rows' | 'selectedRows'\n    >\n  > {\n  children?: React.ReactNode;\n  defaultSelectedRows?: TRow[];\n  onSelectedRowsChange?: (selectedRows: TRow[]) => void;\n}\n\nconst Root = <TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>({\n  children,\n  defaultSelectedRows,\n  footer,\n  headers = [],\n  isLoading = false,\n  onSelectedRowsChange,\n  rows = [],\n  selectedRows: selectedRowsProps,\n}: RootProps<TRow, THeader>) => {\n  const [selectedRows = [], setSelectedRows] = useControllableState({\n    prop: selectedRowsProps,\n    defaultProp: defaultSelectedRows,\n    onChange: onSelectedRowsChange,\n  });\n  const [hasHeaderCheckbox, setHasHeaderCheckbox] = React.useState(false);\n\n  const rowCount = rows.length + 1;\n  const colCount = hasHeaderCheckbox ? headers.length + 1 : headers.length;\n\n  const selectRow: TableContextValue<TRow, THeader>['selectRow'] = (row) => {\n    if (Array.isArray(row)) {\n      setSelectedRows(row);\n    } else {\n      setSelectedRows((prev = []) => {\n        const currentRowIndex = prev.findIndex((r) => r.id === row.id);\n        if (currentRowIndex > -1) {\n          return prev.toSpliced(currentRowIndex, 1);\n        }\n\n        return [...prev, row];\n      });\n    }\n  };\n\n  return (\n    <TableProvider\n      colCount={colCount}\n      hasHeaderCheckbox={hasHeaderCheckbox}\n      setHasHeaderCheckbox={setHasHeaderCheckbox}\n      footer={footer}\n      headers={headers}\n      isLoading={isLoading}\n      rowCount={rowCount}\n      rows={rows}\n      selectedRows={selectedRows}\n      selectRow={selectRow}\n    >\n      {children}\n    </TableProvider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Content\n * -----------------------------------------------------------------------------------------------*/\n\nconst Content = ({ children }: Table.ContentProps) => {\n  const rowCount = useTable('Content', (state) => state.rowCount);\n  const colCount = useTable('Content', (state) => state.colCount);\n  const footer = useTable('Content', (state) => state.footer);\n\n  return (\n    <DSTable rowCount={rowCount} colCount={colCount} footer={footer}>\n      {children}\n    </DSTable>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Head\n * -----------------------------------------------------------------------------------------------*/\n\nconst Head = ({ children }: Table.HeadProps) => {\n  return (\n    <Thead>\n      <Tr>{children}</Tr>\n    </Thead>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCell\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @description A header cell in your table, internally will set the query params for sorting to\n * be passed to your data-fetching function.\n */\nconst HeaderCell = <TData, THead>({ name, label, sortable }: TableHeader<TData, THead>) => {\n  const [{ query }, setQuery] = useQueryParams<{ sort?: `${string}:${'ASC' | 'DESC'}` }>();\n  const sort = query?.sort ?? '';\n  const [sortBy, sortOrder] = sort.split(':');\n  const { formatMessage } = useIntl();\n  const isSorted = sortBy === name;\n\n  const sortLabel = formatMessage(\n    { id: 'components.TableHeader.sort', defaultMessage: 'Sort on {label}' },\n    { label }\n  );\n\n  const handleClickSort = () => {\n    if (sortable) {\n      setQuery({\n        sort: `${name}:${isSorted && sortOrder === 'ASC' ? 'DESC' : 'ASC'}`,\n      });\n    }\n  };\n\n  return (\n    <Th\n      action={\n        isSorted &&\n        sortable && (\n          <IconButton label={sortLabel} onClick={handleClickSort} variant=\"ghost\">\n            <SortIcon $isUp={sortOrder === 'ASC'} />\n          </IconButton>\n        )\n      }\n    >\n      <Tooltip label={sortable ? sortLabel : label}>\n        <Typography\n          textColor=\"neutral600\"\n          tag={!isSorted && sortable ? 'button' : 'span'}\n          onClick={handleClickSort}\n          variant=\"sigma\"\n        >\n          {label}\n        </Typography>\n      </Tooltip>\n    </Th>\n  );\n};\n\nconst SortIcon = styled(CaretDown)<{\n  $isUp: boolean;\n}>`\n  transform: ${({ $isUp }) => `rotate(${$isUp ? '180' : '0'}deg)`};\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ActionBar\n * -----------------------------------------------------------------------------------------------*/\n\nconst ActionBar = ({ children }: Table.ActionBarProps) => {\n  const { formatMessage } = useIntl();\n  const selectedRows = useTable('ActionBar', (state) => state.selectedRows);\n\n  if (selectedRows.length === 0) return null;\n\n  return (\n    <Flex gap={2}>\n      <Typography variant=\"omega\" textColor=\"neutral500\">\n        {formatMessage(\n          {\n            id: 'content-manager.components.TableDelete.label',\n            defaultMessage: '{number, plural, one {# row} other {# rows}} selected',\n          },\n          { number: selectedRows.length }\n        )}\n      </Typography>\n      {children}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCheckboxCell\n * -----------------------------------------------------------------------------------------------*/\n\nconst HeaderCheckboxCell = () => {\n  const rows = useTable('HeaderCheckboxCell', (state) => state.rows);\n  const selectedRows = useTable('HeaderCheckboxCell', (state) => state.selectedRows);\n  const selectRow = useTable('HeaderCheckboxCell', (state) => state.selectRow);\n  const setHasHeaderCheckbox = useTable(\n    'HeaderCheckboxCell',\n    (state) => state.setHasHeaderCheckbox\n  );\n\n  const { formatMessage } = useIntl();\n\n  const areAllEntriesSelected = selectedRows.length === rows.length && rows.length > 0;\n  const isIndeterminate = !areAllEntriesSelected && selectedRows.length > 0;\n\n  React.useEffect(() => {\n    setHasHeaderCheckbox(true);\n\n    return () => setHasHeaderCheckbox(false);\n  }, [setHasHeaderCheckbox]);\n\n  const handleSelectAll = () => {\n    if (!areAllEntriesSelected) {\n      selectRow(rows);\n    } else {\n      selectRow([]);\n    }\n  };\n\n  return (\n    <Th>\n      <Checkbox\n        aria-label={formatMessage({\n          id: 'global.select-all-entries',\n          defaultMessage: 'Select all entries',\n        })}\n        disabled={rows.length === 0}\n        checked={isIndeterminate ? 'indeterminate' : areAllEntriesSelected}\n        onCheckedChange={handleSelectAll}\n      />\n    </Th>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Empty\n * -----------------------------------------------------------------------------------------------*/\n\nconst Empty = (props: Table.EmptyProps) => {\n  const { formatMessage } = useIntl();\n\n  const rows = useTable('Empty', (state) => state.rows);\n  const isLoading = useTable('Empty', (state) => state.isLoading);\n  const colCount = useTable('Empty', (state) => state.colCount);\n\n  /**\n   * If we're loading or we have some data, we don't show the empty state.\n   */\n  if (rows.length > 0 || isLoading) {\n    return null;\n  }\n\n  return (\n    <Tbody>\n      <Tr>\n        <Td colSpan={colCount}>\n          <EmptyStateLayout\n            content={formatMessage({\n              id: 'app.components.EmptyStateLayout.content-document',\n              defaultMessage: 'No content found',\n            })}\n            hasRadius\n            icon={<EmptyDocuments width=\"16rem\" />}\n            {...props}\n          />\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingBody\n * -----------------------------------------------------------------------------------------------*/\n\nconst Loading = ({ children = 'Loading content' }: Table.LoadingProps) => {\n  const isLoading = useTable('Loading', (state) => state.isLoading);\n  const colCount = useTable('Loading', (state) => state.colCount);\n\n  if (!isLoading) {\n    return null;\n  }\n\n  return (\n    <Tbody>\n      <Tr>\n        <Td colSpan={colCount}>\n          <Flex justifyContent=\"center\" padding={11} background=\"neutral0\">\n            <Loader>{children}</Loader>\n          </Flex>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Body\n * -----------------------------------------------------------------------------------------------*/\n\nconst Body = ({ children }: Table.BodyProps) => {\n  const isLoading = useTable('Body', (state) => state.isLoading);\n  const rows = useTable('Body', (state) => state.rows);\n\n  if (isLoading || rows.length === 0) {\n    return null;\n  }\n\n  return <Tbody>{children}</Tbody>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\nconst Row = (props: Table.RowProps) => {\n  return <Tr {...props} />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Cell\n * -----------------------------------------------------------------------------------------------*/\nconst Cell = (props: Table.CellProps) => {\n  return <Td {...props} />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\nconst CheckboxCell = ({ id, ...props }: Table.CheckboxCellProps) => {\n  const rows = useTable('CheckboxCell', (state) => state.rows);\n  const selectedRows = useTable('CheckboxCell', (state) => state.selectedRows);\n  const selectRow = useTable('CheckboxCell', (state) => state.selectRow);\n\n  const { formatMessage } = useIntl();\n\n  const handleSelectRow = () => {\n    selectRow(rows.find((row) => row.id === id));\n  };\n\n  const isChecked = selectedRows.findIndex((row) => row.id === id) > -1;\n\n  return (\n    <Cell {...props} onClick={(e) => e.stopPropagation()}>\n      <Checkbox\n        aria-label={formatMessage(\n          {\n            id: 'app.component.table.select.one-entry',\n            defaultMessage: `Select {target}`,\n          },\n          { target: id }\n        )}\n        disabled={rows.length === 0}\n        checked={isChecked}\n        onCheckedChange={handleSelectRow}\n      />\n    </Cell>\n  );\n};\n/* -------------------------------------------------------------------------------------------------\n * Exports\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @alpha we may move this component to the design-system.\n * @public\n * @description A generic table component composition. Internally handles the state of the table\n * such as selected rows, loading state, and more assuming the correct pieces are put togther.\n * @example\n * ```tsx\n * interace Data {\n *  id: string;\n *  name: string;\n *  email: string;\n * }\n *\n * const ListView = () => {\n *  const { data, isLoading } = useGetData<Data>();\n *\n *  const headers: Table.Header<Data>[] = [\n *    {\n *      label: 'Name',\n *      name: 'name',\n *      sortable: true,\n *    },\n *    {\n *      label: 'Email',\n *      name: 'email',\n *      sortable: true,\n *    },\n *  ];\n *\n *  return (\n *    <Table.Root rows={data} headers={headers} isLoading={isLoading}>\n *      <Table.Content>\n *        <Table.Head>\n *          {headers.map((head) => (\n *            <Table.HeaderCell key={head.name} {...head} />\n *          ))}\n *        </Table.Head>\n *        <Table.Body>\n *          <Table.Loading />\n *          <Table.Empty />\n *          {data.map((row) => (\n *            <Table.Row key={row.id}>\n *              <Table.Cell>{row.name}</Table.Cell>\n *              <Table.Cell>{row.email}</Table.Cell>\n *            </Table.Row>\n *          ))}\n *        </Table.Body>\n *      </Table.Content>\n *    </Table.Root>\n *  );\n * };\n * ```\n */\nconst Table = {\n  Root,\n  Content,\n  ActionBar,\n  Head,\n  HeaderCell,\n  HeaderCheckboxCell,\n  Body,\n  CheckboxCell,\n  Cell,\n  Row,\n  Loading,\n  Empty,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Table {\n  export type Props<\n    TData extends BaseRow,\n    THeader extends TableHeader<TData, THeader> = TableHeader<TData, TableHeader>,\n  > = RootProps<TData, THeader>;\n  export interface ActionBarProps {\n    children?: React.ReactNode;\n  }\n\n  export interface ContentProps {\n    children: React.ReactNode;\n  }\n\n  export type Header<TData, THeader> = TableHeader<TData, THeader>;\n\n  export interface HeadProps {\n    children: React.ReactNode;\n  }\n\n  export interface EmptyProps extends Partial<EmptyStateLayoutProps> {}\n\n  export interface LoadingProps {\n    children?: React.ReactNode;\n  }\n\n  export interface BodyProps {\n    children: React.ReactNode;\n  }\n\n  export interface RowProps extends RawTrProps {}\n\n  export interface CellProps extends RawTdProps {}\n\n  export interface CheckboxCellProps extends Pick<BaseRow, 'id'>, Omit<RawTdProps, 'id'> {}\n}\n\nexport { Table, useTable };\n", "import * as React from 'react';\n\nimport { useCallbackRef } from '@strapi/design-system';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"],
  "mappings": "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",
  "names": ["React", "value", "Table"]
}
