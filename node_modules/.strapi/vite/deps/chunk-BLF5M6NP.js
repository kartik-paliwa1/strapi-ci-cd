import {
  capitalise
} from "./chunk-7QVSMWPD.js";
import {
  intervalToDuration,
  isPast
} from "./chunk-QP5S5OPY.js";
import {
  Status,
  Typography,
  useIntl
} from "./chunk-DOD64YWE.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/content-manager/admin/src/components/RelativeTime.tsx
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var intervals = ["years", "months", "days", "hours", "minutes", "seconds"];
var RelativeTime = React.forwardRef(
  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {
    const { formatRelativeTime, formatDate, formatTime } = useIntl();
    const interval = intervalToDuration({
      start: timestamp,
      end: Date.now()
      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.
    });
    const unit = intervals.find((intervalUnit) => {
      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);
    }) ?? "seconds";
    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];
    const customInterval = customIntervals.find(
      (custom) => interval[custom.unit] < custom.threshold
    );
    const displayText = customInterval ? customInterval.text : formatRelativeTime(relativeTime, unit, { numeric: "auto" });
    return (0, import_jsx_runtime.jsx)(
      "time",
      {
        ref: forwardedRef,
        dateTime: timestamp.toISOString(),
        role: "time",
        title: `${formatDate(timestamp)} ${formatTime(timestamp)}`,
        ...restProps,
        children: displayText
      }
    );
  }
);

// ../packages/core/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var DocumentStatus = ({ status = "draft", size = "S", ...restProps }) => {
  const statusVariant = status === "draft" ? "secondary" : status === "published" ? "success" : "alternative";
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime2.jsx)(Status, { ...restProps, size, variant: statusVariant, role: "status", "aria-label": status, children: (0, import_jsx_runtime2.jsx)(Typography, { tag: "span", variant: "omega", fontWeight: "bold", children: formatMessage({
    id: `content-manager.containers.List.${status}`,
    defaultMessage: capitalise(status)
  }) }) });
};

export {
  RelativeTime,
  DocumentStatus
};
//# sourceMappingURL=chunk-BLF5M6NP.js.map
