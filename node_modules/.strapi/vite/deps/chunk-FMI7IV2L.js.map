{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/services/users.ts"],
  "sourcesContent": ["import * as Permissions from '../../../shared/contracts/permissions';\nimport * as Roles from '../../../shared/contracts/roles';\nimport * as Users from '../../../shared/contracts/user';\n\nimport { adminApi } from './api';\n\nimport type { Data } from '@strapi/types';\n\nconst usersService = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['LicenseLimits', 'User', 'Role', 'RolePermissions'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      /**\n       * users\n       */\n      createUser: builder.mutation<Users.Create.Response['data'], Users.Create.Request['body']>({\n        query: (body) => ({\n          url: '/admin/users',\n          method: 'POST',\n          data: body,\n        }),\n        transformResponse: (response: Users.Create.Response) => response.data,\n        invalidatesTags: ['LicenseLimits', { type: 'User', id: 'LIST' }, 'HomepageKeyStatistics'],\n      }),\n      updateUser: builder.mutation<\n        Users.Update.Response['data'],\n        Omit<Users.Update.Request['body'] & Users.Update.Params, 'blocked'>\n      >({\n        query: ({ id, ...body }) => ({\n          url: `/admin/users/${id}`,\n          method: 'PUT',\n          data: body,\n        }),\n        invalidatesTags: (_res, _err, { id }) => [\n          { type: 'User', id },\n          { type: 'User', id: 'LIST' },\n        ],\n      }),\n      getUsers: builder.query<\n        {\n          users: Users.FindAll.Response['data']['results'];\n          pagination: Users.FindAll.Response['data']['pagination'] | null;\n        },\n        GetUsersParams\n      >({\n        query: ({ id, ...params } = {}) => ({\n          url: `/admin/users/${id ?? ''}`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: Users.FindAll.Response | Users.FindOne.Response) => {\n          let users: Users.FindAll.Response['data']['results'] = [];\n\n          if (res.data) {\n            if ('results' in res.data) {\n              if (Array.isArray(res.data.results)) {\n                users = res.data.results;\n              }\n            } else {\n              users = [res.data];\n            }\n          }\n\n          return {\n            users,\n            pagination: 'pagination' in res.data ? res.data.pagination : null,\n          };\n        },\n        providesTags: (res, _err, arg) => {\n          if (typeof arg === 'object' && 'id' in arg) {\n            return [{ type: 'User' as const, id: arg.id }];\n          } else {\n            return [\n              ...(res?.users.map(({ id }) => ({ type: 'User' as const, id })) ?? []),\n              { type: 'User' as const, id: 'LIST' },\n            ];\n          }\n        },\n      }),\n      deleteManyUsers: builder.mutation<\n        Users.DeleteMany.Response['data'],\n        Users.DeleteMany.Request['body']\n      >({\n        query: (body) => ({\n          url: '/admin/users/batch-delete',\n          method: 'POST',\n          data: body,\n        }),\n        transformResponse: (res: Users.DeleteMany.Response) => res.data,\n        invalidatesTags: ['LicenseLimits', { type: 'User', id: 'LIST' }, 'HomepageKeyStatistics'],\n      }),\n      /**\n       * roles\n       */\n      createRole: builder.mutation<Roles.Create.Response['data'], Roles.Create.Request['body']>({\n        query: (body) => ({\n          url: '/admin/roles',\n          method: 'POST',\n          data: body,\n        }),\n        transformResponse: (res: Roles.Create.Response) => res.data,\n        invalidatesTags: [{ type: 'Role', id: 'LIST' }],\n      }),\n      getRoles: builder.query<Roles.FindRoles.Response['data'], GetRolesParams | void>({\n        query: ({ id, ...params } = {}) => ({\n          url: `/admin/roles/${id ?? ''}`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: Roles.FindRole.Response | Roles.FindRoles.Response) => {\n          let roles: Roles.FindRoles.Response['data'] = [];\n\n          if (res.data) {\n            if (Array.isArray(res.data)) {\n              roles = res.data;\n            } else {\n              roles = [res.data];\n            }\n          }\n\n          return roles;\n        },\n        providesTags: (res, _err, arg) => {\n          if (typeof arg === 'object' && 'id' in arg) {\n            return [{ type: 'Role' as const, id: arg.id }];\n          } else {\n            return [\n              ...(res?.map(({ id }) => ({ type: 'Role' as const, id })) ?? []),\n              { type: 'Role' as const, id: 'LIST' },\n            ];\n          }\n        },\n      }),\n      updateRole: builder.mutation<\n        Roles.Update.Response['data'],\n        Roles.Update.Request['body'] & Roles.Update.Request['params']\n      >({\n        query: ({ id, ...body }) => ({\n          url: `/admin/roles/${id}`,\n          method: 'PUT',\n          data: body,\n        }),\n        transformResponse: (res: Roles.Create.Response) => res.data,\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'Role' as const, id }],\n      }),\n      getRolePermissions: builder.query<\n        Roles.GetPermissions.Response['data'],\n        GetRolePermissionsParams\n      >({\n        query: ({ id, ...params }) => ({\n          url: `/admin/roles/${id}/permissions`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: Roles.GetPermissions.Response) => res.data,\n        providesTags: (_res, _err, { id }) => [{ type: 'RolePermissions' as const, id }],\n      }),\n      updateRolePermissions: builder.mutation<\n        Roles.UpdatePermissions.Response['data'],\n        Roles.UpdatePermissions.Request['body'] & Roles.UpdatePermissions.Request['params']\n      >({\n        query: ({ id, ...body }) => ({\n          url: `/admin/roles/${id}/permissions`,\n          method: 'PUT',\n          data: body,\n        }),\n        transformResponse: (res: Roles.UpdatePermissions.Response) => res.data,\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'RolePermissions' as const, id }],\n      }),\n      /**\n       * Permissions\n       */\n      getRolePermissionLayout: builder.query<\n        Permissions.GetAll.Response['data'],\n        Permissions.GetAll.Request['params']\n      >({\n        query: (params) => ({\n          url: '/admin/permissions',\n          method: 'GET',\n          config: {\n            params,\n          },\n        }),\n        transformResponse: (res: Permissions.GetAll.Response) => res.data,\n      }),\n    }),\n    overrideExisting: false,\n  });\n\ntype GetUsersParams =\n  | Users.FindOne.Params\n  | (Users.FindAll.Request['query'] & { id?: never })\n  | void;\ntype GetRolesParams =\n  | Roles.FindRole.Request['params']\n  | (Roles.FindRoles.Request['query'] & { id?: never });\ninterface GetRolePermissionsParams {\n  id: Data.ID;\n}\n\nconst {\n  useCreateUserMutation,\n  useGetUsersQuery,\n  useUpdateUserMutation,\n  useDeleteManyUsersMutation,\n  useGetRolesQuery,\n  useCreateRoleMutation,\n  useUpdateRoleMutation,\n  useGetRolePermissionsQuery,\n  useGetRolePermissionLayoutQuery,\n  useUpdateRolePermissionsMutation,\n} = usersService;\n\nconst useAdminUsers = useGetUsersQuery;\n\nexport {\n  useUpdateUserMutation,\n  useGetRolesQuery,\n  useAdminUsers,\n  useDeleteManyUsersMutation,\n  useCreateUserMutation,\n  useGetRolePermissionsQuery,\n  useGetRolePermissionLayoutQuery,\n  useCreateRoleMutation,\n  useUpdateRolePermissionsMutation,\n  useUpdateRoleMutation,\n};\nexport type { GetRolesParams, GetUsersParams, GetRolePermissionsParams };\n"],
  "mappings": "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",
  "names": []
}
