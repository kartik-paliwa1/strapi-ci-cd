{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useClipboard.ts", "../../../../../packages/core/admin/admin/src/components/ContentBox.tsx"],
  "sourcesContent": ["import { useCallback } from 'react';\n\nconst useClipboard = () => {\n  const copy = useCallback(async (value: string | number) => {\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        throw new Error(\n          `Cannot copy typeof ${typeof value} to clipboard, must be a string or number`\n        );\n      }\n      // empty strings are also considered invalid\n      else if (value === '') {\n        throw new Error(`Cannot copy empty string to clipboard.`);\n      }\n\n      const stringifiedValue = value.toString();\n\n      await navigator.clipboard.writeText(stringifiedValue);\n\n      return true;\n    } catch (error) {\n      /**\n       * Realistically this isn't useful in production as there's nothing the user can do.\n       */\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('Copy failed', error);\n      }\n\n      return false;\n    }\n  }, []);\n\n  return { copy };\n};\n\nexport { useClipboard };\n", "import {\n  Flex,\n  FlexComponent,\n  FlexProps,\n  Typography,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\ninterface ContentBoxProps {\n  title?: string;\n  subtitle?: string;\n  icon?: FlexProps['children'];\n  iconBackground?: FlexProps['background'];\n  endAction?: FlexProps['children'];\n  titleEllipsis?: boolean;\n}\n\nconst ContentBox = ({\n  title,\n  subtitle,\n  icon,\n  iconBackground,\n  endAction,\n  titleEllipsis = false,\n}: ContentBoxProps) => {\n  if (title && title.length > 70 && titleEllipsis) {\n    title = `${title.substring(0, 70)}...`;\n  }\n\n  return (\n    <Flex shadow=\"tableShadow\" hasRadius padding={6} background=\"neutral0\">\n      <IconWrapper background={iconBackground} hasRadius padding={3}>\n        {icon}\n      </IconWrapper>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={endAction ? 0 : 1}>\n        <Flex>\n          <TypographyWordBreak fontWeight=\"semiBold\" variant=\"pi\">\n            {title}\n          </TypographyWordBreak>\n          {endAction}\n        </Flex>\n        <Typography textColor=\"neutral600\">{subtitle}</Typography>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst IconWrapper = styled<FlexComponent>(Flex)`\n  margin-right: ${({ theme }) => theme.spaces[6]};\n\n  svg {\n    width: 3.2rem;\n    height: 3.2rem;\n  }\n`;\n\nconst TypographyWordBreak = styled<TypographyComponent>(Typography)`\n  color: ${({ theme }) => theme.colors.neutral800};\n  word-break: break-all;\n`;\n\nexport { ContentBox };\nexport type { ContentBoxProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,mBAA4B;AAE5B,IAAM,eAAe,MAAM;AACzB,QAAM,WAAO,0BAAY,OAAO,UAA2B;AACzD,QAAI;AAEF,UAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AAC1D,cAAM,IAAI;AAAA,UACR,sBAAsB,OAAO,KAAK;AAAA,QACpC;AAAA,MACF,WAES,UAAU,IAAI;AACrB,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AAEA,YAAM,mBAAmB,MAAM,SAAS;AAExC,YAAM,UAAU,UAAU,UAAU,gBAAgB;AAEpD,aAAO;AAAA,IACT,SAAS,OAAO;AAId,UAAI,MAAwC;AAC1C,gBAAQ,KAAK,eAAe,KAAK;AAAA,MACnC;AAEA,aAAO;AAAA,IACT;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO,EAAE,KAAK;AAChB;;;ACFM;AAdN,IAAM,aAAa,CAAC;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB;AAClB,MAAuB;AACrB,MAAI,SAAS,MAAM,SAAS,MAAM,eAAe;AAC/C,YAAQ,GAAG,MAAM,UAAU,GAAG,EAAE,CAAC;AAAA,EACnC;AAEA,aACE,yBAAC,QAAK,QAAO,eAAc,WAAS,MAAC,SAAS,GAAG,YAAW,YAC1D;AAAA,gCAAC,eAAY,YAAY,gBAAgB,WAAS,MAAC,SAAS,GACzD,gBACH;AAAA,QACA,yBAAC,QAAK,WAAU,UAAS,YAAW,WAAU,KAAK,YAAY,IAAI,GACjE;AAAA,mCAAC,QACC;AAAA,oCAAC,uBAAoB,YAAW,YAAW,SAAQ,MAChD,iBACH;AAAA,QACC;AAAA,SACH;AAAA,UACA,wBAAC,cAAW,WAAU,cAAc,oBAAS;AAAA,OAC/C;AAAA,KACF;AAEJ;AAEA,IAAM,cAAc,GAAsB,IAAI;AAAA,kBAC5B,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhD,IAAM,sBAAsB,GAA4B,UAAU;AAAA,WACvD,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA;AAAA;",
  "names": []
}
