{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/FieldTypeIcon.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Box } from '@strapi/design-system';\nimport {\n  BlocksField,\n  BooleanField,\n  ComponentField,\n  DateField,\n  DynamicZoneField,\n  EmailField,\n  EnumerationField,\n  JsonField,\n  MediaField,\n  NumberField,\n  PasswordField,\n  RelationField,\n  TextField,\n  UidField,\n} from '@strapi/icons/symbols';\n\nimport type { Schema } from '@strapi/types';\n\nconst iconByTypes: Record<Schema.Attribute.Kind, React.ReactElement> = {\n  biginteger: <NumberField />,\n  boolean: <BooleanField />,\n  date: <DateField />,\n  datetime: <DateField />,\n  decimal: <NumberField />,\n  email: <EmailField />,\n  enumeration: <EnumerationField />,\n  float: <NumberField />,\n  integer: <NumberField />,\n  media: <MediaField />,\n  password: <PasswordField />,\n  relation: <RelationField />,\n  string: <TextField />,\n  text: <TextField />,\n  richtext: <TextField />,\n  time: <DateField />,\n  timestamp: <DateField />,\n  json: <JsonField />,\n  uid: <UidField />,\n  component: <ComponentField />,\n  dynamiczone: <DynamicZoneField />,\n  blocks: <BlocksField />,\n};\n\ninterface FieldTypeIconProps {\n  type?: keyof typeof iconByTypes;\n  customFieldUid?: string;\n}\n\nconst FieldTypeIcon = ({ type, customFieldUid }: FieldTypeIconProps) => {\n  const getCustomField = useStrapiApp('FieldTypeIcon', (state) => state.customFields.get);\n\n  if (!type) {\n    return null;\n  }\n\n  let Compo = iconByTypes[type];\n\n  if (customFieldUid) {\n    const customField = getCustomField(customFieldUid);\n    const CustomFieldIcon = customField?.icon;\n\n    if (CustomFieldIcon) {\n      Compo = (\n        <Box marginRight={3} width={7} height={6}>\n          <CustomFieldIcon />\n        </Box>\n      );\n    }\n  }\n\n  if (!iconByTypes[type]) {\n    return null;\n  }\n\n  return Compo;\n};\n\nexport { FieldTypeIcon };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBc;AADd,IAAM,cAAiE;AAAA,EACrE,gBAAY,wBAAC,gBAAY;AAAA,EACzB,aAAS,wBAAC,iBAAa;AAAA,EACvB,UAAM,wBAAC,gBAAU;AAAA,EACjB,cAAU,wBAAC,gBAAU;AAAA,EACrB,aAAS,wBAAC,gBAAY;AAAA,EACtB,WAAO,wBAAC,gBAAW;AAAA,EACnB,iBAAa,wBAAC,gBAAiB;AAAA,EAC/B,WAAO,wBAAC,gBAAY;AAAA,EACpB,aAAS,wBAAC,gBAAY;AAAA,EACtB,WAAO,wBAAC,gBAAW;AAAA,EACnB,cAAU,wBAAC,gBAAc;AAAA,EACzB,cAAU,wBAAC,gBAAc;AAAA,EACzB,YAAQ,wBAAC,gBAAU;AAAA,EACnB,UAAM,wBAAC,gBAAU;AAAA,EACjB,cAAU,wBAAC,gBAAU;AAAA,EACrB,UAAM,wBAAC,gBAAU;AAAA,EACjB,eAAW,wBAAC,gBAAU;AAAA,EACtB,UAAM,wBAAC,gBAAU;AAAA,EACjB,SAAK,wBAAC,gBAAS;AAAA,EACf,eAAW,wBAAC,gBAAe;AAAA,EAC3B,iBAAa,wBAAC,gBAAiB;AAAA,EAC/B,YAAQ,wBAAC,iBAAY;AACvB;AAOA,IAAM,gBAAgB,CAAC,EAAE,MAAM,eAAe,MAA0B;AACtE,QAAM,iBAAiB,aAAa,iBAAiB,CAAC,UAAU,MAAM,aAAa,GAAG;AAEtF,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,YAAY,IAAI;AAE5B,MAAI,gBAAgB;AAClB,UAAM,cAAc,eAAe,cAAc;AACjD,UAAM,kBAAkB,2CAAa;AAErC,QAAI,iBAAiB;AACnB,kBACE,wBAAC,OAAI,aAAa,GAAG,OAAO,GAAG,QAAQ,GACrC,sCAAC,mBAAgB,GACnB;AAAA,IAEJ;AAAA,EACF;AAEA,MAAI,CAAC,YAAY,IAAI,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,SAAO;AACT;",
  "names": []
}
