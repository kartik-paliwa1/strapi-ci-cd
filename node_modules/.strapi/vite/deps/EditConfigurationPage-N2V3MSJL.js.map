{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/pages/EditConfigurationPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Page, useNotification, useTracking, useAPIErrorHandler } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\n\nimport { TEMP_FIELD_NAME } from '../components/ConfigurationForm/Fields';\nimport { ConfigurationForm, ConfigurationFormProps } from '../components/ConfigurationForm/Form';\nimport { useDoc } from '../hooks/useDocument';\nimport { useDocLayout } from '../hooks/useDocumentLayout';\nimport { useTypedSelector } from '../modules/hooks';\nimport { useUpdateContentTypeConfigurationMutation } from '../services/contentTypes';\nimport { useGetInitialDataQuery } from '../services/init';\nimport { setIn } from '../utils/objects';\n\nimport type { Metadatas } from '../../../shared/contracts/content-types';\n\nconst EditConfigurationPage = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { isLoading: isLoadingSchema, schema, model } = useDoc();\n  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();\n\n  const {\n    fieldSizes,\n    error: errorFieldSizes,\n    isLoading: isLoadingFieldSizes,\n    isFetching: isFetchingFieldSizes,\n  } = useGetInitialDataQuery(undefined, {\n    selectFromResult: (res) => {\n      const fieldSizes = Object.entries(res.data?.fieldSizes ?? {}).reduce<\n        ConfigurationFormProps['fieldSizes']\n      >((acc, [attributeName, { default: size }]) => {\n        acc[attributeName] = size;\n\n        return acc;\n      }, {});\n\n      return {\n        isFetching: res.isFetching,\n        isLoading: res.isLoading,\n        error: res.error,\n        fieldSizes,\n      };\n    },\n  });\n\n  React.useEffect(() => {\n    if (errorFieldSizes) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(errorFieldSizes),\n      });\n    }\n  }, [errorFieldSizes, formatAPIError, toggleNotification]);\n\n  const isLoading =\n    isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;\n\n  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();\n  const handleSubmit: ConfigurationFormProps['onSubmit'] = async (data) => {\n    try {\n      trackUsage('willSaveContentTypeLayout');\n\n      /**\n       * We reconstruct the metadatas object by taking the existing list metadatas\n       * and re-merging that by attribute name with the current list metadatas, whilst overwriting\n       * the data from the form we've built.\n       */\n      const meta = Object.entries(list.metadatas).reduce<Metadatas>(\n        (acc, [name, { mainField: _mainField, ...listMeta }]) => {\n          const existingEditMeta = edit.metadatas[name];\n\n          const {\n            __temp_key__,\n            size: _size,\n            name: _name,\n            ...editedMetadata\n          } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};\n\n          acc[name] = {\n            edit: {\n              ...existingEditMeta,\n              ...editedMetadata,\n            },\n            list: listMeta,\n          };\n\n          return acc;\n        },\n        {}\n      );\n\n      const res = await updateConfiguration({\n        layouts: {\n          edit: data.layout.map((row) =>\n            row.children.reduce<Array<{ name: string; size: number }>>((acc, { name, size }) => {\n              if (name !== TEMP_FIELD_NAME) {\n                return [...acc, { name, size }];\n              }\n\n              return acc;\n            }, [])\n          ),\n          list: list.layout.map((field) => field.name),\n        },\n        settings: setIn(data.settings, 'displayName', undefined),\n        metadatas: meta,\n        uid: model,\n      });\n\n      if ('data' in res) {\n        trackUsage('didEditEditSettings');\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (errorFieldSizes || error || !schema) {\n    return <Page.Error />;\n  }\n\n  return (\n    <>\n      <Page.Title>{`Configure ${edit.settings.displayName} Edit View`}</Page.Title>\n      <ConfigurationForm\n        onSubmit={handleSubmit}\n        attributes={schema.attributes}\n        fieldSizes={fieldSizes}\n        layout={edit}\n      />\n    </>\n  );\n};\n\nconst ProtectedEditConfigurationPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditConfigurationPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditConfigurationPage, EditConfigurationPage };\n"],
  "mappings": "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",
  "names": ["fieldSizes"]
}
