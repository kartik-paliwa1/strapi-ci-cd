{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/pages/AuthPage/components/Providers.tsx", "../../../../../packages/core/admin/ee/admin/src/pages/AuthPage/constants.ts"],
  "sourcesContent": ["import { Box, Button, Divider, Flex, Loader, Main, Typography, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { NavLink, Navigate, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Logo } from '../../../../../../admin/src/components/UnauthenticatedLogo';\nimport {\n  Column,\n  LayoutContent,\n  UnauthenticatedLayout,\n} from '../../../../../../admin/src/layouts/UnauthenticatedLayout';\nimport { useGetProvidersQuery } from '../../../../../../admin/src/services/auth';\n\nimport { SSOProviders } from './SSOProviders';\n\nconst Providers = () => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { isLoading, data: providers = [] } = useGetProvidersQuery(undefined, {\n    skip: !window.strapi.features.isEnabled(window.strapi.features.SSO),\n  });\n\n  const handleClick = () => {\n    navigate('/auth/login');\n  };\n\n  if (\n    !window.strapi.features.isEnabled(window.strapi.features.SSO) ||\n    (!isLoading && providers.length === 0)\n  ) {\n    return <Navigate to=\"/auth/login\" />;\n  }\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={1}>\n              <Typography tag=\"h1\" variant=\"alpha\">\n                {formatMessage({ id: 'Auth.form.welcome.title' })}\n              </Typography>\n            </Box>\n            <Box paddingBottom={7}>\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                {formatMessage({ id: 'Auth.login.sso.subtitle' })}\n              </Typography>\n            </Box>\n          </Column>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\n            {isLoading ? (\n              <Flex justifyContent=\"center\">\n                <Loader>{formatMessage({ id: 'Auth.login.sso.loading' })}</Loader>\n              </Flex>\n            ) : (\n              <SSOProviders providers={providers} />\n            )}\n            <Flex>\n              <DividerFull />\n              <Box paddingLeft={3} paddingRight={3}>\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage({ id: 'or' })}\n                </Typography>\n              </Box>\n              <DividerFull />\n            </Flex>\n            <Button fullWidth size=\"L\" onClick={handleClick}>\n              {formatMessage({ id: 'Auth.form.button.login.strapi' })}\n            </Button>\n          </Flex>\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            <Link tag={NavLink} to=\"/auth/forgot-password\">\n              <Typography variant=\"pi\">\n                {formatMessage({ id: 'Auth.link.forgot-password' })}\n              </Typography>\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nconst DividerFull = styled(Divider)`\n  flex: 1;\n`;\n\nexport { Providers };\n", "import type { ComponentType } from 'react';\n\nimport { Providers } from './components/Providers';\n\ntype AuthType = 'providers';\n\ntype FormDictionary = Record<AuthType, ComponentType>;\n\nexport const FORMS = {\n  providers: Providers,\n} satisfies FormDictionary;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BW;AAfX,IAAM,YAAY,MAAM;AACtB,QAAM,WAAW,YAAY;AAC7B,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,EAAE,WAAW,MAAM,YAAY,CAAC,EAAE,IAAI,qBAAqB,QAAW;AAAA,IAC1E,MAAM,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG;AAAA,EACpE,CAAC;AAED,QAAM,cAAc,MAAM;AACxB,aAAS,aAAa;AAAA,EACxB;AAEA,MACE,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG,KAC3D,CAAC,aAAa,UAAU,WAAW,GACpC;AACA,eAAO,wBAAC,YAAS,IAAG,eAAc;AAAA,EACpC;AAEA,aACE,wBAAC,yBACC,uCAAC,QACC;AAAA,iCAAC,iBACC;AAAA,mCAAC,UACC;AAAA,oCAAC,QAAK;AAAA,YACN,wBAAC,OAAI,YAAY,GAAG,eAAe,GACjC,sCAAC,cAAW,KAAI,MAAK,SAAQ,SAC1B,wBAAc,EAAE,IAAI,0BAA0B,CAAC,GAClD,GACF;AAAA,YACA,wBAAC,OAAI,eAAe,GAClB,sCAAC,cAAW,SAAQ,WAAU,WAAU,cACrC,wBAAc,EAAE,IAAI,0BAA0B,CAAC,GAClD,GACF;AAAA,SACF;AAAA,UACA,yBAAC,QAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD;AAAA,wBACC,wBAAC,QAAK,gBAAe,UACnB,sCAAC,UAAQ,wBAAc,EAAE,IAAI,yBAAyB,CAAC,GAAE,GAC3D,QAEA,wBAAC,gBAAa,WAAsB;AAAA,YAEtC,yBAAC,QACC;AAAA,sCAAC,eAAY;AAAA,cACb,wBAAC,OAAI,aAAa,GAAG,cAAc,GACjC,sCAAC,cAAW,SAAQ,SAAQ,WAAU,cACnC,wBAAc,EAAE,IAAI,KAAK,CAAC,GAC7B,GACF;AAAA,cACA,wBAAC,eAAY;AAAA,WACf;AAAA,YACA,wBAAC,UAAO,WAAS,MAAC,MAAK,KAAI,SAAS,aACjC,wBAAc,EAAE,IAAI,gCAAgC,CAAC,GACxD;AAAA,SACF;AAAA,OACF;AAAA,QACA,wBAAC,QAAK,gBAAe,UACnB,sCAAC,OAAI,YAAY,GACf,sCAAC,QAAK,KAAK,SAAS,IAAG,yBACrB,sCAAC,cAAW,SAAQ,MACjB,wBAAc,EAAE,IAAI,4BAA4B,CAAC,GACpD,GACF,GACF,GACF;AAAA,KACF,GACF;AAEJ;AAEA,IAAM,cAAc,GAAO,OAAO;AAAA;AAAA;;;AC9E3B,IAAM,QAAQ;AAAA,EACnB,WAAW;AACb;",
  "names": []
}
