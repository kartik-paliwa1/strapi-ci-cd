{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Formik, Form, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport {\n  useCreateTransferTokenMutation,\n  useGetTransferTokenQuery,\n  useUpdateTransferTokenMutation,\n} from '../../../../services/transferTokens';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { FormHead } from '../../components/Tokens/FormHead';\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\nimport { TokenBox } from '../../components/Tokens/TokenBox';\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\nimport { TokenName } from '../../components/Tokens/TokenName';\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\n\nimport type {\n  TransferToken,\n  SanitizedTransferToken,\n} from '../../../../../../shared/contracts/transfer';\n\nconst schema = yup.object().shape({\n  name: yup.string().max(100).required(translatedErrors.required.id),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\n  permissions: yup.string().required(translatedErrors.required.id),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const { state: locationState } = useLocation();\n  const [transferToken, setTransferToken] = React.useState<\n    TransferToken | SanitizedTransferToken | null\n  >(\n    locationState && 'accessKey' in locationState.transferToken\n      ? {\n          ...locationState.transferToken,\n        }\n      : null\n  );\n  const { trackUsage } = useTracking();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\n  );\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n  } = useRBAC(permissions);\n  const match = useMatch('/settings/transfer-tokens/:id');\n\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  const { data, error } = useGetTransferTokenQuery(id!, {\n    skip: isCreating || transferToken !== null || !id,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (data) {\n      setTransferToken(data);\n    }\n  }, [data]);\n\n  const [createToken] = useCreateTransferTokenMutation();\n  const [updateToken] = useUpdateTransferTokenMutation();\n\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n\n    const permissions = body.permissions.split('-');\n\n    const isPermissionsTransferPermission = (\n      permission: string[]\n    ): permission is Array<'push' | 'pull'> => {\n      if (permission.length === 1) {\n        return permission[0] === 'push' || permission[0] === 'pull';\n      }\n\n      return permission[0] === 'push' && permission[1] === 'pull';\n    };\n\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\n    // because String.split returns stringp[]\n    if (isPermissionsTransferPermission(permissions)) {\n      try {\n        if (isCreating) {\n          const res = await createToken({\n            ...body,\n            // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\n            lifespan:\n              body?.lifespan && body.lifespan !== '0'\n                ? parseInt(body.lifespan.toString(), 10)\n                : null,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokencreated',\n              defaultMessage: 'Transfer Token successfully created',\n            }),\n          });\n\n          trackUsage('didCreateToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n\n          navigate(`../transfer-tokens/${res.data.id.toString()}`, {\n            replace: true,\n            state: { transferToken: res.data },\n          });\n        } else {\n          const res = await updateToken({\n            id: id!,\n            name: body.name,\n            description: body.description,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokenedited',\n              defaultMessage: 'Transfer Token successfully edited',\n            }),\n          });\n\n          trackUsage('didEditToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'Something went wrong',\n          }),\n        });\n      }\n    }\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const isLoading = !isCreating && !transferToken;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Transfer Tokens',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        validationSchema={schema}\n        validateOnChange={false}\n        initialValues={\n          {\n            name: transferToken?.name || '',\n            description: transferToken?.description || '',\n            lifespan: transferToken?.lifespan || null,\n            /**\n             * We need to cast the permissions to satisfy the type for `permissions`\n             * in the request body incase we don't have a transferToken and instead\n             * use an empty string.\n             */\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\n          } satisfies FormValues\n        }\n        enableReinitialize\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\n      >\n        {({ errors, handleChange, isSubmitting, values }) => {\n          return (\n            <Form>\n              <FormHead\n                title={{\n                  id: 'Settings.transferTokens.createPage.title',\n                  defaultMessage: 'TokenCreate Transfer Token',\n                }}\n                token={transferToken}\n                setToken={setTransferToken}\n                canShowToken={false}\n                canEditInputs={canEditInputs}\n                canRegenerate={canRegenerate}\n                isSubmitting={isSubmitting}\n                regenerateUrl=\"/admin/transfer/tokens/\"\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {transferToken &&\n                    Boolean(transferToken?.name) &&\n                    'accessKey' in transferToken && (\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\n                    )}\n                  <FormTransferTokenContainer\n                    errors={errors}\n                    onChange={handleChange}\n                    canEditInputs={canEditInputs}\n                    isCreating={isCreating}\n                    values={values}\n                    transferToken={transferToken}\n                  />\n                </Flex>\n              </Layouts.Content>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditView />\n    </Page.Protect>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormTransferTokenContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\n  permissions: Extract<TransferToken['permissions'][number], string>;\n}\n\ninterface FormTransferTokenContainerProps {\n  errors: FormikErrors<FormValues>;\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\n  canEditInputs: boolean;\n  values: FormValues;\n  isCreating: boolean;\n  transferToken: Partial<TransferToken> | null;\n}\n\nconst FormTransferTokenContainer = ({\n  errors = {},\n  onChange,\n  canEditInputs,\n  isCreating,\n  values,\n  transferToken = {},\n}: FormTransferTokenContainerProps) => {\n  const { formatMessage } = useIntl();\n\n  const typeOptions = [\n    {\n      value: 'push',\n      label: {\n        id: 'Settings.transferTokens.types.push',\n        defaultMessage: 'Push',\n      },\n    },\n    {\n      value: 'pull',\n      label: {\n        id: 'Settings.transferTokens.types.pull',\n        defaultMessage: 'Pull',\n      },\n    },\n    {\n      value: 'push-pull',\n      label: {\n        id: 'Settings.transferTokens.types.push-pull',\n        defaultMessage: 'Full Access',\n      },\n    },\n  ];\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.details',\n            defaultMessage: 'Details',\n          })}\n        </Typography>\n        <Grid.Root gap={5}>\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenName\n              error={errors['name']}\n              value={values['name']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenDescription\n              error={errors['description']}\n              value={values['description']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <LifeSpanInput\n              isCreating={isCreating}\n              error={errors['lifespan']}\n              value={values['lifespan']}\n              onChange={onChange}\n              token={transferToken}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"permissions\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenTypeSelect\n              name=\"permissions\"\n              value={values['permissions']}\n              error={errors['permissions']}\n              label={{\n                id: 'Settings.tokens.form.type',\n                defaultMessage: 'Token type',\n              }}\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\n              onChange={(value: string) => {\n                onChange({ target: { name: 'permissions', value } });\n              }}\n              options={typeOptions}\n              canEditInputs={canEditInputs}\n            />\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { EditView, ProtectedEditView };\n"],
  "mappings": "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",
  "names": ["create", "_a", "permissions"]
}
