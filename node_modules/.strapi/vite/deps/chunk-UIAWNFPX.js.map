{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/GuidedTour/utils/constants.ts", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Tours.tsx", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Context.tsx", "../../../../../packages/core/admin/admin/src/hooks/usePersistentState.ts", "../../../../../packages/core/admin/admin/src/components/GuidedTour/utils/migrations.ts", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Steps/Step.tsx", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Steps/ApiTokensSteps.tsx", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Steps/ContentManagerSteps.tsx", "../../../../../packages/core/admin/admin/src/components/GuidedTour/Steps/ContentTypeBuilderSteps.tsx"],
  "sourcesContent": ["const GUIDED_TOUR_REQUIRED_ACTIONS = {\n  contentTypeBuilder: {\n    createSchema: 'didCreateContentTypeSchema',\n    addField: 'didAddFieldToSchema',\n  },\n  contentManager: {\n    createContent: 'didCreateContent',\n  },\n  apiTokens: {\n    createToken: 'didCreateApiToken',\n    copyToken: 'didCopyApiToken',\n  },\n  strapiCloud: {},\n} as const;\n\nexport { GUIDED_TOUR_REQUIRED_ACTIONS };\n", "import * as React from 'react';\n\nimport { Box, Popover, Portal } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\n\nimport { type State, type Action, useGuidedTour, ValidTourName, CompletedActions } from './Context';\nimport { apiTokensSteps } from './Steps/ApiTokensSteps';\nimport { contentManagerSteps } from './Steps/ContentManagerSteps';\nimport { contentTypeBuilderSteps } from './Steps/ContentTypeBuilderSteps';\nimport { type Step, createStepComponents } from './Steps/Step';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from './utils/constants';\n\n/* -------------------------------------------------------------------------------------------------\n * Tours\n * -----------------------------------------------------------------------------------------------*/\n\nconst tours = {\n  contentTypeBuilder: createTour('contentTypeBuilder', contentTypeBuilderSteps),\n  contentManager: createTour('contentManager', contentManagerSteps),\n  apiTokens: createTour('apiTokens', apiTokensSteps),\n  strapiCloud: createTour('strapiCloud', []),\n} as const;\n\ntype Tours = typeof tours;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourTooltip\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StepContentProps = {\n  Step: Step;\n  state: State;\n  dispatch: React.Dispatch<Action>;\n};\ntype Content = (props: StepContentProps) => React.ReactNode;\n\ntype GuidedTourTooltipProps = {\n  children: React.ReactNode;\n  content: Content;\n  tourName: ValidTourName;\n  step: number;\n  when?: (completedActions: CompletedActions) => boolean;\n};\n\nconst GuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\n  const state = useGuidedTour('TooltipWrapper', (s) => s.state);\n\n  if (!state.enabled) {\n    return children;\n  }\n\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\n};\n\nconst GuidedTourOverlay = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(50, 50, 77, 0.2);\n  z-index: 10;\n`;\n\nconst GuidedTourTooltipImpl = ({\n  children,\n  content,\n  tourName,\n  step,\n  when,\n}: GuidedTourTooltipProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n\n  const state = useGuidedTour('GuidedTourTooltip', (s) => s.state);\n  const dispatch = useGuidedTour('GuidedTourTooltip', (s) => s.dispatch);\n\n  const isCurrentStep = state.tours[tourName].currentStep === step;\n  const isStepConditionMet = when ? when(state.completedActions) : true;\n  const isPopoverOpen =\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\n    !state.tours[tourName].isCompleted &&\n    isCurrentStep &&\n    isStepConditionMet;\n\n  // Lock the scroll\n  React.useEffect(() => {\n    if (!isPopoverOpen) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, [isPopoverOpen]);\n\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\n\n  const hasApiSchema =\n    Object.keys(guidedTourMeta?.data?.schemas ?? {}).filter((key) => key.startsWith('api::'))\n      .length > 0;\n\n  React.useEffect(() => {\n    if (hasApiSchema) {\n      /**\n       * Fallback sync:\n       *\n       * When the user already has a schema (ie started project from template with seeded data),\n       * allow them to proceed to the content manager tour.\n       *\n       * When the CTB fails to restart after saving a schema (as it often does)\n       */\n      dispatch({\n        type: 'set_completed_actions',\n        payload: [GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema],\n      });\n    }\n  }, [dispatch, hasApiSchema, step, tourName]);\n\n  return (\n    <>\n      {isPopoverOpen && (\n        <Portal>\n          <GuidedTourOverlay />\n        </Portal>\n      )}\n      <Popover.Root open={isPopoverOpen}>\n        <Popover.Anchor>{children}</Popover.Anchor>\n        {content({ Step, state, dispatch })}\n      </Popover.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Tour factory\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TourStep<P extends string> = {\n  name: P;\n  content: Content;\n  when?: (completedActions: CompletedActions) => boolean;\n  excludeFromStepCount?: boolean;\n};\n\nexport function createTour<const T extends ReadonlyArray<TourStep<string>>>(\n  tourName: string,\n  steps: T\n) {\n  type Components = {\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\n  };\n\n  const tour = steps.reduce(\n    (acc, step, index) => {\n      const name = step.name as keyof Components;\n\n      if (name in acc) {\n        throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\n      }\n\n      (acc as Components)[name] = ({ children }: { children: React.ReactNode }) => {\n        return (\n          <GuidedTourTooltip\n            tourName={tourName as ValidTourName}\n            step={index}\n            content={step.content}\n            when={step.when}\n          >\n            {children}\n          </GuidedTourTooltip>\n        );\n      };\n\n      if (step.excludeFromStepCount) {\n        // Subtract all steps registered to be excluded from the step count\n        acc._meta.displayedStepCount--;\n      }\n\n      return acc;\n    },\n    { _meta: { totalStepCount: steps.length, displayedStepCount: steps.length } } as Components & {\n      _meta: { totalStepCount: number; displayedStepCount: number };\n    }\n  );\n\n  return tour;\n}\n\nexport type { Content, Tours };\nexport { tours };\n", "import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { useTracking } from '../../features/Tracking';\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from './utils/constants';\nimport { migrateTours } from './utils/migrations';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\n/**\n * Derive the union of all string literal values from GUIDED_TOUR_REQUIRED_ACTIONS\n * (ie didCreateContentTypeSchema | didCreateContent etc...)\n */\ntype ValueOf<T> = T[keyof T];\ntype NonEmptyValueOf<T> = T extends Record<string, never> ? never : ValueOf<T>;\nexport type CompletedActions = NonEmptyValueOf<ValueOf<typeof GUIDED_TOUR_REQUIRED_ACTIONS>>[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'previous_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'go_to_step';\n      payload: {\n        tourName: ValidTourName;\n        step: number;\n      };\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_all_tours';\n    }\n  | {\n      type: 'reset_all_tours';\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: CompletedActions;\n    }\n  | {\n      type: 'remove_completed_action';\n      payload: ValueOf<CompletedActions>;\n    };\n\ntype TourState = Record<ValidTourName, { currentStep: number; isCompleted: boolean }>;\ntype State = {\n  tours: TourState;\n  enabled: boolean;\n  completedActions: CompletedActions;\n};\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('GuidedTour');\n\nconst getInitialTourState = (tours: Tours) => {\n  return Object.keys(tours).reduce((acc, tourName) => {\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      isCompleted: false,\n    };\n\n    return acc;\n  }, {} as TourState);\n};\n\nconst getCompletedTours = (tours: TourState): ValidTourName[] => {\n  return Object.keys(tours).filter(\n    (tourName) => tours[tourName as ValidTourName].isCompleted\n  ) as ValidTourName[];\n};\n\nconst areAllToursCompleted = (tours: TourState) => Object.values(tours).every((t) => t.isCompleted);\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n      const tourLength = guidedTours[action.payload]._meta.totalStepCount;\n\n      const nextStep = currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep >= tourLength;\n    }\n\n    if (action.type === 'previous_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n\n      if (currentStep <= 0) return;\n\n      const previousStep = currentStep - 1;\n      draft.tours[action.payload].currentStep = previousStep;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'remove_completed_action') {\n      draft.completedActions = draft.completedActions.filter(\n        (completedAction) => completedAction !== action.payload\n      );\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n\n    if (action.type === 'reset_all_tours') {\n      draft.enabled = true;\n      draft.tours = getInitialTourState(guidedTours);\n      draft.completedActions = [];\n    }\n\n    if (action.type === 'go_to_step') {\n      draft.tours[action.payload.tourName].currentStep = action.payload.step;\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\nconst GuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const { trackUsage } = useTracking();\n  const [storedTours, setStoredTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: getInitialTourState(guidedTours),\n    enabled,\n    completedActions: [],\n  });\n  const migratedTourState = migrateTours(storedTours);\n  const [state, dispatch] = React.useReducer(reducer, migratedTourState);\n\n  // Sync local storage\n  React.useEffect(() => {\n    setStoredTours(state);\n  }, [state, setStoredTours]);\n\n  // Derive all completed tours from state\n  const currentAllCompletedState = areAllToursCompleted(state.tours);\n  // Store completed state in ref to survive a re-render,\n  // when current state changes this will persist and be used for comparison\n  const previousAllCompletedStateRef = React.useRef(currentAllCompletedState);\n  React.useEffect(() => {\n    const previousAllCompletedState = previousAllCompletedStateRef.current;\n    // When the previous state was not complete but the current state is now complete, fire the event\n    if (!previousAllCompletedState && currentAllCompletedState) {\n      trackUsage('didCompleteGuidedTour', { name: 'all' });\n    }\n\n    // When the current state has all tours completed so will the previous state, the tracking event won't fire again\n    previousAllCompletedStateRef.current = currentAllCompletedState;\n  }, [currentAllCompletedState, trackUsage]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { GuidedTourContext, useGuidedTour, reducer, getCompletedTours };\n", "import { useEffect, useState } from 'react';\n\nimport { useInitQuery } from '../services/admin';\n\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\n  const [value, setValue] = useState<T>(() => {\n    const stickyValue = window.localStorage.getItem(key);\n\n    if (stickyValue !== null) {\n      try {\n        return JSON.parse(stickyValue);\n      } catch {\n        // JSON.parse fails when the stored value is a primitive\n        return stickyValue;\n      }\n    }\n\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue] as const;\n};\n\n// Same as usePersistentState, but scoped to the current instance of Strapi\n// useful for storing state that should not be shared across different instances of Strapi running on localhost\nconst useScopedPersistentState = <T>(key: string, defaultValue: T) => {\n  const { data: initData } = useInitQuery();\n  const { uuid } = initData ?? {};\n\n  const namespacedKey = `${key}:${uuid}`;\n  return usePersistentState<T>(namespacedKey, defaultValue);\n};\n\nexport { usePersistentState, useScopedPersistentState };\n", "import { produce } from 'immer';\n\nimport { tours } from '../Tours';\n\nimport type { State, ValidTourName } from '../Context';\n\n/**\n * Migrates tours added or removed from the tours object\n */\nconst migrateTours = (storedTourState: State) => {\n  const storedTourNames = Object.keys(storedTourState.tours) as ValidTourName[];\n  const currentTourNames = Object.keys(tours) as ValidTourName[];\n\n  return produce(storedTourState, (draft) => {\n    // Add new tours that don't exist in stored state\n    currentTourNames.forEach((tourName) => {\n      if (!storedTourNames.includes(tourName)) {\n        draft.tours[tourName] = {\n          currentStep: 0,\n          isCompleted: false,\n        };\n      }\n    });\n\n    // Remove tours that no longer exist in current tours\n    storedTourNames.forEach((tourName) => {\n      if (!currentTourNames.includes(tourName)) {\n        delete draft.tours[tourName];\n      }\n    });\n  });\n};\n\nexport { migrateTours };\n", "import * as React from 'react';\n\nimport {\n  Popover,\n  Box,\n  Flex,\n  Button,\n  Typography,\n  LinkButton,\n  FlexProps,\n} from '@strapi/design-system';\nimport { FormattedMessage, type MessageDescriptor } from 'react-intl';\nimport { To, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useTracking } from '../../../features/Tracking';\nimport { useGuidedTour, type ValidTourName } from '../Context';\nimport { tours } from '../Tours';\n\n/* -------------------------------------------------------------------------------------------------\n * Common Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst StepCount = ({\n  tourName,\n  displayedCurrentStep,\n  displayedTourLength,\n}: {\n  tourName: ValidTourName;\n  displayedCurrentStep?: number;\n  displayedTourLength?: number;\n}) => {\n  const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n  const currentStep = displayedCurrentStep ?? state.tours[tourName].currentStep + 1;\n  const displayedStepCount = displayedTourLength ?? tours[tourName]._meta.displayedStepCount;\n\n  return (\n    <Typography variant=\"omega\" fontSize=\"12px\">\n      <FormattedMessage\n        id=\"tours.stepCount\"\n        defaultMessage=\"Step {currentStep} of {tourLength}\"\n        values={{ currentStep, tourLength: displayedStepCount }}\n      />\n    </Typography>\n  );\n};\n\nconst GotItAction = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <Button onClick={onClick}>\n      <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\n    </Button>\n  );\n};\n\nexport type DefaultActionsProps = {\n  showSkip?: boolean;\n  showPrevious?: boolean;\n  to?: To;\n  onNextStep?: () => void;\n  onPreviousStep?: () => void;\n  tourName: ValidTourName;\n};\nconst DefaultActions = ({\n  showSkip,\n  showPrevious,\n  to,\n  tourName,\n  onNextStep,\n  onPreviousStep,\n}: DefaultActionsProps) => {\n  const { trackUsage } = useTracking();\n  const dispatch = useGuidedTour('GuidedTourPopover', (s) => s.dispatch);\n  const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n  const currentStep = state.tours[tourName].currentStep + 1;\n  const actualTourLength = tours[tourName]._meta.totalStepCount;\n\n  const handleSkip = () => {\n    trackUsage('didSkipGuidedTour', { name: tourName });\n    dispatch({ type: 'skip_tour', payload: tourName });\n  };\n\n  const handleNextStep = () => {\n    if (currentStep === actualTourLength) {\n      trackUsage('didCompleteGuidedTour', { name: tourName });\n    }\n\n    if (onNextStep) {\n      onNextStep();\n    } else {\n      dispatch({ type: 'next_step', payload: tourName });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (onPreviousStep) {\n      onPreviousStep();\n    } else {\n      dispatch({ type: 'previous_step', payload: tourName });\n    }\n  };\n\n  return (\n    <Flex gap={2}>\n      {showSkip && (\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          <FormattedMessage id=\"tours.skip\" defaultMessage=\"Skip\" />\n        </Button>\n      )}\n      {!showSkip && showPrevious && (\n        <Button variant=\"tertiary\" onClick={handlePreviousStep}>\n          <FormattedMessage id=\"tours.previous\" defaultMessage=\"Previous\" />\n        </Button>\n      )}\n      {to ? (\n        <LinkButton tag={NavLink} to={to} onClick={handleNextStep}>\n          <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n        </LinkButton>\n      ) : (\n        <Button onClick={handleNextStep}>\n          <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n        </Button>\n      )}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype WithChildren = {\n  children: React.ReactNode;\n  id?: never;\n  defaultMessage?: never;\n};\n\ntype WithIntl = {\n  children?: undefined;\n  id: MessageDescriptor['id'];\n  defaultMessage: MessageDescriptor['defaultMessage'];\n  withArrow?: boolean;\n};\n\ntype WithActionsChildren = {\n  children: React.ReactNode;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n  showPrevious?: boolean;\n};\n\ntype WithActionsProps = {\n  children?: undefined;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n  showPrevious?: boolean;\n};\n\ntype StepProps = WithChildren | WithIntl;\ntype ActionsProps = WithActionsChildren | WithActionsProps;\n\ntype Step = {\n  Root: React.ForwardRefExoticComponent<\n    React.ComponentProps<typeof Popover.Content> & { withArrow?: boolean }\n  >;\n  Title: (props: StepProps) => React.ReactNode;\n  Content: (\n    props: StepProps & {\n      values?: Record<string, React.ReactNode | ((chunks: React.ReactNode) => React.ReactNode)>;\n    }\n  ) => React.ReactNode;\n  Actions: (props: ActionsProps & { to?: string } & FlexProps) => React.ReactNode;\n};\n\nconst ActionsContainer = styled(Flex)`\n  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};\n`;\n\n/**\n * TODO:\n * We should probably move all arrow styles + svg to the DS\n */\nconst PopoverArrow = styled(Popover.Arrow)`\n  fill: ${({ theme }) => theme.colors.neutral0};\n  transform: translateY(-16px) rotate(-90deg);\n`;\n\nconst createStepComponents = (tourName: ValidTourName): Step => ({\n  Root: React.forwardRef(({ withArrow = true, ...props }, ref) => {\n    return (\n      <Popover.Content\n        ref={ref}\n        aria-labelledby=\"guided-tour-title\"\n        side=\"top\"\n        align=\"center\"\n        style={{ border: 'none' }}\n        onClick={(e) => e.stopPropagation()}\n        {...props}\n      >\n        {withArrow && (\n          <PopoverArrow asChild>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"23\"\n              height=\"25\"\n              viewBox=\"0 0 23 25\"\n              fill=\"none\"\n            >\n              <path d=\"M11 24.5L1.82843 15.3284C0.266332 13.7663 0.26633 11.2337 1.82843 9.67157L11 0.5L23 12.5L11 24.5Z\" />\n            </svg>\n          </PopoverArrow>\n        )}\n        <Flex width=\"360px\" direction=\"column\" alignItems=\"start\">\n          {props.children}\n        </Flex>\n      </Popover.Content>\n    );\n  }),\n\n  Title: (props) => {\n    return (\n      <Box paddingTop={5} paddingLeft={5} paddingRight={5} paddingBottom={1} width=\"100%\">\n        {'children' in props ? (\n          props.children\n        ) : (\n          <Typography tag=\"h1\" id=\"guided-tour-title\" variant=\"omega\" fontWeight=\"bold\">\n            <FormattedMessage id={props.id} defaultMessage={props.defaultMessage} />\n          </Typography>\n        )}\n      </Box>\n    );\n  },\n\n  Content: (props) => (\n    <Box paddingBottom={5} paddingLeft={5} paddingRight={5} width=\"100%\">\n      {'children' in props ? (\n        props.children\n      ) : (\n        <Typography tag=\"div\" variant=\"omega\">\n          <FormattedMessage\n            id={props.id}\n            defaultMessage={props.defaultMessage}\n            values={props.values}\n          />\n        </Typography>\n      )}\n    </Box>\n  ),\n\n  Actions: ({\n    showStepCount = true,\n    showPrevious = true,\n    showSkip = false,\n    to,\n    children,\n    ...flexProps\n  }) => {\n    return (\n      <ActionsContainer\n        width=\"100%\"\n        padding={3}\n        paddingLeft={5}\n        justifyContent={showStepCount ? 'space-between' : 'flex-end'}\n        {...flexProps}\n      >\n        {children ? (\n          children\n        ) : (\n          <>\n            {showStepCount && <StepCount tourName={tourName} />}\n            <DefaultActions\n              tourName={tourName}\n              showSkip={showSkip}\n              showPrevious={!showSkip && showPrevious}\n              to={to}\n            />\n          </>\n        )}\n      </ActionsContainer>\n    );\n  },\n});\n\nexport type { Step };\nexport { createStepComponents, GotItAction, StepCount, DefaultActions };\n", "import * as React from 'react';\n\nimport { Box, Link } from '@strapi/design-system';\n\nimport { type CompletedActions } from '../Context';\nimport { type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"top\" sideOffset={32} withArrow={false}>\n    <Step.Title\n      id=\"tours.apiTokens.Introduction.title\"\n      defaultMessage=\"Last but not least, API tokens\"\n    />\n    <Step.Content\n      id=\"tours.apiTokens.Introduction.content\"\n      defaultMessage=\"Control API access with highly customizable permissions.\"\n    />\n    <Step.Actions showSkip />\n  </Step.Root>\n);\n\nconst ManageAPIToken = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"end\">\n    <Step.Title id=\"tours.apiTokens.ManageAPIToken.title\" defaultMessage=\"Manage an API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.ManageAPIToken.content\"\n      defaultMessage='Click the \"Pencil\" icon to view and update an existing API token.'\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst ViewAPIToken = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"end\">\n    <Step.Title id=\"tours.apiTokens.ViewAPIToken.title\" defaultMessage=\"View API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.ViewAPIToken.content\"\n      defaultMessage='Click the \"View token\" button to see your API token.'\n    />\n    <Step.Actions>\n      <StepCount tourName=\"apiTokens\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst CopyAPIToken = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"start\" sideOffset={-5}>\n    <Step.Title id=\"tours.apiTokens.CopyAPIToken.title\" defaultMessage=\"Copy your new API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.CopyAPIToken.content\"\n      defaultMessage=\"Copy your API token\"\n      values={{\n        spacer: <Box paddingTop={2} />,\n        a: (msg: React.ReactNode) => (\n          <Link isExternal href=\"https://docs.strapi.io/cms/features/api-tokens#usage\">\n            {msg}\n          </Link>\n        ),\n      }}\n    />\n    <Step.Actions>\n      <StepCount tourName=\"apiTokens\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" align=\"start\">\n    <Step.Title\n      id=\"tours.apiTokens.FinalStep.title\"\n      defaultMessage=\"Congratulations, it's time to deploy your application!\"\n    />\n    <Step.Content\n      id=\"tours.apiTokens.FinalStep.content\"\n      defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\n    />\n    <Step.Actions showPrevious={false} showStepCount={false} to=\"/\" />\n  </Step.Root>\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\n\nexport const apiTokensSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  {\n    name: 'ManageAPIToken',\n    content: ManageAPIToken,\n  },\n  {\n    name: 'ViewAPIToken',\n    content: ViewAPIToken,\n  },\n  {\n    name: 'CopyAPIToken',\n    content: CopyAPIToken,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.apiTokens.copyToken),\n  },\n] as const;\n", "import { useParams } from 'react-router-dom';\n\nimport { CompletedActions, useGuidedTour } from '../Context';\nimport { tours, type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { DefaultActions, DefaultActionsProps, GotItAction, StepCount } from './Step';\n\nconst ContentManagerActions = ({\n  isActionRequired = false,\n  ...props\n}: Omit<DefaultActionsProps, 'tourName'> & {\n  isActionRequired?: boolean;\n}) => {\n  const { collectionType } = useParams();\n\n  const state = useGuidedTour('ContentManagerActions', (s) => s.state);\n  const dispatch = useGuidedTour('ContentManagerActions', (s) => s.dispatch);\n\n  const isSingleType = collectionType === 'single-types';\n\n  const currentStepOffset = state.tours.contentManager.currentStep + 1;\n  const displayedCurrentStep = (() => {\n    if (isSingleType && currentStepOffset > collectionTypeSpecificSteps.length) {\n      return currentStepOffset - collectionTypeSpecificSteps.length;\n    }\n\n    return currentStepOffset;\n  })();\n\n  // For single types we subtract all contentTypeSpecificSteps\n  const displayedTourLength = isSingleType\n    ? tours.contentManager._meta.displayedStepCount - collectionTypeSpecificSteps.length\n    : tours.contentManager._meta.displayedStepCount;\n\n  const handleNextStep = () => {\n    if (isSingleType && state.tours.contentManager.currentStep === 0) {\n      // The tours diverge after the first step, on next click skip all the collection type specific steps\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentManager', step: collectionTypeSpecificSteps.length + 1 },\n      });\n    } else {\n      dispatch({\n        type: 'next_step',\n        payload: 'contentManager',\n      });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (\n      isSingleType &&\n      // Check the currentStep is the step after the collection type specific steps\n      state.tours.contentManager.currentStep === collectionTypeSpecificSteps.length + 1\n    ) {\n      dispatch({\n        type: 'go_to_step',\n        payload: {\n          tourName: 'contentManager',\n          // Go to the step just before the collection type specific steps\n          step: state.tours.contentManager.currentStep - collectionTypeSpecificSteps.length - 1,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'previous_step',\n        payload: 'contentManager',\n      });\n    }\n  };\n\n  if (isActionRequired) {\n    return (\n      <>\n        <StepCount\n          tourName=\"contentManager\"\n          displayedCurrentStep={displayedCurrentStep}\n          displayedTourLength={displayedTourLength}\n        />\n        <GotItAction onClick={handleNextStep} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <StepCount\n        tourName=\"contentManager\"\n        displayedCurrentStep={displayedCurrentStep}\n        displayedTourLength={displayedTourLength}\n      />\n      <DefaultActions\n        tourName=\"contentManager\"\n        onNextStep={handleNextStep}\n        onPreviousStep={handlePreviousStep}\n        {...props}\n      />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => {\n  return (\n    <Step.Root side=\"top\" sideOffset={33} withArrow={false}>\n      <Step.Title id=\"tours.contentManager.Introduction.title\" defaultMessage=\"Content manager\" />\n      <Step.Content\n        id=\"tours.contentManager.Introduction.content\"\n        defaultMessage=\"Create and manage content from your collection types and single types.\"\n      />\n      <Step.Actions>\n        <ContentManagerActions showSkip />\n      </Step.Actions>\n    </Step.Root>\n  );\n};\n\nconst CreateNewEntry = ({ Step }: StepContentProps) => {\n  return (\n    <Step.Root side=\"bottom\" align=\"end\">\n      <Step.Title\n        id=\"tours.contentManager.CreateNewEntry.title\"\n        defaultMessage=\"Create new entry\"\n      />\n      <Step.Content\n        id=\"tours.contentManager.CreateNewEntry.content\"\n        defaultMessage='Click the \"Create new entry\" button to create and publish a new entry for this collection type.'\n      />\n      <Step.Actions>\n        <ContentManagerActions showPrevious />\n      </Step.Actions>\n    </Step.Root>\n  );\n};\n\nconst Fields = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={-12}>\n    <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\n    <Step.Content\n      id=\"tours.contentManager.Fields.content\"\n      defaultMessage=\"First, fill in the fields you created in the Content-Type Builder.\"\n    />\n    <Step.Actions>\n      <ContentManagerActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Publish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"left\" align=\"center\">\n    <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\n    <Step.Content\n      id=\"tours.contentManager.Publish.content\"\n      defaultMessage='Then click the \"Publish\" button to make your content available through the content API.'\n    />\n    <Step.Actions>\n      <ContentManagerActions isActionRequired />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title\n      id=\"tours.contentManager.FinalStep.title\"\n      defaultMessage=\"Time to setup API tokens!\"\n    />\n    <Step.Content\n      id=\"tours.contentManager.FinalStep.content\"\n      defaultMessage=\"Now that you've created and published an entry, let's setup an API token to manage access to your content.\"\n    />\n    <Step.Actions showStepCount={false} showPrevious={false} to=\"/settings/api-tokens\" />\n  </Step.Root>\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\nconst collectionTypeSpecificSteps = [\n  {\n    name: 'CreateNewEntry',\n    content: CreateNewEntry,\n  },\n];\n\nexport const contentManagerSteps = [\n  {\n    name: 'Introduction',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n    content: Introduction,\n  },\n  ...collectionTypeSpecificSteps,\n  {\n    name: 'Fields',\n    content: Fields,\n  },\n  {\n    name: 'Publish',\n    content: Publish,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentManager.createContent),\n  },\n] as const;\n", "import { UID } from '@strapi/types';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetGuidedTourMetaQuery } from '../../../services/admin';\nimport { CompletedActions } from '../Context';\nimport { type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={33} withArrow={false}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.Introduction.title\"\n      defaultMessage=\"Content-Type Builder\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Introduction.content\"\n      defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n    />\n    <Step.Actions showPrevious={false} />\n  </Step.Root>\n);\n\nconst CollectionTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n      defaultMessage=\"Collection Types\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n      defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst SingleTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.SingleTypes.title\" defaultMessage=\"Single Types\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.SingleTypes.content\"\n      defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst Components = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Components.content\"\n      defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst YourTurn = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.YourTurn.title\" defaultMessage=\"Your turn\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.YourTurn.content\"\n      defaultMessage=\"Create a collection type or single type and configure it.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst AddFields = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\">\n    <Step.Title\n      id=\"tours.contentTypeBuilder.AddFields.title\"\n      defaultMessage=\"Don't forget to add a field to your content type\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AddFields.content\"\n      defaultMessage=\"Add the fields your content needs such as text, media and relations.\"\n    />\n    <Step.Actions>\n      <StepCount tourName=\"contentTypeBuilder\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Save = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title id=\"tours.contentTypeBuilder.Save.title\" defaultMessage=\"Save before you leave!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Save.content\"\n      defaultMessage=\"Save the changes you made here before leaving this page.\"\n    />\n    <Step.Actions>\n      <StepCount tourName=\"contentTypeBuilder\" />\n      <GotItAction\n        onClick={() => {\n          // Ensure the completed action is removed\n          // in the event the user already has a schema but is still doing the tour\n          dispatch({\n            type: 'remove_completed_action',\n            payload: GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema,\n          });\n          dispatch({ type: 'next_step', payload: 'contentTypeBuilder' });\n        }}\n      />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n  const { '*': routeParams } = useParams();\n  // Get the uid from the params\n  const uid = routeParams?.split('/').pop();\n  const contentType = uid ? guidedTourMeta?.data?.schemas?.[uid as UID.ContentType] : null;\n  const contentTypeKindDictionary = {\n    collectionType: 'collection-types',\n    singleType: 'single-types',\n  };\n\n  const to = contentType\n    ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}`\n    : '/content-manager';\n\n  return (\n    <Step.Root side=\"right\">\n      <Step.Title\n        id=\"tours.contentTypeBuilder.Finish.title\"\n        defaultMessage=\"It's time to create content!\"\n      />\n      <Step.Content\n        id=\"tours.contentTypeBuilder.Finish.content\"\n        defaultMessage=\"Now that you created content types, you'll be able to create content in the content manager.\"\n      />\n      <Step.Actions showStepCount={false} showPrevious={false} to={to} />\n    </Step.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\n\nexport const contentTypeBuilderSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  {\n    name: 'CollectionTypes',\n    content: CollectionTypes,\n  },\n  {\n    name: 'SingleTypes',\n    content: SingleTypes,\n  },\n  {\n    name: 'Components',\n    content: Components,\n  },\n  {\n    name: 'YourTurn',\n    content: YourTurn,\n  },\n  {\n    name: 'AddFields',\n    content: AddFields,\n  },\n  {\n    name: 'Save',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),\n    content: Save,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n  },\n] as const;\n"],
  "mappings": "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",
  "names": ["React", "tours", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "Introduction", "Finish", "import_jsx_runtime", "Introduction", "Finish", "import_jsx_runtime"]
}
