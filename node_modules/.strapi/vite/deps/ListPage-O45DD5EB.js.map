{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/ListPage.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/components/RoleRow.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Button,\n  Dialog,\n  Table,\n  Tbody,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Duplicate, Pencil, Plus, Trash } from '@strapi/icons';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAdminRoles, AdminRole } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useFetchClient } from '../../../../hooks/useFetchClient';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isFetchError } from '../../../../utils/getFetchClient';\n\nimport { RoleRow, RoleRowProps } from './components/RoleRow';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector(selectAdminPermissions);\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const [isWarningDeleteAllOpened, setIsWarningDeleteAllOpenend] = React.useState(false);\n  const [{ query }] = useQueryParams<{ _q?: string }>();\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canCreate, canDelete, canRead, canUpdate },\n  } = useRBAC(permissions.settings?.roles);\n\n  const { roles, refetch: refetchRoles } = useAdminRoles(\n    { filters: query?._q ? { name: { $containsi: query._q } } : undefined },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: isLoadingForPermissions || !canRead,\n    }\n  );\n\n  const navigate = useNavigate();\n  const [{ roleToDelete }, dispatch] = React.useReducer(reducer, initialState);\n  const { post } = useFetchClient();\n\n  const handleDeleteData = async () => {\n    try {\n      dispatch({\n        type: 'ON_REMOVE_ROLES',\n      });\n\n      await post('/admin/roles/batch-delete', {\n        ids: [roleToDelete],\n      });\n\n      await refetchRoles();\n\n      dispatch({\n        type: 'RESET_DATA_TO_DELETE',\n      });\n    } catch (error) {\n      if (isFetchError(error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      }\n    }\n  };\n\n  const handleNewRoleClick = () => navigate('new');\n\n  const handleToggleModal = () => setIsWarningDeleteAllOpenend((prev) => !prev);\n\n  const handleClickDelete = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (role.usersCount) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'Roles.ListPage.notification.delete-not-allowed' }),\n      });\n    } else {\n      dispatch({\n        type: 'SET_ROLE_TO_DELETE',\n        id: role.id,\n      });\n\n      handleToggleModal();\n    }\n  };\n\n  const handleClickDuplicate = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    navigate(`duplicate/${role.id}`);\n  };\n\n  const rowCount = roles.length + 1;\n  const colCount = 6;\n\n  if (isLoadingForPermissions) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={\n          canCreate ? (\n            <Button onClick={handleNewRoleClick} startIcon={<Plus />} size=\"S\">\n              {formatMessage({\n                id: 'Settings.roles.list.button.add',\n                defaultMessage: 'Add new role',\n              })}\n            </Button>\n          ) : null\n        }\n        title={formatMessage({\n          id: 'global.roles',\n          defaultMessage: 'roles',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.roles.list.description',\n          defaultMessage: 'List of roles',\n        })}\n      />\n      {canRead && (\n        <Layouts.Action\n          startActions={\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                {\n                  target: formatMessage({\n                    id: 'global.roles',\n                    defaultMessage: 'roles',\n                  }),\n                }\n              )}\n            />\n          }\n        />\n      )}\n      {canRead && (\n        <Layouts.Content>\n          <Table\n            colCount={colCount}\n            rowCount={rowCount}\n            footer={\n              canCreate ? (\n                <TFooter cursor=\"pointer\" onClick={handleNewRoleClick} icon={<Plus />}>\n                  {formatMessage({\n                    id: 'Settings.roles.list.button.add',\n                    defaultMessage: 'Add new role',\n                  })}\n                </TFooter>\n              ) : null\n            }\n          >\n            <Thead>\n              <Tr aria-rowindex={1}>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.name',\n                      defaultMessage: 'Name',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.description',\n                      defaultMessage: 'Description',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.users',\n                      defaultMessage: 'Users',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <VisuallyHidden>\n                    {formatMessage({\n                      id: 'global.actions',\n                      defaultMessage: 'Actions',\n                    })}\n                  </VisuallyHidden>\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {roles?.map((role, index) => (\n                <RoleRow\n                  cursor=\"pointer\"\n                  key={role.id}\n                  id={role.id}\n                  name={role.name}\n                  description={role.description}\n                  usersCount={role.usersCount}\n                  icons={\n                    [\n                      canCreate &&\n                        ({\n                          onClick: handleClickDuplicate(role),\n                          label: formatMessage({\n                            id: 'app.utils.duplicate',\n                            defaultMessage: 'Duplicate',\n                          }),\n                          children: <Duplicate />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canUpdate &&\n                        ({\n                          onClick: () => navigate(role.id.toString()),\n                          label: formatMessage({ id: 'app.utils.edit', defaultMessage: 'Edit' }),\n                          children: <Pencil />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canDelete &&\n                        ({\n                          onClick: handleClickDelete(role),\n                          label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n                          children: <Trash />,\n                        } satisfies RoleRowProps['icons'][number]),\n                    ].filter(Boolean) as RoleRowProps['icons']\n                  }\n                  rowIndex={index + 2}\n                  canUpdate={canUpdate}\n                />\n              ))}\n            </Tbody>\n          </Table>\n        </Layouts.Content>\n      )}\n      <Dialog.Root open={isWarningDeleteAllOpened} onOpenChange={handleToggleModal}>\n        <ConfirmDialog onConfirm={handleDeleteData} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Reducer\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * TODO: do we actually need this reducer? It's not doing a lot...\n */\n\ninterface State {\n  roleToDelete: null | AdminRole['id'];\n  showModalConfirmButtonLoading: boolean;\n  shouldRefetchData: boolean;\n}\n\nconst initialState = {\n  roleToDelete: null,\n  showModalConfirmButtonLoading: false,\n  shouldRefetchData: false,\n} satisfies State;\n\ninterface SetRoleToDeleteAction extends Pick<AdminRole, 'id'> {\n  type: 'SET_ROLE_TO_DELETE';\n}\n\ninterface ResetDataToDeleteAction {\n  type: 'RESET_DATA_TO_DELETE';\n}\n\ninterface OnRemoveRolesAction {\n  type: 'ON_REMOVE_ROLES';\n}\n\ninterface OnRemoveRolesSucceededAction {\n  type: 'ON_REMOVE_ROLES_SUCCEEDED';\n}\n\ntype Action =\n  | SetRoleToDeleteAction\n  | ResetDataToDeleteAction\n  | OnRemoveRolesAction\n  | OnRemoveRolesSucceededAction;\n\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'ON_REMOVE_ROLES': {\n        draftState.showModalConfirmButtonLoading = true;\n        break;\n      }\n      case 'ON_REMOVE_ROLES_SUCCEEDED': {\n        draftState.shouldRefetchData = true;\n        draftState.roleToDelete = null;\n        break;\n      }\n      case 'RESET_DATA_TO_DELETE': {\n        draftState.shouldRefetchData = false;\n        draftState.roleToDelete = null;\n        draftState.showModalConfirmButtonLoading = false;\n        break;\n      }\n      case 'SET_ROLE_TO_DELETE': {\n        draftState.roleToDelete = action.id;\n\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.roles.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage };\n", "import { Box, Flex, IconButton, IconButtonProps, Td, Tr, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\n\ninterface RoleRowProps extends Pick<AdminRole, 'id' | 'name' | 'description' | 'usersCount'> {\n  icons: Array<Required<Pick<IconButtonProps, 'children' | 'label' | 'onClick'>>>;\n  rowIndex: number;\n  canUpdate?: boolean;\n  cursor?: string;\n}\n\nconst RoleRow = ({\n  id,\n  name,\n  description,\n  usersCount,\n  icons,\n  rowIndex,\n  canUpdate,\n  cursor,\n}: RoleRowProps) => {\n  const { formatMessage } = useIntl();\n  const [, editObject] = icons;\n\n  const usersCountText = formatMessage(\n    {\n      id: `Roles.RoleRow.user-count`,\n      defaultMessage: '{number, plural, =0 {#  user} one {#  user} other {# users}}',\n    },\n    { number: usersCount }\n  );\n\n  return (\n    <Tr\n      cursor={cursor}\n      aria-rowindex={rowIndex}\n      key={id}\n      // @ts-expect-error – the prop uses `HTMLButtonElement` but we just specify `HTMLElement`\n      onClick={canUpdate ? editObject.onClick : undefined}\n    >\n      <Td maxWidth={`13rem`}>\n        <Typography ellipsis textColor=\"neutral800\">\n          {name}\n        </Typography>\n      </Td>\n      <Td maxWidth={`25rem`}>\n        <Typography ellipsis textColor=\"neutral800\">\n          {description}\n        </Typography>\n      </Td>\n      <Td>\n        <Typography textColor=\"neutral800\">{usersCountText}</Typography>\n      </Td>\n      <Td>\n        <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\n          {icons.map((icon, i) => {\n            if (icon) {\n              return (\n                <Box key={icon.label} paddingLeft={i === 0 ? 0 : 1}>\n                  <IconButton {...icon} variant=\"ghost\" />\n                </Box>\n              );\n            }\n\n            return null;\n          })}\n        </Flex>\n      </Td>\n    </Tr>\n  );\n};\n\nexport { RoleRow };\nexport type { RoleRowProps };\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime"]
}
