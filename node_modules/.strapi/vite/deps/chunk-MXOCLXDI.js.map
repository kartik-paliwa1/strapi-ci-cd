{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/BackButton.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Link, LinkProps } from '@strapi/design-system';\nimport { ArrowLeft } from '@strapi/icons';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { NavLink, type To, useLocation, useNavigate, useNavigationType } from 'react-router-dom';\n\nimport { createContext } from '../components/Context';\n\n/* -------------------------------------------------------------------------------------------------\n * HistoryProvider\n * -----------------------------------------------------------------------------------------------*/\ninterface HistoryState {\n  /**\n   * The history of the user's navigation within our application\n   * during their current session.\n   */\n  history: string[];\n  /**\n   * The index of the current location in the history array.\n   */\n  currentLocationIndex: number;\n  /**\n   * The current location of the user within our application.\n   */\n  currentLocation: string;\n  /**\n   * Whether the user can go back in the history.\n   */\n  canGoBack: boolean;\n}\n\ninterface HistoryContextValue extends HistoryState {\n  /**\n   * @description Push a new state to the history. You can\n   * either pass a string or an object.\n   */\n  pushState: (\n    path:\n      | {\n          to: string;\n          search: string;\n        }\n      | string\n  ) => void;\n  /**\n   * @description Go back in the history. This calls `navigate(-1)` internally\n   * to keep the browser in sync with the application state.\n   */\n  goBack: () => void;\n}\n\nconst [Provider, useHistory] = createContext<HistoryContextValue>('History', {\n  history: [],\n  currentLocationIndex: 0,\n  currentLocation: '',\n  canGoBack: false,\n  pushState: () => {\n    throw new Error('You must use the `HistoryProvider` to access the `pushState` function.');\n  },\n  goBack: () => {\n    throw new Error('You must use the `HistoryProvider` to access the `goBack` function.');\n  },\n});\n\ninterface HistoryProviderProps {\n  children: React.ReactNode;\n}\n\nconst HistoryProvider = ({ children }: HistoryProviderProps) => {\n  const location = useLocation();\n  const navigationType = useNavigationType();\n  const navigate = useNavigate();\n  const [state, dispatch] = React.useReducer(reducer, {\n    history: [],\n    currentLocationIndex: 0,\n    currentLocation: '',\n    canGoBack: false,\n  });\n\n  const isGoingBack = React.useRef(false);\n\n  const pushState: HistoryContextValue['pushState'] = React.useCallback((path) => {\n    dispatch({\n      type: 'PUSH_STATE',\n      payload: typeof path === 'string' ? { to: path, search: '' } : path,\n    });\n  }, []);\n\n  const goBack: HistoryContextValue['goBack'] = React.useCallback(() => {\n    /**\n     * Perform the browser back action, dispatch the goBack action to keep the state in sync\n     * and set the ref to avoid an infinite loop and incorrect state pushing\n     */\n    navigate(-1);\n    dispatch({ type: 'GO_BACK' });\n    isGoingBack.current = true;\n  }, [navigate]);\n\n  /**\n   * This is a semi-listener pattern to keep the `canGoBack` state in sync.\n   */\n  const prevIndex = React.useRef(state.currentLocationIndex);\n  React.useEffect(() => {\n    if (state.currentLocationIndex !== prevIndex.current) {\n      dispatch({\n        type: 'SET_CAN_GO_BACK',\n        payload: state.currentLocationIndex > 1 && state.history.length > 1,\n      });\n      prevIndex.current = state.currentLocationIndex;\n    }\n  }, [prevIndex, state.currentLocationIndex, state.history.length]);\n\n  /**\n   * This effect is responsible for pushing the new state to the history\n   * when the user navigates to a new location assuming they're not going back.\n   */\n  React.useLayoutEffect(() => {\n    if (isGoingBack.current) {\n      isGoingBack.current = false;\n    } else if (navigationType === 'REPLACE') {\n      // Prevent appending to the history when the location changes via a replace:true navigation\n      dispatch({\n        type: 'REPLACE_STATE',\n        payload: { to: location.pathname, search: location.search },\n      });\n    } else {\n      // this should only occur on link movements, not back/forward clicks\n      dispatch({\n        type: 'PUSH_STATE',\n        payload: { to: location.pathname, search: location.search },\n      });\n    }\n  }, [dispatch, location.pathname, location.search, navigationType]);\n\n  return (\n    <Provider pushState={pushState} goBack={goBack} {...state}>\n      {children}\n    </Provider>\n  );\n};\n\ntype HistoryActions =\n  | {\n      type: 'PUSH_STATE';\n      payload: {\n        to: string;\n        search: string;\n      };\n    }\n  | {\n      type: 'REPLACE_STATE';\n      payload: {\n        to: string;\n        search: string;\n      };\n    }\n  | {\n      type: 'GO_BACK';\n    }\n  | {\n      type: 'SET_CAN_GO_BACK';\n      payload: boolean;\n    };\n\nconst reducer = (state: HistoryState, action: HistoryActions) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case 'PUSH_STATE': {\n        const path = `${action.payload.to}${action.payload.search}`;\n        if (state.currentLocationIndex === state.history.length) {\n          // add the new place\n          draft.history = [...state.history, path];\n        } else {\n          // delete all the history after the current place and then add the new place\n          draft.history = [...state.history.slice(0, state.currentLocationIndex), path];\n        }\n\n        draft.currentLocation = path;\n        draft.currentLocationIndex += 1;\n\n        break;\n      }\n      case 'REPLACE_STATE': {\n        const path = `${action.payload.to}${action.payload.search}`;\n        draft.history = [...state.history.slice(0, state.currentLocationIndex - 1), path];\n        draft.currentLocation = path;\n        break;\n      }\n      case 'GO_BACK': {\n        const newIndex = state.currentLocationIndex - 1;\n\n        draft.currentLocation = state.history[newIndex - 1];\n        draft.currentLocationIndex = newIndex;\n        break;\n      }\n      case 'SET_CAN_GO_BACK': {\n        draft.canGoBack = action.payload;\n        break;\n      }\n      default:\n        break;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * BackButton\n * -----------------------------------------------------------------------------------------------*/\ninterface BackButtonProps extends Pick<LinkProps, 'disabled'> {\n  fallback?: To;\n}\n\n/**\n * @beta\n * @description The universal back button for the Strapi application. This uses the internal history\n * context to navigate the user back to the previous location. It can be completely disabled in a\n * specific user case. When no history is available, you can provide a fallback destination,\n * otherwise the link will be disabled.\n */\nconst BackButton = React.forwardRef<HTMLAnchorElement, BackButtonProps>(\n  ({ disabled, fallback = '' }, ref) => {\n    const { formatMessage } = useIntl();\n    const navigate = useNavigate();\n\n    const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n    const goBack = useHistory('BackButton', (state) => state.goBack);\n    const history = useHistory('BackButton', (state) => state.history);\n    const currentLocationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n    const hasFallback = fallback !== '';\n    const shouldBeDisabled = disabled || (!canGoBack && !hasFallback);\n\n    const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n      e.preventDefault();\n\n      if (canGoBack) {\n        goBack();\n      } else if (hasFallback) {\n        navigate(fallback);\n      }\n    };\n\n    // The link destination from the history. Undefined if there is only 1 location in the history.\n    const historyTo = canGoBack ? history.at(currentLocationIndex - 2) : undefined;\n    // If no link destination from the history, use the fallback.\n    const toWithFallback = historyTo ?? fallback;\n\n    return (\n      <Link\n        ref={ref}\n        tag={NavLink}\n        to={toWithFallback}\n        onClick={handleClick}\n        disabled={shouldBeDisabled}\n        aria-disabled={shouldBeDisabled}\n        startIcon={<ArrowLeft />}\n      >\n        {formatMessage({\n          id: 'global.back',\n          defaultMessage: 'Back',\n        })}\n      </Link>\n    );\n  }\n);\n\nexport { BackButton, HistoryProvider, useHistory };\nexport type { BackButtonProps, HistoryProviderProps, HistoryContextValue, HistoryState };\n"],
  "mappings": "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",
  "names": []
}
