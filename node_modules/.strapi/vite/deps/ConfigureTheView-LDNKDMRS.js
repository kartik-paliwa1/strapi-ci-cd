import {
  useConfig
} from "./chunk-N2IINYMP.js";
import {
  getTrad,
  pageSizes,
  pluginId,
  sortOptions
} from "./chunk-T6YJK32F.js";
import "./chunk-4JEMFY4B.js";
import "./chunk-P4MW56JB.js";
import "./chunk-MXUJETMG.js";
import "./chunk-ILTK455Q.js";
import "./chunk-JVLPB7TF.js";
import "./chunk-UIAWNFPX.js";
import "./chunk-7PUUZZBB.js";
import "./chunk-OHBWTDYV.js";
import "./chunk-6LEA5NNP.js";
import "./chunk-ZJ3Q2ZXE.js";
import "./chunk-TZLCSQ7D.js";
import "./chunk-4Z4ICZDS.js";
import "./chunk-5YGMMZHP.js";
import "./chunk-XWWS33TK.js";
import "./chunk-MOVIDLV3.js";
import "./chunk-MMFIWMIJ.js";
import "./chunk-VPZPUWHH.js";
import "./chunk-SHHZGTRU.js";
import "./chunk-7R3IEP5O.js";
import "./chunk-DTPLHC4Y.js";
import "./chunk-PZ6PIJ5R.js";
import "./chunk-BALFEYRP.js";
import {
  ConfirmDialog
} from "./chunk-GJKFT6EX.js";
import "./chunk-HP6PMHBS.js";
import "./chunk-QP5S5OPY.js";
import "./chunk-LVJ5LIPC.js";
import "./chunk-6VU4ULW6.js";
import {
  require_set
} from "./chunk-SG5GK5UT.js";
import "./chunk-NZF6ERMF.js";
import "./chunk-KU3X5RH2.js";
import "./chunk-MZOBPZQ3.js";
import "./chunk-GTK7A75H.js";
import "./chunk-6QQ5Y257.js";
import "./chunk-MXOCLXDI.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-PM2LZIAE.js";
import "./chunk-H5MBP66A.js";
import "./chunk-53SLEXFN.js";
import "./chunk-FMI7IV2L.js";
import {
  Layouts
} from "./chunk-CLBB5XWA.js";
import {
  useTracking
} from "./chunk-X755HR2R.js";
import "./chunk-BC6C3P2K.js";
import "./chunk-5RZ6LKW6.js";
import "./chunk-DJ2H7J6F.js";
import {
  require_isEqual
} from "./chunk-KYOQACZ3.js";
import {
  Page
} from "./chunk-GH6VCESI.js";
import "./chunk-Q5ERACUA.js";
import "./chunk-N64PMPD5.js";
import {
  useNotification
} from "./chunk-5BKV6XT7.js";
import {
  require_get
} from "./chunk-ZOFH3G6M.js";
import "./chunk-T53VNMA3.js";
import "./chunk-NLF5ZJ7G.js";
import "./chunk-FFDAF6WU.js";
import "./chunk-LJ3JYJIM.js";
import {
  fn
} from "./chunk-SPCPB6JM.js";
import {
  Box,
  Button,
  Dialog,
  Field,
  Grid,
  Link,
  SingleSelect,
  SingleSelectOption,
  useIntl
} from "./chunk-DOD64YWE.js";
import "./chunk-75I5DWRQ.js";
import {
  NavLink
} from "./chunk-QOSJGLB6.js";
import "./chunk-47RN6QNY.js";
import {
  ForwardRef$4N,
  ForwardRef$5r
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-FJZ2NJT6.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/ConfigureTheView.tsx
var React = __toESM(require_react());
var import_isEqual = __toESM(require_isEqual());

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/components/Settings.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Settings = ({ sort = "", pageSize = 10, onChange: onChange2 }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(
    Box,
    {
      background: "neutral0",
      hasRadius: true,
      shadow: "tableShadow",
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 7,
      paddingRight: 7,
      children: (0, import_jsx_runtime.jsxs)(Grid.Root, { gap: 4, children: [
        (0, import_jsx_runtime.jsx)(Grid.Item, { s: 12, col: 6, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
          Field.Root,
          {
            hint: formatMessage({
              id: getTrad("config.entries.note"),
              defaultMessage: "Number of assets displayed by default in the Media Library"
            }),
            name: "pageSize",
            children: [
              (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
                id: getTrad("config.entries.title"),
                defaultMessage: "Entries per page"
              }) }),
              (0, import_jsx_runtime.jsx)(
                SingleSelect,
                {
                  onChange: (value) => onChange2({ target: { name: "pageSize", value } }),
                  value: pageSize,
                  children: pageSizes.map((pageSize2) => (0, import_jsx_runtime.jsx)(SingleSelectOption, { value: pageSize2, children: pageSize2 }, pageSize2))
                }
              ),
              (0, import_jsx_runtime.jsx)(Field.Hint, {})
            ]
          }
        ) }),
        (0, import_jsx_runtime.jsx)(Grid.Item, { s: 12, col: 6, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
          Field.Root,
          {
            hint: formatMessage({
              id: getTrad("config.note"),
              defaultMessage: "Note: You can override this value in the media library."
            }),
            name: "sort",
            children: [
              (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
                id: getTrad("config.sort.title"),
                defaultMessage: "Default sort order"
              }) }),
              (0, import_jsx_runtime.jsx)(
                SingleSelect,
                {
                  onChange: (value) => onChange2({ target: { name: "sort", value } }),
                  value: sort,
                  "test-sort": sort,
                  "data-testid": "sort-select",
                  children: sortOptions.map((filter) => (0, import_jsx_runtime.jsx)(
                    SingleSelectOption,
                    {
                      "data-testid": `sort-option-${filter.value}`,
                      value: filter.value,
                      children: formatMessage({ id: getTrad(filter.key), defaultMessage: `${filter.value}` })
                    },
                    filter.key
                  ))
                }
              ),
              (0, import_jsx_runtime.jsx)(Field.Hint, {})
            ]
          }
        ) })
      ] })
    }
  );
};

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/state/actionTypes.ts
var ON_CHANGE = `${pluginId}/ON_CHANGE`;
var SET_LOADED = `${pluginId}/SET_LOADED`;

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/state/actions.ts
var onChange = ({
  name,
  value
}) => ({
  type: ON_CHANGE,
  keys: name,
  value
});
var setLoaded = () => ({
  type: SET_LOADED
});

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/state/init.ts
var initialState = {
  initialData: {},
  modifiedData: {}
};
var init = (configData) => {
  return {
    ...initialState,
    initialData: configData,
    modifiedData: configData
  };
};

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/state/reducer.ts
var import_get = __toESM(require_get());
var import_set = __toESM(require_set());
var reducer = (state = initialState, action = {
  type: ""
}) => (
  // eslint-disable-next-line consistent-return
  fn(state, (draftState) => {
    switch (action.type) {
      case ON_CHANGE: {
        if ("keys" in action && "value" in action && action.keys) {
          (0, import_set.default)(draftState, ["modifiedData", ...action.keys.split(".")], action.value);
        }
        break;
      }
      case SET_LOADED: {
        const reInitialise = init((0, import_get.default)(draftState, ["modifiedData"], {}));
        draftState.initialData = reInitialise.initialData;
        draftState.modifiedData = reInitialise.modifiedData;
        break;
      }
      default:
        return draftState;
    }
  })
);

// ../packages/core/upload/admin/src/pages/App/ConfigureTheView/ConfigureTheView.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ConfigureTheView = ({ config }) => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { mutateConfig } = useConfig();
  const { isLoading: isSubmittingForm } = mutateConfig;
  const [showWarningSubmit, setWarningSubmit] = React.useState(false);
  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);
  const [reducerState, dispatch] = React.useReducer(
    reducer,
    initialState,
    () => init(config)
  );
  const typedDispatch = dispatch;
  const { initialData, modifiedData } = reducerState;
  const handleSubmit = (e) => {
    e.preventDefault();
    toggleWarningSubmit();
  };
  const handleConfirm = async () => {
    trackUsage("willEditMediaLibraryConfig");
    await mutateConfig.mutateAsync(modifiedData);
    setWarningSubmit(false);
    typedDispatch(setLoaded());
    toggleNotification({
      type: "success",
      message: formatMessage({
        id: "notification.form.success.fields",
        defaultMessage: "Changes saved"
      })
    });
  };
  const handleChange = ({
    target: { name, value }
  }) => {
    typedDispatch(onChange({ name, value }));
  };
  return (0, import_jsx_runtime2.jsx)(Layouts.Root, { children: (0, import_jsx_runtime2.jsx)(Page.Main, { "aria-busy": isSubmittingForm, children: (0, import_jsx_runtime2.jsxs)("form", { onSubmit: handleSubmit, children: [
    (0, import_jsx_runtime2.jsx)(
      Layouts.Header,
      {
        navigationAction: (0, import_jsx_runtime2.jsx)(
          Link,
          {
            tag: NavLink,
            startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$5r, {}),
            to: `/plugins/${pluginId}`,
            id: "go-back",
            children: formatMessage({ id: getTrad("config.back"), defaultMessage: "Back" })
          }
        ),
        primaryAction: (0, import_jsx_runtime2.jsx)(
          Button,
          {
            size: "S",
            startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$4N, {}),
            disabled: (0, import_isEqual.default)(modifiedData, initialData),
            type: "submit",
            children: formatMessage({ id: "global.save", defaultMessage: "Save" })
          }
        ),
        subtitle: formatMessage({
          id: getTrad("config.subtitle"),
          defaultMessage: "Define the view settings of the media library."
        }),
        title: formatMessage({
          id: getTrad("config.title"),
          defaultMessage: "Configure the view - Media Library"
        })
      }
    ),
    (0, import_jsx_runtime2.jsx)(Layouts.Content, { children: (0, import_jsx_runtime2.jsx)(
      Settings,
      {
        "data-testid": "settings",
        pageSize: modifiedData.pageSize || "",
        sort: modifiedData.sort || "",
        onChange: handleChange
      }
    ) }),
    "x",
    (0, import_jsx_runtime2.jsx)(Dialog.Root, { open: showWarningSubmit, onOpenChange: toggleWarningSubmit, children: (0, import_jsx_runtime2.jsx)(ConfirmDialog, { onConfirm: handleConfirm, variant: "default", children: formatMessage({
      id: getTrad("config.popUpWarning.warning.updateAllSettings"),
      defaultMessage: "This will modify all your settings"
    }) }) })
  ] }) }) });
};
export {
  ConfigureTheView
};
//# sourceMappingURL=ConfigureTheView-LDNKDMRS.js.map
