import {
  useTracking
} from "./chunk-X755HR2R.js";
import {
  useQueryParams
} from "./chunk-Q5ERACUA.js";
import {
  IconButton,
  SearchForm,
  Searchbar,
  useIntl
} from "./chunk-DOD64YWE.js";
import {
  ForwardRef$$
} from "./chunk-UZEUHNNF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/admin/src/components/SearchInput.tsx
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var SearchInput = ({
  disabled,
  label,
  placeholder,
  trackedEvent,
  trackedEventDetails
}) => {
  const inputRef = React.useRef(null);
  const iconButtonRef = React.useRef(null);
  const [{ query }, setQuery] = useQueryParams();
  const [value, setValue] = React.useState((query == null ? void 0 : query._q) || "");
  const [isOpen, setIsOpen] = React.useState(!!value);
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const handleToggle = () => setIsOpen((prev) => !prev);
  React.useLayoutEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);
  const handleClear = () => {
    setValue("");
    setQuery({ _q: "" }, "remove");
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    if (value) {
      if (trackedEvent) {
        trackUsage(trackedEvent, trackedEventDetails);
      }
      setQuery({ _q: encodeURIComponent(value), page: 1 });
    } else {
      handleToggle();
      setQuery({ _q: "" }, "remove");
    }
  };
  if (isOpen) {
    return (0, import_jsx_runtime.jsx)(SearchForm, { onSubmit: handleSubmit, children: (0, import_jsx_runtime.jsx)(
      Searchbar,
      {
        ref: inputRef,
        name: "search",
        onChange: (e) => setValue(e.target.value),
        value,
        clearLabel: formatMessage({ id: "clearLabel", defaultMessage: "Clear" }),
        onClear: handleClear,
        placeholder,
        onBlur: (e) => {
          if (!e.currentTarget.contains(e.relatedTarget) && e.currentTarget.value === "") {
            setIsOpen(false);
          }
        },
        children: label
      }
    ) });
  }
  return (0, import_jsx_runtime.jsx)(
    IconButton,
    {
      ref: iconButtonRef,
      disabled,
      label: formatMessage({ id: "global.search", defaultMessage: "Search" }),
      onClick: handleToggle,
      children: (0, import_jsx_runtime.jsx)(ForwardRef$$, {})
    }
  );
};

export {
  SearchInput
};
//# sourceMappingURL=chunk-BALFEYRP.js.map
